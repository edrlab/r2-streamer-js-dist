{"version":3,"file":"test-JSON-Contributor.js","sourceRoot":"","sources":["../../../test/test-JSON-Contributor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\r\n\r\nimport { Metadata } from \"@models/metadata\";\r\nimport { Contributor } from \"@models/metadata-contributor\";\r\nimport { test } from \"ava\";\r\nimport { JSON as TAJSON } from \"ta-json\";\r\n\r\nimport { setLcpNativePluginPath } from \"@parser/epub/lcp\";\r\nimport { initGlobals } from \"../src/init-globals\";\r\nimport {\r\n    checkType,\r\n    checkType_Array,\r\n    checkType_Object,\r\n    checkType_String,\r\n    inspect,\r\n    logJSON,\r\n} from \"./helpers\";\r\n\r\ninitGlobals();\r\nsetLcpNativePluginPath(path.join(process.cwd(), \"LCP\", \"lcp.node\"));\r\n\r\n// ==========================\r\n\r\nconst contName1 = \"theName1\";\r\nconst contRole1 = \"theRole1\";\r\nconst cont1 = new Contributor();\r\ncont1.Name = contName1;\r\ncont1.Role = contRole1;\r\nconst contName2 = \"theName2\";\r\nconst contRole2 = \"theRole2\";\r\nconst cont2 = new Contributor();\r\ncont2.Name = contName2;\r\ncont2.Role = contRole2;\r\n\r\n// ==========================\r\n\r\ntest(\"JSON SERIALIZE: Metadata.Imprint => Contributor[]\", (t) => {\r\n\r\n    const md = new Metadata();\r\n    md.Imprint = [];\r\n    md.Imprint.push(cont1);\r\n    md.Imprint.push(cont2);\r\n    inspect(md);\r\n\r\n    const json = TAJSON.serialize(md);\r\n    logJSON(json);\r\n\r\n    checkType_Array(t, json.imprint);\r\n    t.is(json.imprint.length, 2);\r\n\r\n    checkType_Object(t, json.imprint[0]);\r\n\r\n    checkType_String(t, json.imprint[0].name);\r\n    t.is(json.imprint[0].name, contName1);\r\n\r\n    checkType_String(t, json.imprint[0].role);\r\n    t.is(json.imprint[0].role, contRole1);\r\n\r\n    checkType_Object(t, json.imprint[1]);\r\n\r\n    checkType_String(t, json.imprint[1].name);\r\n    t.is(json.imprint[1].name, contName2);\r\n\r\n    checkType_String(t, json.imprint[1].role);\r\n    t.is(json.imprint[1].role, contRole2);\r\n});\r\n\r\ntest(\"JSON SERIALIZE: Metadata.Imprint => Contributor[1] collapse-array\", (t) => {\r\n\r\n    const md = new Metadata();\r\n    md.Imprint = [cont1];\r\n    inspect(md);\r\n\r\n    const json = TAJSON.serialize(md);\r\n    // // (normalizes single-item array to the item value itself)\r\n    // traverseJsonObjects(json,\r\n    //     (obj, parent, keyInParent) => {\r\n    //         if (parent && obj instanceof Array && obj.length === 1) {\r\n    //             parent[keyInParent] = obj[0];\r\n    //         }\r\n    //     });\r\n    logJSON(json);\r\n\r\n    checkType_Object(t, json.imprint);\r\n\r\n    checkType_String(t, json.imprint.name);\r\n    t.is(json.imprint.name, contName1);\r\n\r\n    checkType_String(t, json.imprint.role);\r\n    t.is(json.imprint.role, contRole1);\r\n});\r\n\r\n// implemented, see IPropertyConverter.collapseArrayWithSingleItem()\r\n// test(\"JSON SERIALIZE: Metadata.Imprint => Contributor[1] keep-array\", (t) => {\r\n\r\n//     const md = new Metadata();\r\n//     md.Imprint = [cont1];\r\n//     inspect(md);\r\n\r\n//     const json = TAJSON.serialize(md);\r\n//     logJSON(json);\r\n\r\n//     checkType_Array(t, json.imprint);\r\n//     t.is(json.imprint.length, 1);\r\n\r\n//     checkType_Object(t, json.imprint[0]);\r\n\r\n//     checkType_String(t, json.imprint[0].name);\r\n//     t.is(json.imprint[0].name, contName1);\r\n\r\n//     checkType_String(t, json.imprint[0].role);\r\n//     t.is(json.imprint[0].role, contRole1);\r\n// });\r\n\r\ntest(\"JSON DESERIALIZE: Metadata.Imprint => Contributor[]\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.imprint = [{ name: contName1, role: contRole1 }, { name: contName2, role: contRole2 }];\r\n    logJSON(json);\r\n\r\n    const md: Metadata = TAJSON.deserialize<Metadata>(json, Metadata);\r\n    inspect(md);\r\n\r\n    checkType_Array(t, md.Imprint);\r\n    t.is(md.Imprint.length, 2);\r\n\r\n    checkType(t, md.Imprint[0], Contributor);\r\n\r\n    checkType_String(t, md.Imprint[0].Name);\r\n    t.is(md.Imprint[0].Name, contName1);\r\n\r\n    checkType_String(t, md.Imprint[0].Role);\r\n    t.is(md.Imprint[0].Role, contRole1);\r\n\r\n    checkType(t, md.Imprint[1], Contributor);\r\n\r\n    checkType_String(t, md.Imprint[1].Name);\r\n    t.is(md.Imprint[1].Name, contName2);\r\n\r\n    checkType_String(t, md.Imprint[1].Role);\r\n    t.is(md.Imprint[1].Role, contRole2);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: Metadata.Imprint => Contributor[1]\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.imprint = [{ name: contName1, role: contRole1 }];\r\n    logJSON(json);\r\n\r\n    const md: Metadata = TAJSON.deserialize<Metadata>(json, Metadata);\r\n    inspect(md);\r\n\r\n    checkType_Array(t, md.Imprint);\r\n    t.is(md.Imprint.length, 1);\r\n\r\n    checkType(t, md.Imprint[0], Contributor);\r\n\r\n    checkType_String(t, md.Imprint[0].Name);\r\n    t.is(md.Imprint[0].Name, contName1);\r\n\r\n    checkType_String(t, md.Imprint[0].Role);\r\n    t.is(md.Imprint[0].Role, contRole1);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: Metadata.Imprint => Contributor\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.imprint = { name: contName2, role: contRole2 };\r\n    logJSON(json);\r\n\r\n    const md: Metadata = TAJSON.deserialize<Metadata>(json, Metadata);\r\n    inspect(md);\r\n\r\n    checkType_Array(t, md.Imprint);\r\n    t.is(md.Imprint.length, 1);\r\n\r\n    checkType(t, md.Imprint[0], Contributor);\r\n\r\n    checkType_String(t, md.Imprint[0].Name);\r\n    t.is(md.Imprint[0].Name, contName2);\r\n\r\n    checkType_String(t, md.Imprint[0].Role);\r\n    t.is(md.Imprint[0].Role, contRole2);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: Metadata.Imprint => ContributorSTR[]\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.imprint = [contName1, contName2];\r\n    logJSON(json);\r\n\r\n    const md: Metadata = TAJSON.deserialize<Metadata>(json, Metadata);\r\n    inspect(md);\r\n\r\n    checkType_Array(t, md.Imprint);\r\n    t.is(md.Imprint.length, 2);\r\n\r\n    checkType(t, md.Imprint[0], Contributor);\r\n\r\n    checkType_String(t, md.Imprint[0].Name);\r\n    t.is(md.Imprint[0].Name, contName1);\r\n\r\n    checkType(t, md.Imprint[1], Contributor);\r\n\r\n    checkType_String(t, md.Imprint[1].Name);\r\n    t.is(md.Imprint[1].Name, contName2);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: Metadata.Imprint => ContributorSTR[1]\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.imprint = [contName1];\r\n    logJSON(json);\r\n\r\n    const md: Metadata = TAJSON.deserialize<Metadata>(json, Metadata);\r\n    inspect(md);\r\n\r\n    checkType_Array(t, md.Imprint);\r\n    t.is(md.Imprint.length, 1);\r\n\r\n    checkType(t, md.Imprint[0], Contributor);\r\n\r\n    checkType_String(t, md.Imprint[0].Name);\r\n    t.is(md.Imprint[0].Name, contName1);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: Metadata.Imprint => ContributorSTR\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.imprint = contName2;\r\n    logJSON(json);\r\n\r\n    const md: Metadata = TAJSON.deserialize<Metadata>(json, Metadata);\r\n    inspect(md);\r\n\r\n    checkType_Array(t, md.Imprint);\r\n    t.is(md.Imprint.length, 1);\r\n\r\n    checkType(t, md.Imprint[0], Contributor);\r\n\r\n    checkType_String(t, md.Imprint[0].Name);\r\n    t.is(md.Imprint[0].Name, contName2);\r\n});\r\n"]}