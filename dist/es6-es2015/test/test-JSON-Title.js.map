{"version":3,"file":"test-JSON-Title.js","sourceRoot":"","sources":["../../../test/test-JSON-Title.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\n\nimport { Metadata } from \"@models/metadata\";\nimport { IStringMap } from \"@models/metadata-multilang\";\nimport { OPDSPublicationMetadata } from \"@opds/opds2/opds2-publicationMetadata\";\nimport { test } from \"ava\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nimport { setLcpNativePluginPath } from \"@parser/epub/lcp\";\nimport { initGlobals } from \"../src/init-globals\";\nimport {\n    checkType_Object,\n    checkType_String,\n    inspect,\n    logJSON,\n} from \"./helpers\";\n\ninitGlobals();\nsetLcpNativePluginPath(path.join(process.cwd(), \"LCP/lcp.node\"));\n\n// ==========================\n\nconst titleStr1 = \"str1\";\nconst titleStr2 = \"str2\";\nconst titleLang1 = \"lang1\";\nconst titleLang2 = \"lang2\";\nconst titleLangStr1: IStringMap = {};\ntitleLangStr1[titleLang1] = titleStr1;\ntitleLangStr1[titleLang2] = titleStr2;\nconst titleLangStr2: IStringMap = {};\ntitleLangStr2[titleLang1] = titleStr2;\ntitleLangStr2[titleLang2] = titleStr1;\n\n// ==========================\n\ntest(\"JSON SERIALIZE: OPDSPublicationMetadata.Title => string\", (t) => {\n\n    const md = new OPDSPublicationMetadata();\n    md.Title = titleStr1;\n    inspect(md);\n\n    const json = TAJSON.serialize(md);\n    logJSON(json);\n\n    checkType_String(t, json.title);\n    t.is(json.title, titleStr1);\n});\n\ntest(\"JSON SERIALIZE: OPDSPublicationMetadata.Title => string-lang\", (t) => {\n\n    const md = new OPDSPublicationMetadata();\n    md.Title = titleLangStr1;\n    inspect(md);\n\n    const json = TAJSON.serialize(md);\n    logJSON(json);\n\n    checkType_Object(t, json.title);\n\n    checkType_String(t, json.title[titleLang1]);\n    t.is(json.title[titleLang1], titleStr1);\n\n    checkType_String(t, json.title[titleLang2]);\n    t.is(json.title[titleLang2], titleStr2);\n});\n\ntest(\"JSON DESERIALIZE: OPDSPublicationMetadata.Title => string\", (t) => {\n\n    const json: any = {};\n    json.title = titleStr1;\n    logJSON(json);\n\n    const md: OPDSPublicationMetadata = TAJSON.deserialize<OPDSPublicationMetadata>(json, OPDSPublicationMetadata);\n    inspect(md);\n\n    checkType_String(t, md.Title);\n    t.is(md.Title, titleStr1);\n});\n\ntest(\"JSON DESERIALIZE: OPDSPublicationMetadata.Title => string-lang\", (t) => {\n\n    const json: any = {};\n    json.title = titleLangStr1;\n    logJSON(json);\n\n    const md: OPDSPublicationMetadata = TAJSON.deserialize<OPDSPublicationMetadata>(json, OPDSPublicationMetadata);\n    inspect(md);\n\n    checkType_Object(t, md.Title);\n\n    checkType_String(t, (md.Title as IStringMap)[titleLang1]);\n    t.is((md.Title as IStringMap)[titleLang1], titleStr1);\n\n    checkType_String(t, (md.Title as IStringMap)[titleLang2]);\n    t.is((md.Title as IStringMap)[titleLang2], titleStr2);\n});\n\n// ==========================\n\ntest(\"JSON SERIALIZE: Metadata.Title => string\", (t) => {\n\n    const md = new Metadata();\n    md.Title = titleStr1;\n    inspect(md);\n\n    const json = TAJSON.serialize(md);\n    logJSON(json);\n\n    checkType_String(t, json.title);\n    t.is(json.title, titleStr1);\n});\n\ntest(\"JSON SERIALIZE: Metadata.Title => string-lang\", (t) => {\n\n    const md = new Metadata();\n    md.Title = titleLangStr1;\n    inspect(md);\n\n    const json = TAJSON.serialize(md);\n    logJSON(json);\n\n    checkType_Object(t, json.title);\n\n    checkType_String(t, json.title[titleLang1]);\n    t.is(json.title[titleLang1], titleStr1);\n\n    checkType_String(t, json.title[titleLang2]);\n    t.is(json.title[titleLang2], titleStr2);\n});\n\ntest(\"JSON DESERIALIZE: Metadata.Title => string\", (t) => {\n\n    const json: any = {};\n    json.title = titleStr1;\n    logJSON(json);\n\n    const md: Metadata = TAJSON.deserialize<Metadata>(json, Metadata);\n    inspect(md);\n\n    checkType_String(t, md.Title);\n    t.is(md.Title, titleStr1);\n});\n\ntest(\"JSON DESERIALIZE: Metadata.Title => string-lang\", (t) => {\n\n    const json: any = {};\n    json.title = titleLangStr1;\n    logJSON(json);\n\n    const md: Metadata = TAJSON.deserialize<Metadata>(json, Metadata);\n    inspect(md);\n\n    checkType_Object(t, md.Title);\n\n    checkType_String(t, (md.Title as IStringMap)[titleLang1]);\n    t.is((md.Title as IStringMap)[titleLang1], titleStr1);\n\n    checkType_String(t, (md.Title as IStringMap)[titleLang2]);\n    t.is((md.Title as IStringMap)[titleLang2], titleStr2);\n});\n"]}