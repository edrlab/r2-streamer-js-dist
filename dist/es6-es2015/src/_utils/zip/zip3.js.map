{"version":3,"file":"zip3.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip3.ts"],"names":[],"mappings":"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","sourcesContent":["import * as debug_ from \"debug\";\r\nimport * as request from \"request\";\r\nimport * as unzipper from \"unzipper\";\r\n\r\nimport { isHTTP } from \"../http/UrlUtils\";\r\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\r\n\r\nconst debug = debug_(\"r2:zip3\");\r\n\r\ninterface IStringKeyedObject { [key: string]: any; }\r\n\r\nexport class Zip3 extends Zip {\r\n\r\n    public static async loadPromise(filePath: string): Promise<IZip> {\r\n        if (isHTTP(filePath)) {\r\n            return Zip3.loadPromiseHTTP(filePath);\r\n        }\r\n\r\n        return new Promise<IZip>(async (resolve, reject) => {\r\n            let zip: any;\r\n            try {\r\n                zip = await unzipper.Open.file(filePath);\r\n            } catch (err) {\r\n                debug(err);\r\n                reject(err);\r\n                return;\r\n            }\r\n            debug(zip);\r\n            resolve(new Zip3(filePath, zip));\r\n        });\r\n    }\r\n\r\n    private static async loadPromiseHTTP(filePath: string): Promise<IZip> {\r\n\r\n        return new Promise<IZip>(async (resolve, reject) => {\r\n            let zip: any;\r\n            try {\r\n                zip = await unzipper.Open.url(request.get,\r\n                    {\r\n                        headers: {},\r\n                        method: \"GET\",\r\n                        uri: filePath,\r\n                        url: filePath,\r\n                    });\r\n            } catch (err) {\r\n                debug(err);\r\n                reject(err);\r\n                return;\r\n            }\r\n            debug(zip);\r\n            resolve(new Zip3(filePath, zip));\r\n        });\r\n    }\r\n\r\n    private entries: IStringKeyedObject;\r\n\r\n    private constructor(readonly filePath: string, readonly zip: any) {\r\n        super();\r\n\r\n        this.entries = {};\r\n        this.zip.files.forEach((file: any) => {\r\n            this.entries[file.path] = file;\r\n        });\r\n    }\r\n\r\n    public freeDestroy(): void {\r\n        debug(\"freeDestroy: Zip3 -- \" + this.filePath);\r\n        if (this.zip) {\r\n            // TODO?\r\n            // this.zip.close();\r\n        }\r\n    }\r\n\r\n    public entriesCount(): number {\r\n        return this.zip.files.length;\r\n    }\r\n\r\n    public hasEntries(): boolean {\r\n        return this.entriesCount() > 0;\r\n    }\r\n\r\n    public hasEntry(entryPath: string): boolean {\r\n        return this.hasEntries() && this.entries[entryPath];\r\n    }\r\n\r\n    public forEachEntry(callback: (entryName: string) => void) {\r\n\r\n        if (!this.hasEntries()) {\r\n            return;\r\n        }\r\n\r\n        Object.keys(this.entries).forEach((entryName) => {\r\n            callback(entryName);\r\n        });\r\n    }\r\n\r\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\r\n\r\n        // debug(`entryStreamPromise: ${entryPath}`);\r\n\r\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\r\n            return Promise.reject(\"no such path in zip: \" + entryPath);\r\n        }\r\n\r\n        return new Promise<IStreamAndLength>((resolve, _reject) => {\r\n\r\n            const entry = this.entries[entryPath];\r\n            debug(entry);\r\n\r\n            const stream: NodeJS.ReadableStream = entry.stream();\r\n            const streamAndLength: IStreamAndLength = {\r\n                length: entry.size,\r\n                reset: async () => {\r\n                    return this.entryStreamPromise(entryPath);\r\n                },\r\n                stream,\r\n            };\r\n            resolve(streamAndLength);\r\n        });\r\n    }\r\n}\r\n"]}