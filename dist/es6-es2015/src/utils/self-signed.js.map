{"version":3,"file":"self-signed.js","sourceRoot":"","sources":["../../../../src/utils/self-signed.ts"],"names":[],"mappings":";;;AAAA,yCAAyC;AACzC,6BAA6B;AAe7B;;QACI,MAAM,CAAC,IAAI,OAAO,CAAkB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACpD,MAAM,IAAI,GAAG;gBACT,SAAS,EAAE,QAAQ;gBAGnB,IAAI,EAAE,EAAE;gBACR,UAAU,EAAE,CAAC;wBACT,QAAQ,EAAE,CAAC;gCACP,IAAI,EAAE,CAAC;gCACP,KAAK,EAAE,WAAW;6BACrB,CAAC;wBACF,IAAI,EAAE,gBAAgB;qBACzB,CAAC;aACL,CAAC;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACvB,MAAM,UAAU,GAAG,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,qBAAqB,GAAG,IAAI,EAAE,CAAC,CAAC;YAEjF,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,GAAQ,EAAE,IAAS,EAAE,EAAE;gBAC1D,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACN,MAAM,CAAC,GAAG,CAAC,CAAC;oBACZ,MAAM,CAAC;gBACX,CAAC;gBACA,IAAwB,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;gBAC9C,IAAwB,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAC1C,OAAO,CAAC,IAAuB,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CAAA;AA5BD,wDA4BC","sourcesContent":["import * as selfsigned from \"selfsigned\";\nimport * as uuid from \"uuid\";\n\nexport interface CertificateData {\n    trustKey: string;\n    trustVal: string;\n\n    // clientprivate?: string;\n    // clientpublic?: string;\n    // clientcert?: string;\n\n    private?: string; // https.ServerOptions.key\n    public?: string;\n    cert?: string; // https.ServerOptions.cert\n}\n\nexport async function generateSelfSignedData(): Promise<CertificateData> {\n    return new Promise<CertificateData>((resolve, reject) => {\n        const opts = {\n            algorithm: \"sha256\",\n            // clientCertificate: true,\n            // clientCertificateCN: \"R2 insecure client\",\n            days: 30,\n            extensions: [{\n                altNames: [{\n                    type: 2, // DNSName\n                    value: \"localhost\",\n                }],\n                name: \"subjectAltName\",\n            }],\n        };\n        const rand = uuid.v4();\n        const attributes = [{ name: \"commonName\", value: \"R2 insecure server \" + rand }];\n\n        selfsigned.generate(attributes, opts, (err: any, keys: any) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            (keys as CertificateData).trustKey = uuid.v4();\n            (keys as CertificateData).trustVal = rand;\n            resolve(keys as CertificateData);\n        });\n    });\n}\n"]}