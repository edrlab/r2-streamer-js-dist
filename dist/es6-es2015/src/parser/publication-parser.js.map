{"version":3,"file":"publication-parser.js","sourceRoot":"","sources":["../../../../src/parser/publication-parser.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAG7B,qCAA8C;AAC9C,uCAAgD;AAEhD,iCAA8C,QAAgB;;QAE1D,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QACjD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5B,uBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC5B,qBAAe,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;CAAA;AAPD,0DAOC","sourcesContent":["import * as path from \"path\";\r\n\r\nimport { Publication } from \"@models/publication\";\r\nimport { CbzParsePromise } from \"@parser/cbz\";\r\nimport { EpubParsePromise } from \"@parser/epub\";\r\n\r\nexport async function PublicationParsePromise(filePath: string): Promise<Publication> {\r\n\r\n    const fileName = path.basename(filePath);\r\n    const ext = path.extname(fileName).toLowerCase();\r\n    return /\\.epub[3]?$/.test(ext) ?\r\n        EpubParsePromise(filePath) :\r\n        CbzParsePromise(filePath);\r\n}\r\n"]}