{"version":3,"file":"opds2-create-cli.js","sourceRoot":"","sources":["../../../../src/http/opds2-create-cli.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\n\nimport { Publication } from \"@models/publication\";\nimport { OPDSFeed } from \"@opds/opds2/opds2\";\nimport { OPDSContributor } from \"@opds/opds2/opds2-contributor\";\nimport { OPDSLink } from \"@opds/opds2/opds2-link\";\nimport { OPDSMetadata } from \"@opds/opds2/opds2-metadata\";\nimport { OPDSPublication } from \"@opds/opds2/opds2-publication\";\nimport { OPDSPublicationMetadata } from \"@opds/opds2/opds2-publicationMetadata\";\nimport { PublicationParsePromise } from \"@parser/publication-parser\";\nimport { encodeURIComponent_RFC3986, isHTTP } from \"@utils/http/UrlUtils\";\nimport * as debug_ from \"debug\";\nimport * as moment from \"moment\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nconst debug = debug_(\"r2:opds2create\");\n\ndebug(`process.cwd(): ${process.cwd()}`);\ndebug(`__dirname: ${__dirname}`);\n\nlet args = process.argv.slice(2);\n// debug(\"process.argv.slice(2): %o\", args);\n\nif (!args.length) {\n    debug(\"FILEPATH ARGUMENTS ARE MISSING.\");\n    process.exit(1);\n}\nconst opdsJsonFilePath = args[0];\nargs = args.slice(1);\nif (fs.existsSync(opdsJsonFilePath)) {\n    debug(\"OPDS2 JSON file already exists.\");\n    process.exit(1);\n}\n\n// tslint:disable-next-line:no-floating-promises\n(async () => {\n    const feed = new OPDSFeed();\n    feed.Context = [\"http://opds-spec.org/opds.jsonld\"];\n    feed.Metadata = new OPDSMetadata();\n    feed.Metadata.RDFType = \"http://schema.org/DataFeed\";\n    feed.Metadata.Title = \"Readium 2 OPDS 2.0 Feed\";\n    feed.Metadata.Modified = moment(Date.now()).toDate();\n\n    feed.Publications = [];\n\n    let nPubs = 0;\n    for (const pathBase64 of args) {\n        const pathBase64Str = new Buffer(pathBase64, \"base64\").toString(\"utf8\");\n\n        if (isHTTP(pathBase64Str)) {\n            continue;\n        }\n\n        // const fileName = path.basename(pathBase64Str);\n        // const ext = path.extname(fileName).toLowerCase();\n\n        debug(`OPDS parsing: ${pathBase64Str}`);\n        let publication: Publication;\n        try {\n            publication = await PublicationParsePromise(pathBase64Str);\n        } catch (err) {\n            debug(err);\n            continue;\n        }\n\n        nPubs++;\n        const filePathBase64Encoded = encodeURIComponent_RFC3986(pathBase64);\n\n        const publi = new OPDSPublication();\n        publi.Links = [];\n        const linkSelf = new OPDSLink();\n        linkSelf.Href = filePathBase64Encoded + \"/manifest.json\";\n        linkSelf.TypeLink = \"application/webpub+json\";\n        linkSelf.AddRel(\"self\");\n        publi.Links.push(linkSelf);\n\n        publi.Images = [];\n        const coverLink = publication.GetCover();\n        if (coverLink) {\n            const linkCover = new OPDSLink();\n            linkCover.Href = filePathBase64Encoded + \"/\" + coverLink.Href;\n            linkCover.TypeLink = coverLink.TypeLink;\n            // linkCover.Rel = [];\n            // linkCover.Rel.push(\"cover\");\n\n            if (coverLink.Width && coverLink.Height) {\n                linkCover.Width = coverLink.Width;\n                linkCover.Height = coverLink.Height;\n\n            }\n            publi.Images.push(linkCover);\n        }\n\n        if (feed.Metadata) {\n            publi.Metadata = new OPDSPublicationMetadata();\n            // TODO copy metadata (many more!!!)\n            // There must be a more effective and elegant way to do this!!\n            // ==> implement shared data model, clone the common parts\n            if (publication.Metadata.Artist) {\n                publi.Metadata.Artist = [];\n                publication.Metadata.Artist.forEach((contributor) => {\n                    const c = new OPDSContributor();\n                    if (contributor.Identifier) {\n                        c.Identifier = contributor.Identifier;\n                    }\n                    if (contributor.Name) {\n                        c.Name = contributor.Name;\n                    }\n                    if (contributor.Role) {\n                        c.Role = contributor.Role;\n                    }\n                    if (contributor.SortAs) {\n                        c.SortAs = contributor.SortAs;\n                    }\n                    publi.Metadata.Artist.push(c);\n                });\n            }\n        }\n\n        feed.Publications.push(publi);\n    }\n\n    feed.Metadata.NumberOfItems = nPubs;\n\n    const jsonObj = TAJSON.serialize(feed);\n    const jsonStr = global.JSON.stringify(jsonObj, null, \"\");\n    fs.writeFileSync(opdsJsonFilePath, jsonStr, { encoding: \"utf8\" });\n\n    debug(\"DONE! :)\");\n    debug(opdsJsonFilePath);\n})();\n"]}