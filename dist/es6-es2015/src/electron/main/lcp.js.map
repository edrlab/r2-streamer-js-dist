{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/electron/main/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["import { injectFileInZip } from \"@r2-streamer-js/_utils/zip/zipInjector\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport { LCP } from \"@r2-streamer-js/parser/epub/lcp\";\nimport * as crypto from \"crypto\";\nimport * as debug_ from \"debug\";\nimport { ipcMain } from \"electron\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport { JSON as TAJSON } from \"ta-json\";\nimport { R2_EVENT_TRY_LCP_PASS, R2_EVENT_TRY_LCP_PASS_RES } from \"../common/events\";\nimport { installLsdHandler } from \"./lsd\";\nimport { IDeviceIDManager } from \"./lsd-deviceid-manager\";\n\nconst debug = debug_(\"r2:electron:main:lcp\");\n\nexport function installLcpHandler(publicationsServer: Server, deviceIDManager: IDeviceIDManager) {\n    installLsdHandler(publicationsServer, deviceIDManager);\n\n    ipcMain.on(R2_EVENT_TRY_LCP_PASS, async (\n        event: any,\n        publicationFilePath: string,\n        lcpPass: string,\n        isSha256Hex: boolean) => {\n\n        // debug(publicationFilePath);\n        // debug(lcpPass);\n        let okay = false;\n        try {\n            okay = await tryLcpPass(publicationFilePath, lcpPass, isSha256Hex);\n        } catch (err) {\n            debug(err);\n            okay = false;\n        }\n\n        let passSha256Hex: string | undefined;\n        if (okay) {\n            if (isSha256Hex) {\n                passSha256Hex = lcpPass;\n            } else {\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(lcpPass);\n                passSha256Hex = checkSum.digest(\"hex\");\n                // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n                // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n            }\n        }\n\n        event.sender.send(R2_EVENT_TRY_LCP_PASS_RES,\n            okay,\n            (okay ? \"Correct.\" : \"Please try again.\"),\n            passSha256Hex ? passSha256Hex : \"xxx\",\n        );\n    });\n\n    async function tryLcpPass(publicationFilePath: string, lcpPass: string, isSha256Hex: boolean): Promise<boolean> {\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication) {\n            return false;\n        }\n\n        let lcpPassHex: string | undefined;\n\n        if (isSha256Hex) {\n            lcpPassHex = lcpPass;\n        } else {\n            const checkSum = crypto.createHash(\"sha256\");\n            checkSum.update(lcpPass);\n            lcpPassHex = checkSum.digest(\"hex\");\n            // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n            // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n        }\n\n        let okay = false;\n        try {\n            okay = await publication.LCP.setUserPassphrase(lcpPassHex);\n        } catch (err) {\n            debug(err);\n            okay = false;\n        }\n        if (!okay) {\n            debug(\"FAIL publication.LCP.setUserPassphrase()\");\n        }\n        return okay;\n    }\n}\n\nexport async function downloadFromLCPL(filePath: string, dir: string, destFileName: string): Promise<string[]> {\n\n    return new Promise<string[]>(async (resolve, reject) => {\n\n        const lcplStr = fs.readFileSync(filePath, { encoding: \"utf8\" });\n        // debug(lcplStr);\n        const lcplJson = global.JSON.parse(lcplStr);\n        const lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\n        if (lcpl.Links) {\n            const pubLink = lcpl.Links.find((link) => {\n                return link.Rel === \"publication\";\n            });\n            if (pubLink) {\n\n                const destPathTMP = path.join(dir, destFileName + \".tmp\");\n                const destPathFINAL = path.join(dir, destFileName);\n\n                const failure = (err: any) => {\n                    debug(err);\n                    reject(pubLink.Href + \" (\" + err + \")\");\n                };\n\n                const success = async (response: request.RequestResponse) => {\n\n                    Object.keys(response.headers).forEach((header: string) => {\n                        debug(header + \" => \" + response.headers[header]);\n                    });\n\n                    if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                        failure(\"HTTP CODE \" + response.statusCode);\n                        return;\n                    }\n\n                    const destStreamTMP = fs.createWriteStream(destPathTMP);\n                    response.pipe(destStreamTMP);\n                    // response.on(\"end\", () => {\n                    // });\n                    destStreamTMP.on(\"finish\", () => {\n\n                        const zipError = (err: any) => {\n                            debug(err);\n                            reject(destPathTMP + \" (\" + err + \")\");\n                        };\n\n                        const doneCallback = () => {\n                            setTimeout(() => {\n                                fs.unlinkSync(destPathTMP);\n                            }, 1000);\n\n                            resolve([destPathFINAL, pubLink.Href]);\n                        };\n                        const zipEntryPath = \"META-INF/license.lcpl\";\n\n                        injectFileInZip(destPathTMP, destPathFINAL, filePath, zipEntryPath, zipError, doneCallback);\n                    });\n                };\n\n                // No response streaming! :(\n                // https://github.com/request/request-promise/issues/90\n                const needsStreamingResponse = true;\n                if (needsStreamingResponse) {\n                    request.get({\n                        headers: {},\n                        method: \"GET\",\n                        uri: pubLink.Href,\n                    })\n                        .on(\"response\", success)\n                        .on(\"error\", failure);\n                } else {\n                    let response: requestPromise.FullResponse;\n                    try {\n                        // tslint:disable-next-line:await-promise no-floating-promises\n                        response = await requestPromise({\n                            headers: {},\n                            method: \"GET\",\n                            resolveWithFullResponse: true,\n                            uri: pubLink.Href,\n                        });\n                    } catch (err) {\n                        failure(err);\n                        return;\n                    }\n\n                    await success(response);\n                }\n            }\n        }\n    });\n}\n"]}