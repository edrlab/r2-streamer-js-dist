{"version":3,"file":"CounterPassThroughStream.js","sourceRoot":"","sources":["../../../../../src/_utils/stream/CounterPassThroughStream.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AAInC,8BAAsC,SAAQ,kBAAS;IAInD,YAAY,EAAU;QAClB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;IAC3B,CAAC;IAEM,UAAU,CAAC,KAAa,EAAE,SAAiB,EAAE,QAAoB;QACpE,IAAI,CAAC,aAAa,IAAI,KAAK,CAAC,MAAM,CAAC;QAEnC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEjB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEtB,QAAQ,EAAE,CAAC;IACf,CAAC;CACJ;AAnBD,4DAmBC","sourcesContent":["import { Transform } from \"stream\";\r\n\r\n// const debug = debug_(\"r2:rangeStream\");\r\n\r\nexport class CounterPassThroughStream extends Transform {\r\n    public bytesReceived: number;\r\n    public readonly id: number;\r\n\r\n    constructor(id: number) {\r\n        super();\r\n        this.id = id;\r\n        this.bytesReceived = 0;\r\n    }\r\n\r\n    public _transform(chunk: Buffer, _encoding: string, callback: () => void): void {\r\n        this.bytesReceived += chunk.length;\r\n\r\n        this.push(chunk);\r\n\r\n        this.emit(\"progress\");\r\n\r\n        callback();\r\n    }\r\n}\r\n"]}