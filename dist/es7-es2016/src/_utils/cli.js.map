{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../../../src/_utils/cli.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as util from \"util\";\n\nimport { Publication } from \"@models/publication\";\nimport { PublicationParsePromise } from \"@parser/publication-parser\";\n\nimport { initGlobals } from \"../init-globals\";\n\ninitGlobals();\n\nconsole.log(\"process.cwd():\");\nconsole.log(process.cwd());\n\nconsole.log(\"__dirname: \");\nconsole.log(__dirname);\n\nconst args = process.argv.slice(2);\nconsole.log(\"args:\");\nconsole.log(args);\n\nlet filePath = args[0];\nif (!filePath) {\n    console.log(\"FILEPATH ARGUMENT IS MISSING.\");\n    process.exit(1);\n}\n\nfilePath = filePath.trim();\nconsole.log(filePath);\nif (!fs.existsSync(filePath)) {\n    filePath = path.join(__dirname, filePath);\n    console.log(filePath);\n    if (!fs.existsSync(filePath)) {\n        filePath = path.join(process.cwd(), filePath);\n        console.log(filePath);\n        if (!fs.existsSync(filePath)) {\n            console.log(\"FILEPATH DOES NOT EXIST.\");\n            process.exit(1);\n        }\n    }\n}\n\nconst fileName = path.basename(filePath);\nconst ext = path.extname(fileName).toLowerCase();\n\n// tslint:disable-next-line:no-floating-promises\n(async () => {\n\n    let publication: Publication | undefined;\n    try {\n        publication = await PublicationParsePromise(filePath);\n    } catch (err) {\n        console.log(\"== Publication Parser: reject\");\n        console.log(err);\n        return;\n    }\n    console.log(\"== Publication Parser: resolve: \" + publication.Links);\n\n    if (/\\.epub[3]?$/.test(ext)) {\n        // dumpPublication(publication);\n    } else if (ext === \".cbz\") {\n        dumpPublication(publication);\n    }\n})();\n\nexport function dumpPublication(publication: Publication) {\n\n    console.log(\"#### RAW OBJECT:\");\n\n    // breakLength: 100  maxArrayLength: undefined\n    console.log(util.inspect(publication,\n        { showHidden: false, depth: 1000, colors: true, customInspect: true }));\n\n    // console.log(\"#### RAW JSON:\");\n    // const publicationJsonObj = JSON.serialize(publication);\n    // console.log(publicationJsonObj);\n\n    // console.log(\"#### PRETTY JSON:\");\n    // const publicationJsonStr = global.JSON.stringify(publicationJsonObj, null, \"  \");\n    // console.log(publicationJsonStr);\n\n    // console.log(\"#### CANONICAL JSON:\");\n    // const publicationJsonStrCanonical = JSON.stringify(sortObject(publicationJsonObj));\n    // console.log(publicationJsonStrCanonical);\n}\n"]}