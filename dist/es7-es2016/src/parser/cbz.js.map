{"version":3,"file":"cbz.js","sourceRoot":"","sources":["../../../../src/parser/cbz.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\n\nimport { Metadata } from \"@models/metadata\";\nimport { Contributor } from \"@models/metadata-contributor\";\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport { XML } from \"@utils/xml-js-mapper\";\nimport { IStreamAndLength, IZip } from \"@utils/zip/zip\";\nimport { zipLoadPromise } from \"@utils/zip/zipFactory\";\nimport * as mime from \"mime-types\";\nimport * as slugify from \"slugify\";\nimport * as xmldom from \"xmldom\";\n\nimport { ComicInfo } from \"./comicrack/comicrack\";\nimport { addCoverDimensions } from \"./epub\";\n\nexport async function CbzParsePromise(filePath: string): Promise<Publication> {\n\n    let zip: any;\n    try {\n        zip = await zipLoadPromise(filePath);\n    } catch (err) {\n        return Promise.reject(err);\n    }\n\n    if (!zip.hasEntries()) {\n        return Promise.reject(\"CBZ zip empty\");\n    }\n\n    const publication = new Publication();\n    publication.Context = [\"http://readium.org/webpub/default.jsonld\"];\n    publication.Metadata = new Metadata();\n    publication.Metadata.RDFType = \"http://schema.org/ComicIssue\";\n    publication.Metadata.Identifier = filePathToTitle(filePath);\n\n    publication.AddToInternal(\"type\", \"cbz\");\n    publication.AddToInternal(\"zip\", zip);\n\n    let comicInfoEntryName: string | undefined;\n    zip.forEachEntry((entryName: string) => {\n        // console.log(\"++ZIP: entry\");\n\n        // console.log(entryName);\n\n        const link = new Link();\n        link.Href = entryName;\n\n        const mediaType = mime.lookup(entryName);\n        if (mediaType) {\n            // console.log(mediaType);\n\n            link.TypeLink = mediaType as string;\n        } else {\n            console.log(\"!!!!!! NO MEDIA TYPE?!\");\n        }\n\n        if (link.TypeLink && link.TypeLink.startsWith(\"image/\")) {\n            if (!publication.Spine) {\n                publication.Spine = [];\n            }\n            publication.Spine.push(link);\n\n        } else if (entryName.endsWith(\"ComicInfo.xml\")) {\n            comicInfoEntryName = entryName;\n        }\n    });\n\n    if (!publication.Metadata.Title) {\n        publication.Metadata.Title = path.basename(filePath);\n    }\n\n    if (comicInfoEntryName) {\n        try {\n            const _b = await comicRackMetadata(zip, comicInfoEntryName, publication);\n            console.log(_b);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    return publication;\n}\n\nconst filePathToTitle = (filePath: string): string => {\n    const fileName = path.basename(filePath);\n    return slugify(fileName, \"_\").replace(/[\\.]/g, \"_\");\n};\n\nconst comicRackMetadata = async (zip: IZip, entryName: string, publication: Publication): Promise<void> => {\n    let comicZipStream_: IStreamAndLength | undefined;\n    try {\n        comicZipStream_ = await zip.entryStreamPromise(entryName);\n    } catch (err) {\n        console.log(err);\n        return;\n    }\n    const comicZipStream = comicZipStream_.stream;\n    let comicZipData: Buffer | undefined;\n    try {\n        comicZipData = await streamToBufferPromise(comicZipStream);\n    } catch (err) {\n        console.log(err);\n        return;\n    }\n\n    const comicXmlStr = comicZipData.toString(\"utf8\");\n    const comicXmlDoc = new xmldom.DOMParser().parseFromString(comicXmlStr);\n\n    const comicMeta = XML.deserialize<ComicInfo>(comicXmlDoc, ComicInfo);\n    comicMeta.ZipPath = entryName;\n\n    if (!publication.Metadata) {\n        publication.Metadata = new Metadata();\n    }\n\n    if (comicMeta.Writer) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Author) {\n            publication.Metadata.Author = [];\n        }\n        publication.Metadata.Author.push(cont);\n    }\n\n    if (comicMeta.Penciller) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Penciler) {\n            publication.Metadata.Penciler = [];\n        }\n        publication.Metadata.Penciler.push(cont);\n    }\n\n    if (comicMeta.Colorist) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Colorist) {\n            publication.Metadata.Colorist = [];\n        }\n        publication.Metadata.Colorist.push(cont);\n    }\n\n    if (comicMeta.Inker) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Inker) {\n            publication.Metadata.Inker = [];\n        }\n        publication.Metadata.Inker.push(cont);\n    }\n\n    if (comicMeta.Title) {\n        publication.Metadata.Title = comicMeta.Title;\n    }\n\n    if (!publication.Metadata.Title) {\n        if (comicMeta.Series) {\n            let title = comicMeta.Series;\n            if (comicMeta.Number) {\n                title = title + \" - \" + comicMeta.Number;\n            }\n            publication.Metadata.Title = title;\n        }\n    }\n\n    if (comicMeta.Pages) {\n        // no forEach(), because of await/async within the iteration body\n        // comicMeta.Pages.forEach(async (p) => {\n        for (const p of comicMeta.Pages) {\n            const l = new Link();\n            if (p.Type === \"FrontCover\") {\n                l.AddRel(\"cover\");\n                await addCoverDimensions(publication, l);\n            }\n            l.Href = publication.Spine[p.Image].Href;\n            if (p.ImageHeight) {\n                l.Height = p.ImageHeight;\n            }\n            if (p.ImageWidth) {\n                l.Width = p.ImageWidth;\n            }\n            if (p.Bookmark) {\n                l.Title = p.Bookmark;\n            }\n            if (!publication.TOC) {\n                publication.TOC = [];\n            }\n            publication.TOC.push(l);\n        }\n    }\n};\n"]}