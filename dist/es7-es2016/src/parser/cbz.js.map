{"version":3,"file":"cbz.js","sourceRoot":"","sources":["../../../../src/parser/cbz.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\r\n\r\nimport { Metadata } from \"@models/metadata\";\r\nimport { Contributor } from \"@models/metadata-contributor\";\r\nimport { Publication } from \"@models/publication\";\r\nimport { Link } from \"@models/publication-link\";\r\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\r\nimport { XML } from \"@utils/xml-js-mapper\";\r\nimport { IStreamAndLength, IZip } from \"@utils/zip/zip\";\r\nimport { zipLoadPromise } from \"@utils/zip/zipFactory\";\r\nimport * as mime from \"mime-types\";\r\nimport * as slugify from \"slugify\";\r\nimport * as xmldom from \"xmldom\";\r\n\r\nimport { ComicInfo } from \"./comicrack/comicrack\";\r\nimport { addCoverDimensions } from \"./epub\";\r\n\r\nexport async function CbzParsePromise(filePath: string): Promise<Publication> {\r\n\r\n    let zip: any;\r\n    try {\r\n        zip = await zipLoadPromise(filePath);\r\n    } catch (err) {\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    if (!zip.hasEntries()) {\r\n        return Promise.reject(\"CBZ zip empty\");\r\n    }\r\n\r\n    const publication = new Publication();\r\n    publication.Context = [\"http://readium.org/webpub/default.jsonld\"];\r\n    publication.Metadata = new Metadata();\r\n    publication.Metadata.RDFType = \"http://schema.org/ComicIssue\";\r\n    publication.Metadata.Identifier = filePathToTitle(filePath);\r\n\r\n    publication.AddToInternal(\"type\", \"cbz\");\r\n    publication.AddToInternal(\"zip\", zip);\r\n\r\n    let comicInfoEntryName: string | undefined;\r\n    zip.forEachEntry((entryName: string) => {\r\n        // console.log(\"++ZIP: entry\");\r\n\r\n        // console.log(entryName);\r\n\r\n        const link = new Link();\r\n        link.Href = entryName;\r\n\r\n        const mediaType = mime.lookup(entryName);\r\n        if (mediaType) {\r\n            // console.log(mediaType);\r\n\r\n            link.TypeLink = mediaType as string;\r\n        } else {\r\n            console.log(\"!!!!!! NO MEDIA TYPE?!\");\r\n        }\r\n\r\n        if (link.TypeLink && link.TypeLink.startsWith(\"image/\")) {\r\n            if (!publication.Spine) {\r\n                publication.Spine = [];\r\n            }\r\n            publication.Spine.push(link);\r\n\r\n        } else if (entryName.endsWith(\"ComicInfo.xml\")) {\r\n            comicInfoEntryName = entryName;\r\n        }\r\n    });\r\n\r\n    if (!publication.Metadata.Title) {\r\n        publication.Metadata.Title = path.basename(filePath);\r\n    }\r\n\r\n    if (comicInfoEntryName) {\r\n        try {\r\n            const _b = await comicRackMetadata(zip, comicInfoEntryName, publication);\r\n            console.log(_b);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return publication;\r\n}\r\n\r\nconst filePathToTitle = (filePath: string): string => {\r\n    const fileName = path.basename(filePath);\r\n    return slugify(fileName, \"_\").replace(/[\\.]/g, \"_\");\r\n};\r\n\r\nconst comicRackMetadata = async (zip: IZip, entryName: string, publication: Publication) => {\r\n    let comicZipStream_: IStreamAndLength;\r\n    try {\r\n        comicZipStream_ = await zip.entryStreamPromise(entryName);\r\n    } catch (err) {\r\n        console.log(err);\r\n        return;\r\n    }\r\n    const comicZipStream = comicZipStream_.stream;\r\n    let comicZipData: Buffer;\r\n    try {\r\n        comicZipData = await streamToBufferPromise(comicZipStream);\r\n    } catch (err) {\r\n        console.log(err);\r\n        return;\r\n    }\r\n\r\n    const comicXmlStr = comicZipData.toString(\"utf8\");\r\n    const comicXmlDoc = new xmldom.DOMParser().parseFromString(comicXmlStr);\r\n\r\n    const comicMeta = XML.deserialize<ComicInfo>(comicXmlDoc, ComicInfo);\r\n    comicMeta.ZipPath = entryName;\r\n\r\n    if (!publication.Metadata) {\r\n        publication.Metadata = new Metadata();\r\n    }\r\n\r\n    if (comicMeta.Writer) {\r\n        const cont = new Contributor();\r\n        cont.Name = comicMeta.Writer;\r\n\r\n        if (!publication.Metadata.Author) {\r\n            publication.Metadata.Author = [];\r\n        }\r\n        publication.Metadata.Author.push(cont);\r\n    }\r\n\r\n    if (comicMeta.Penciller) {\r\n        const cont = new Contributor();\r\n        cont.Name = comicMeta.Writer;\r\n\r\n        if (!publication.Metadata.Penciler) {\r\n            publication.Metadata.Penciler = [];\r\n        }\r\n        publication.Metadata.Penciler.push(cont);\r\n    }\r\n\r\n    if (comicMeta.Colorist) {\r\n        const cont = new Contributor();\r\n        cont.Name = comicMeta.Writer;\r\n\r\n        if (!publication.Metadata.Colorist) {\r\n            publication.Metadata.Colorist = [];\r\n        }\r\n        publication.Metadata.Colorist.push(cont);\r\n    }\r\n\r\n    if (comicMeta.Inker) {\r\n        const cont = new Contributor();\r\n        cont.Name = comicMeta.Writer;\r\n\r\n        if (!publication.Metadata.Inker) {\r\n            publication.Metadata.Inker = [];\r\n        }\r\n        publication.Metadata.Inker.push(cont);\r\n    }\r\n\r\n    if (comicMeta.Title) {\r\n        publication.Metadata.Title = comicMeta.Title;\r\n    }\r\n\r\n    if (!publication.Metadata.Title) {\r\n        if (comicMeta.Series) {\r\n            let title = comicMeta.Series;\r\n            if (comicMeta.Number) {\r\n                title = title + \" - \" + comicMeta.Number;\r\n            }\r\n            publication.Metadata.Title = title;\r\n        }\r\n    }\r\n\r\n    if (comicMeta.Pages) {\r\n        // no forEach(), because of await/async within the iteration body\r\n        // comicMeta.Pages.forEach(async (p) => {\r\n        for (const p of comicMeta.Pages) {\r\n            const l = new Link();\r\n            if (p.Type === \"FrontCover\") {\r\n                l.AddRel(\"cover\");\r\n                await addCoverDimensions(publication, l);\r\n            }\r\n            l.Href = publication.Spine[p.Image].Href;\r\n            if (p.ImageHeight) {\r\n                l.Height = p.ImageHeight;\r\n            }\r\n            if (p.ImageWidth) {\r\n                l.Width = p.ImageWidth;\r\n            }\r\n            if (p.Bookmark) {\r\n                l.Title = p.Bookmark;\r\n            }\r\n            if (!publication.TOC) {\r\n                publication.TOC = [];\r\n            }\r\n            publication.TOC.push(l);\r\n        }\r\n    }\r\n};\r\n"]}