{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../src/electron/main.ts"],"names":[],"mappings":"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","sourcesContent":["// https://github.com/electron/electron/blob/master/docs/api/sandbox-option.md\n// https://github.com/electron/electron/blob/master/docs/api/process.md\n// https://github.com/electron/electron/blob/master/docs/api/browser-window.md\n// https://github.com/electron/electron/blob/master/docs/api/protocol.md\n// https://github.com/electron/electron/blob/master/docs/api/web-frame.md\n// https://github.com/electron/electron/blob/master/docs/api/web-contents.md\n// https://github.com/electron/electron/blob/master/docs/api/web-request.md\n// https://github.com/electron/electron/blob/master/docs/api/session.md\n// https://github.com/electron/electron/blob/master/docs/api/webview-tag.md\n// https://github.com/electron/electron/blob/master/docs/api/browser-view.md\n// https://github.com/electron/electron/blob/master/docs/api/client-request.md\n// https://github.com/electron/electron/blob/master/docs/api/sandbox-option.md\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { encodeURIComponent_RFC3986 } from \"@utils/http/UrlUtils\";\nimport * as debug_ from \"debug\";\nimport { BrowserWindow, Menu, app, session } from \"electron\";\nimport * as filehound from \"filehound\";\nimport * as portfinder from \"portfinder\";\n\nimport { Server } from \"../http/server\";\nimport { initGlobals } from \"../init-globals\";\n\n// import * as mime from \"mime-types\";\n\ninitGlobals();\n\nconst debug = debug_(\"r2:electron:main\");\n\nlet _publicationsServer: Server;\nlet _publicationsServerPort: number;\nlet _publicationsRootUrl: string;\nlet _publicationsFilePaths: string[];\nlet _publicationsUrls: string[];\n\nlet _electronBrowserWindows: Electron.BrowserWindow[];\n\n// protocol.registerStandardSchemes([\"epub\", \"file\"], { secure: true });\n\nfunction createElectronBrowserWindow(publicationFilePath: string, publicationUrl: string) {\n\n    debug(\"createElectronBrowserWindow() \" + publicationFilePath + \" : \" + publicationUrl);\n\n    const electronBrowserWindow = new BrowserWindow({\n        height: 600,\n        webPreferences: {\n            allowRunningInsecureContent: false,\n            contextIsolation: false,\n            devTools: true,\n            nodeIntegration: true,\n            nodeIntegrationInWorker: false,\n            sandbox: false,\n            webSecurity: true,\n            // preload: __dirname + \"/\" + \"preload.js\",\n        },\n        width: 800,\n    });\n    if (!_electronBrowserWindows) {\n        _electronBrowserWindows = [];\n    }\n    _electronBrowserWindows.push(electronBrowserWindow);\n\n    electronBrowserWindow.webContents.on(\"dom-ready\", () => {\n        debug(\"electronBrowserWindow dom-ready \" + publicationFilePath + \" : \" + publicationUrl);\n        electronBrowserWindow.webContents.openDevTools();\n    });\n\n    electronBrowserWindow.on(\"closed\", () => {\n        debug(\"electronBrowserWindow closed \" + publicationFilePath + \" : \" + publicationUrl);\n        const i = _electronBrowserWindows.indexOf(electronBrowserWindow);\n        if (i < 0) {\n            console.log(\"electronBrowserWindow NOT FOUND?!\");\n            return;\n        }\n        _electronBrowserWindows.splice(i, 1);\n    });\n\n    const urlEncoded = encodeURIComponent_RFC3986(publicationUrl);\n    const fullUrl = `file://${__dirname}/renderer/index.html?pub=${urlEncoded}`;\n    // `file://${process.cwd()}/src/electron/renderer/index.html`;\n    // `file://${__dirname}/../../../../src/electron/renderer/index.html`\n    debug(fullUrl);\n    electronBrowserWindow.webContents.loadURL(fullUrl);\n}\n\napp.on(\"window-all-closed\", () => {\n    debug(\"app window-all-closed\");\n    if (process.platform !== \"darwin\") {\n        app.quit();\n    }\n});\n\napp.on(\"ready\", () => {\n    debug(\"app ready\");\n\n    // protocol.registerServiceWorkerSchemes([\"epub\"]);\n\n    // registerFileProtocol\n    // protocol.registerBufferProtocol(\"epub\",\n    //     (request, callback) => {\n    //         debug(request.url);\n    //         const data = fs.readFileSync(request.url);\n    //         const mimeType = mime.lookup(request.url);\n    //         callback({ data, mimeType });\n    //     }, (error) => {\n    //         debug(error);\n    //     });\n\n    if (session.defaultSession) {\n\n        // const proto = session.defaultSession.protocol;\n\n        session.defaultSession.clearStorageData({\n            origin: \"*\",\n            quotas: [\n                \"temporary\",\n                \"persistent\",\n                \"syncable\"],\n            storages: [\n                \"appcache\",\n                \"cookies\",\n                \"filesystem\",\n                \"indexdb\",\n                \"localstorage\",\n                \"shadercache\",\n                \"websql\",\n                \"serviceworkers\"],\n        });\n    }\n\n    // tslint:disable-next-line:no-floating-promises\n    (async () => {\n        const dirPath = fs.realpathSync(path.resolve(\"./misc/epubs/\"));\n        _publicationsFilePaths = await filehound.create()\n            .paths(dirPath)\n            .ext([\".epub\", \".epub3\", \".cbz\"])\n            .find();\n        debug(_publicationsFilePaths);\n\n        _publicationsServer = new Server();\n        const pubPaths = _publicationsServer.addPublications(_publicationsFilePaths);\n\n        _publicationsServerPort = await portfinder.getPortPromise();\n        _publicationsRootUrl = _publicationsServer.start(_publicationsServerPort);\n\n        _publicationsUrls = pubPaths.map((pubPath) => {\n            return `${_publicationsRootUrl}${pubPath}`;\n        });\n        debug(_publicationsUrls);\n\n        const menuTemplate = [\n            {\n                label: \"Electron R2\",\n                submenu: [\n                    {\n                        accelerator: \"Command+Q\",\n                        click: () => { app.quit(); },\n                        label: \"Quit\",\n                    },\n                ],\n            },\n        ];\n\n        _publicationsUrls.forEach((pubManifestUrl, n) => {\n            const file = _publicationsFilePaths[n];\n            console.log(\"MENU ITEM: \" + file + \" : \" + pubManifestUrl);\n\n            menuTemplate[0].submenu.push({\n                click: () => {\n                    createElectronBrowserWindow(file, pubManifestUrl);\n                },\n                label: file, // + \" : \" + pubManifestUrl,\n            } as any);\n        });\n        const menu = Menu.buildFromTemplate(menuTemplate);\n        Menu.setApplicationMenu(menu);\n\n    })();\n});\n\napp.on(\"activate\", () => {\n    debug(\"app activate\");\n});\n\napp.on(\"quit\", () => {\n    debug(\"app quit\");\n\n    _publicationsServer.stop();\n});\n"]}