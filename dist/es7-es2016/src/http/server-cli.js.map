{"version":3,"file":"server-cli.js","sourceRoot":"","sources":["../../../../src/http/server-cli.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\nimport * as path from \"path\";\r\n\r\nimport * as debug_ from \"debug\";\r\nimport * as filehound from \"filehound\";\r\n\r\nimport { setLcpNativePluginPath } from \"@parser/epub/lcp\";\r\nimport { initGlobals } from \"../init-globals\";\r\nimport { Server } from \"./server\";\r\n\r\ninitGlobals();\r\nsetLcpNativePluginPath(path.join(process.cwd(), \"LCP\", \"lcp.node\"));\r\n\r\nconst debug = debug_(\"r2:server:cli\");\r\n\r\ndebug(`process.cwd(): ${process.cwd()}`);\r\ndebug(`__dirname: ${__dirname}`);\r\n\r\nconst args = process.argv.slice(2);\r\ndebug(\"process.argv.slice(2): %o\", args);\r\n\r\nif (!args[0]) {\r\n    debug(\"FILEPATH ARGUMENT IS MISSING.\");\r\n    process.exit(1);\r\n}\r\n\r\nconst argPath = args[0].trim();\r\nlet filePath = argPath;\r\ndebug(`path: ${filePath}`);\r\n\r\nif (!fs.existsSync(filePath)) {\r\n    filePath = path.join(__dirname, argPath);\r\n    debug(`path: ${filePath}`);\r\n\r\n    if (!fs.existsSync(filePath)) {\r\n        filePath = path.join(process.cwd(), argPath);\r\n        debug(`path: ${filePath}`);\r\n\r\n        if (!fs.existsSync(filePath)) {\r\n            debug(\"FILEPATH DOES NOT EXIST.\");\r\n            process.exit(1);\r\n        }\r\n    }\r\n}\r\n\r\nfilePath = fs.realpathSync(filePath);\r\ndebug(`path (normalized): ${filePath}`);\r\n\r\nconst stats = fs.lstatSync(filePath);\r\n\r\nif (!stats.isFile() && !stats.isDirectory()) {\r\n    debug(\"FILEPATH MUST BE FILE OR DIRECTORY.\");\r\n    process.exit(1);\r\n}\r\n\r\nif (stats.isDirectory()) {\r\n    debug(\"Analysing directory...\");\r\n\r\n    // tslint:disable-next-line:no-floating-promises\r\n    (async () => {\r\n        const files: string[] = await filehound.create()\r\n            .discard(\"node_modules\")\r\n            .depth(5)\r\n            .paths(filePath)\r\n            .ext([\".epub\", \".epub3\", \".cbz\"])\r\n            .find();\r\n        const server = new Server();\r\n        server.addPublications(files);\r\n        server.start(0);\r\n    })();\r\n\r\n    // filePaths = fs.readdirSync(filePath);\r\n\r\n    // filePaths = filePaths.filter((filep) => {\r\n    //     const fileName = path.basename(filep);\r\n    //     const ext = path.extname(fileName).toLowerCase();\r\n    //     return (/\\.epub[3]?$/.test(ext) || ext === \".cbz\") &&\r\n    //         fs.lstatSync(path.join(filePath, filep)).isFile();\r\n    // });\r\n\r\n    // filePaths = filePaths.map((filep) => {\r\n    //     return path.join(filePath, filep);\r\n    // });\r\n\r\n    // debug(\"Publications:\");\r\n    // filePaths.forEach((filep) => {\r\n    //     debug(filep);\r\n    // });\r\n} else {\r\n    const server = new Server();\r\n    server.addPublications([filePath]);\r\n    server.start(0);\r\n}\r\n"]}