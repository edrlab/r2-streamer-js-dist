{"version":3,"file":"url-signed-expiry.js","sourceRoot":"","sources":["../../../../src/http/url-signed-expiry.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as crypto from \"crypto\";\n\nimport { traverseJsonObjects } from \"@r2-utils-js/_utils/JsonUtils\";\n\nconst debug = debug_(\"r2:streamer#http/url-signed-expiry\");\n\nconst DEFAULT_EXPIRE_SECONDS = 86400; // 24h\n\nexport const URL_SIGNED_EXPIRY_QUERY_PARAM_NAME = \"r2tkn\";\n\n// lazy / just-in-time evaluation, no caching!\n// (can be changed at runtime to invalidate existing URL expiry signatures)\nconst computeHashSecret = () => {\n    if (!process.env.R2_STREAMER_URL_EXPIRE_SECRET) {\n        return undefined;\n    }\n    const checkSumSecret = crypto.createHash(\"sha256\");\n    checkSumSecret.update(process.env.R2_STREAMER_URL_EXPIRE_SECRET);\n    const hashSecret = checkSumSecret.digest(\"hex\");\n    // debug(`ENV secret: ${process.env.R2_STREAMER_URL_EXPIRE_SECRET} => ${hashSecret}`);\n    return hashSecret;\n};\n\n// Environment variables:\n//\n// R2_STREAMER_URL_EXPIRE_SECRET\n// => arbitrary string of characters,\n//    no length constraints\n//    (will be checksum'ed using fixed-length SHA256 digest)\n//    if absent, the function does nothing,\n//    otherwise the resource URLs of the given publication will be altered to include a new query param for the signed expiry\n//\n// R2_STREAMER_URL_EXPIRE_SECONDS\n// => string that parses to integer,\n//    number of seconds\n//    (default is 86400 === 24h)\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const signExpiringResourceURLs = (rootUrl: string, pathBase64Str: string, jsonObj: any) => {\n\n    // debug(`pathBase64Str: ${pathBase64Str}`);\n    // reqparams.pathBase64 is already decoded!\n    // const decoded = decodeURIComponent(reqparams.pathBase64);\n    // const pathBase64Str = Buffer.from(reqparams.pathBase64, \"base64\").toString(\"utf8\");\n\n    const hashSecret = computeHashSecret();\n    if (!hashSecret) {\n        return;\n    }\n\n    // milliseconds since epoch (midnight, 1 Jan 1970)\n    const timestamp = Date.now(); // +new Date()\n    // Number.MAX_SAFE_INTEGER\n    // 2^53 - 1 === Math.pow(2, 53) - 1\n    // 9007199254740991 === 9,007,199,254,740,991 (~9 quadrillion)\n    // => 285,420.92 years :)\n    // const nowToB36 = timestamp.toString(36);\n    // const nowFromB36 = parseInt(nowToB36, 36);\n    // debug(`Date.Now base36: ${timestamp} => ${nowToB36} => ${nowFromB36}`);\n\n    let expiry = DEFAULT_EXPIRE_SECONDS;\n    if (process.env.R2_STREAMER_URL_EXPIRE_SECONDS) {\n        try {\n            expiry = parseInt(process.env.R2_STREAMER_URL_EXPIRE_SECONDS, 10);\n        } catch (err) {\n            debug(err);\n        }\n    }\n    // debug(`URL expiry: ${expiry}`);\n\n    traverseJsonObjects(jsonObj,\n        (obj) => {\n            if (obj.href && typeof obj.href === \"string\"\n                && !/^https?:\\/\\//.test(obj.href) && !/^data:\\/\\//.test(obj.href)) {\n\n                // EXAMPLES:\n                // obj.href === \"./EPUB/path/to/audio.mp3#t=123\" (TOC)\n                // obj.href === \"EPUB/path/to/chapter.html\" (spine/reading-order, or resources collection)\n\n                const publicationRootUrl = new URL(`${rootUrl}/`); // manifest.json\n                // debug(`------------ publicationRootUrl: ${publicationRootUrl.toString()}`);\n                const url = new URL(obj.href, publicationRootUrl);\n                const resourcePath = url.pathname.replace(publicationRootUrl.pathname, \"\");\n                // debug(`------------ Link HREF (absolute URL): ${obj.href} => ${url.toString()} (${resourcePath})`);\n\n                const checkSumData = crypto.createHash(\"sha256\");\n                checkSumData.update(`${timestamp}_${hashSecret}_${resourcePath}_${expiry}_${pathBase64Str}`);\n                const hashData = checkSumData.digest(\"hex\");\n\n                const queryParamJson = {\n                    hash: hashData,\n                    timestamp, // milliseconds\n                    expiry, // seconds\n                };\n\n                const queryParamValue = Buffer.from(JSON.stringify(queryParamJson)).toString(\"base64\");\n\n                // implicit encodeURIComponent_RFC3986()\n                url.searchParams.append(URL_SIGNED_EXPIRY_QUERY_PARAM_NAME, queryParamValue);\n                // debug(`======= Link HREF (BEFORE): ${obj.href}`);\n                obj.href = url.toString().replace(publicationRootUrl.toString(), \"\"); // make relative again\n                // debug(`======= Link HREF (AFTER): ${obj.href}`);\n            }\n        });\n};\n\nexport const verifyExpiringResourceURL = (queryParamValue: string | undefined, pathBase64Str: string, pathInZip: string): boolean => {\n\n    const hashSecret = computeHashSecret();\n    if (!hashSecret) {\n        return true;\n    }\n\n    if (!queryParamValue) {\n        return false;\n    }\n    try {\n        // queryParamValue is already decodeURIComponent() (reverse of encodeURIComponent_RFC3986())\n        const queryParamStr = Buffer.from(queryParamValue, \"base64\").toString(\"utf8\");\n        const json = JSON.parse(queryParamStr);\n\n        if (!json.hash || !json.timestamp || !json.expiry) {\n            return false;\n        }\n\n        const resourcePath = pathInZip;\n        const checkSumData = crypto.createHash(\"sha256\");\n        checkSumData.update(`${json.timestamp}_${hashSecret}_${resourcePath}_${json.expiry}_${pathBase64Str}`);\n        const hashData = checkSumData.digest(\"hex\");\n        if (hashData !== json.hash) {\n            debug(`HASH diff! ${hashData} !== ${json.hash} (${resourcePath})`);\n            return false;\n        }\n\n        const timestamp = Date.now(); // +new Date()\n        const timeDiff = timestamp - json.timestamp;\n        if (timeDiff > (json.expiry * 1000)) {\n            debug(`Resource EXPIRED! ${timeDiff} > ${json.expiry} (${resourcePath})`);\n            return false;\n        }\n\n        return true;\n\n    } catch (e) {\n        debug(e);\n    }\n    return false;\n};\n"]}