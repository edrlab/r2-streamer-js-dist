{"version":3,"file":"transformer-obf-adobe.js","sourceRoot":"","sources":["../../../../src/transform/transformer-obf-adobe.ts"],"names":[],"mappings":";;AAEA,2DAAkF;AAKlF;IACW,QAAQ,CAAC,YAAyB,EAAE,IAAU;QACjD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,KAAK,gCAAgC,CAAC;IACpF,CAAC;IAEM,KAAK,CAAC,eAAe,CACxB,WAAwB,EAAE,IAAU,EACpC,MAAwB,EACxB,0BAAmC,EACnC,iBAAyB,EAAE,eAAuB;QAElD,IAAI,IAAY,CAAC;QACjB,IAAI,CAAC;YACD,IAAI,GAAG,MAAM,mCAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtD,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QAED,IAAI,IAAY,CAAC;QACjB,IAAI,CAAC;YACD,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/D,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QAED,MAAM,GAAG,GAAqB;YAC1B,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,KAAK,EAAE,KAAK,IAAI,EAAE;gBACd,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAChC,CAAC;YACD,MAAM,EAAE,4BAAc,CAAC,IAAI,CAAC;SAC/B,CAAC;QACF,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,WAAwB,EAAE,KAAW,EAAE,IAAY;QAE7E,IAAI,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC5C,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACvC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAChC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAEjC,MAAM,GAAG,GAAG,EAAE,CAAC;QACf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1B,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACxC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACxB,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAElD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC;YAEpC,aAAa,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAClD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;CAyBJ;AApFD,kDAoFC","sourcesContent":["import { Publication } from \"@models/publication\";\r\nimport { Link } from \"@models/publication-link\";\r\nimport { bufferToStream, streamToBufferPromise } from \"@utils/stream/BufferUtils\";\r\nimport { IStreamAndLength } from \"@utils/zip/zip\";\r\n\r\nimport { ITransformer } from \"./transformer\";\r\n\r\nexport class TransformerObfAdobe implements ITransformer {\r\n    public supports(_publication: Publication, link: Link): boolean {\r\n        return link.Properties.Encrypted.Algorithm === \"http://ns.adobe.com/pdf/enc#RC\";\r\n    }\r\n\r\n    public async transformStream(\r\n        publication: Publication, link: Link,\r\n        stream: IStreamAndLength,\r\n        _isPartialByteRangeRequest: boolean,\r\n        _partialByteBegin: number, _partialByteEnd: number): Promise<IStreamAndLength> {\r\n\r\n        let data: Buffer;\r\n        try {\r\n            data = await streamToBufferPromise(stream.stream);\r\n        } catch (err) {\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        let buff: Buffer;\r\n        try {\r\n            buff = await this.transformBuffer(publication, link, data);\r\n        } catch (err) {\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const sal: IStreamAndLength = {\r\n            length: buff.length,\r\n            reset: async () => {\r\n                return Promise.resolve(sal);\r\n            },\r\n            stream: bufferToStream(buff),\r\n        };\r\n        return Promise.resolve(sal);\r\n    }\r\n\r\n    private async transformBuffer(publication: Publication, _link: Link, data: Buffer): Promise<Buffer> {\r\n\r\n        let pubID = publication.Metadata.Identifier;\r\n        pubID = pubID.replace(\"urn:uuid:\", \"\");\r\n        pubID = pubID.replace(/-/g, \"\");\r\n        pubID = pubID.replace(/\\s/g, \"\");\r\n\r\n        const key = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            const byteHex = pubID.substr(i * 2, 2);\r\n            const byteNumer = parseInt(byteHex, 16);\r\n            key.push(byteNumer);\r\n        }\r\n\r\n        const prefixLength = 1024;\r\n        const zipDataPrefix = data.slice(0, prefixLength);\r\n\r\n        for (let i = 0; i < prefixLength; i++) {\r\n            /* tslint:disable:no-bitwise */\r\n            zipDataPrefix[i] = zipDataPrefix[i] ^ (key[i % key.length]);\r\n        }\r\n\r\n        const zipDataRemainder = data.slice(prefixLength);\r\n        return Promise.resolve(Buffer.concat([zipDataPrefix, zipDataRemainder]));\r\n    }\r\n\r\n    // public async getDecryptedSizeStream(\r\n    //     publication: Publication, link: Link,\r\n    //     stream: IStreamAndLength): Promise<number> {\r\n    //     let sal: IStreamAndLength;\r\n    //     try {\r\n    //         sal = await this.transformStream(publication, link, stream, false, 0, 0);\r\n    //     } catch (err) {\r\n    //         console.log(err);\r\n    //         return Promise.reject(\"WTF?\");\r\n    //     }\r\n    //     return Promise.resolve(sal.length);\r\n    // }\r\n\r\n    // public async getDecryptedSizeBuffer(publication: Publication, link: Link, data: Buffer): Promise<number> {\r\n    //     let buff: Buffer;\r\n    //     try {\r\n    //         buff = await this.transformBuffer(publication, link, data);\r\n    //     } catch (err) {\r\n    //         console.log(err);\r\n    //         return Promise.reject(\"WTF?\");\r\n    //     }\r\n    //     return Promise.resolve(buff.length);\r\n    // }\r\n}\r\n"]}