{"version":3,"file":"transformer-obf-adobe.js","sourceRoot":"","sources":["../../../../src/transform/transformer-obf-adobe.ts"],"names":[],"mappings":";;AAEA,2DAAkF;AAKlF;IACW,QAAQ,CAAC,YAAyB,EAAE,IAAU;QACjD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,KAAK,gCAAgC,CAAC;IACpF,CAAC;IAEM,KAAK,CAAC,eAAe,CACxB,WAAwB,EAAE,IAAU,EACpC,MAAwB,EACxB,0BAAmC,EACnC,iBAAyB,EAAE,eAAuB;QAElD,MAAM,IAAI,GAAG,MAAM,mCAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACxD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAEjE,MAAM,GAAG,GAAqB;YAC1B,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,KAAK,EAAE,KAAK,IAAI,EAAE;gBACd,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAChC,CAAC;YACD,MAAM,EAAE,4BAAc,CAAC,IAAI,CAAC;SAC/B,CAAC;QACF,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,WAAwB,EAAE,KAAW,EAAE,IAAY;QAE7E,IAAI,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC5C,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACvC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAChC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAEjC,MAAM,GAAG,GAAG,EAAE,CAAC;QACf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1B,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACxC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACxB,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAElD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC;YAEpC,aAAa,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAClD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;CAyBJ;AAzED,kDAyEC","sourcesContent":["import { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { bufferToStream, streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport { IStreamAndLength } from \"@utils/zip/zip\";\n\nimport { ITransformer } from \"./transformer\";\n\nexport class TransformerObfAdobe implements ITransformer {\n    public supports(_publication: Publication, link: Link): boolean {\n        return link.Properties.Encrypted.Algorithm === \"http://ns.adobe.com/pdf/enc#RC\";\n    }\n\n    public async transformStream(\n        publication: Publication, link: Link,\n        stream: IStreamAndLength,\n        _isPartialByteRangeRequest: boolean,\n        _partialByteBegin: number, _partialByteEnd: number): Promise<IStreamAndLength> {\n\n        const data = await streamToBufferPromise(stream.stream);\n        const buff = await this.transformBuffer(publication, link, data);\n\n        const sal: IStreamAndLength = {\n            length: buff.length,\n            reset: async () => {\n                return Promise.resolve(sal);\n            },\n            stream: bufferToStream(buff),\n        };\n        return Promise.resolve(sal);\n    }\n\n    private async transformBuffer(publication: Publication, _link: Link, data: Buffer): Promise<Buffer> {\n\n        let pubID = publication.Metadata.Identifier;\n        pubID = pubID.replace(\"urn:uuid:\", \"\");\n        pubID = pubID.replace(/-/g, \"\");\n        pubID = pubID.replace(/\\s/g, \"\");\n\n        const key = [];\n        for (let i = 0; i < 16; i++) {\n            const byteHex = pubID.substr(i * 2, 2);\n            const byteNumer = parseInt(byteHex, 16);\n            key.push(byteNumer);\n        }\n\n        const prefixLength = 1024;\n        const zipDataPrefix = data.slice(0, prefixLength);\n\n        for (let i = 0; i < prefixLength; i++) {\n            /* tslint:disable:no-bitwise */\n            zipDataPrefix[i] = zipDataPrefix[i] ^ (key[i % key.length]);\n        }\n\n        const zipDataRemainder = data.slice(prefixLength);\n        return Promise.resolve(Buffer.concat([zipDataPrefix, zipDataRemainder]));\n    }\n\n    // public async getDecryptedSizeStream(\n    //     publication: Publication, link: Link,\n    //     stream: IStreamAndLength): Promise<number> {\n    //     let sal: IStreamAndLength | undefined;\n    //     try {\n    //         sal = await this.transformStream(publication, link, stream, false, 0, 0);\n    //     } catch (err) {\n    //         console.log(err);\n    //         return Promise.reject(\"WTF?\");\n    //     }\n    //     return Promise.resolve(sal.length);\n    // }\n\n    // public async getDecryptedSizeBuffer(publication: Publication, link: Link, data: Buffer): Promise<number> {\n    //     let buff: Buffer | undefined;\n    //     try {\n    //         buff = await this.transformBuffer(publication, link, data);\n    //     } catch (err) {\n    //         console.log(err);\n    //         return Promise.reject(\"WTF?\");\n    //     }\n    //     return Promise.resolve(buff.length);\n    // }\n}\n"]}