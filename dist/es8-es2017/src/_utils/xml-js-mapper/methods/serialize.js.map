{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/methods/serialize.ts"],"names":[],"mappings":"","sourcesContent":["// import { propertyConverters } from \"./../converters/converter\";\r\n\r\n// import { PropertyDefinition } from \"../classes/property-definition\";\r\n\r\n// import { FunctionType, IDynamicObject, XmlValue } from \"../types\";\r\n\r\n// import { getInheritanceChain, getTypedInheritanceChain, objectDefinitions, ObjectDefinition }\r\n// from \"../classes/object-definition\";\r\n\r\n// export function serialize(value: IDynamicObject | IDynamicObject[], objectType?: FunctionType): XmlValue {\r\n//     if (value.constructor === Array) {\r\n//         return (value as IDynamicObject[]).map((o) => serializeRootObject(o, objectType));\r\n//     }\r\n\r\n//     return serializeRootObject(value as IDynamicObject, objectType);\r\n// }\r\n\r\n// function serializeRootObject(\r\n//     objectInstance: IDynamicObject,\r\n//     objectType: FunctionType = Object.getPrototypeOf(objectInstance).constructor): XmlValue {\r\n//     const inheritanceChain = getTypedInheritanceChain(objectType);\r\n\r\n//     if (inheritanceChain.length === 0) {\r\n//         return objectInstance;\r\n//     }\r\n\r\n//     const definitions = inheritanceChain.map((t) => objectDefinitions.get(t))\r\n// .filter((t) => !!t) as ObjectDefinition[];\r\n\r\n//     const output: IDynamicObject = {};\r\n\r\n//     definitions.forEach((d) => {\r\n//         if (!d) {\r\n//             return;\r\n//         }\r\n\r\n//         d.properties.forEach((p, key) => {\r\n//             if (!p.objectType) {\r\n//                 throw new Error(`Cannot serialize property \"${key}\" without type!`);\r\n//             }\r\n\r\n//             const value = objectInstance[key];\r\n\r\n//             if ((value === null || value === undefined) || p.writeonly) {\r\n//                 return;\r\n//             }\r\n\r\n//             if (p.set) {\r\n//                 output[p.xpathSelector] = serializeArray(Array.from(value || []), p);\r\n//                 return;\r\n//             }\r\n\r\n//             if (p.array) {\r\n//                 output[p.xpathSelector] = serializeArray(value, p);\r\n//                 return;\r\n//             }\r\n\r\n//             output[p.xpathSelector] = serializeObject(value, p);\r\n//         });\r\n//     });\r\n\r\n//     return output;\r\n// }\r\n\r\n// function serializeArray(array: IDynamicObject[], definition: PropertyDefinition): XmlValue[] {\r\n//     return array.map((v) => serializeObject(v, definition));\r\n// }\r\n\r\n// function serializeObject(objectInstance: IDynamicObject, definition: PropertyDefinition): XmlValue {\r\n//     const primitive = definition.objectType === String\r\n//         || definition.objectType === Boolean\r\n//         || definition.objectType === Number;\r\n//     const value: any = objectInstance;\r\n\r\n//     const converter = definition.converter || propertyConverters.get(definition.objectType);\r\n//     if (converter) {\r\n//         return converter.serialize(value);\r\n//     }\r\n\r\n//     if (!primitive) {\r\n//         const objDefinition = objectDefinitions.get(definition.objectType);\r\n\r\n//         if (objDefinition) {\r\n//             if (value instanceof definition.objectType) {\r\n//                 return serialize(value);\r\n//             }\r\n//             return serialize(value, definition.objectType);\r\n//         }\r\n//     }\r\n\r\n//     return value;\r\n// }\r\n"]}