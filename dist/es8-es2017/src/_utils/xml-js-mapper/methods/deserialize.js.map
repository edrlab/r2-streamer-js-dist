{"version":3,"file":"deserialize.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/methods/deserialize.ts"],"names":[],"mappings":"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","sourcesContent":["import * as xpath from \"xpath\";\r\n\r\nimport { ObjectDefinition, getTypedInheritanceChain, objectDefinitions } from \"../classes/object-definition\";\r\nimport { PropertyDefinition } from \"../classes/property-definition\";\r\nimport { propertyConverters } from \"../converters/converter\";\r\nimport { IDynamicObject, IParseOptions } from \"../types\";\r\nimport { FunctionType, IXPathSelectorItem } from \"../types\";\r\n\r\nexport function deserialize(\r\n    objectInstance: Node,\r\n    objectType: FunctionType | undefined,\r\n    options: IParseOptions = { runConstructor: false }): any {\r\n\r\n    // if (objectInstance && objectInstance.constructor === Array) {\r\n    //     return (objectInstance as IXmlValueArray).map((o) => deserializeRootObject(o, objectType, options));\r\n    // }\r\n\r\n    return deserializeRootObject(objectInstance, objectType, options);\r\n}\r\n\r\nfunction deserializeRootObject(\r\n    objectInstance: Node,\r\n    objectType: FunctionType = Object,\r\n    options: IParseOptions): any {\r\n\r\n    // // tslint:disable-next-line:no-string-literal\r\n    // const debug = process.env[\"OPF_PARSE\"] === \"true\";\r\n\r\n    if (!objectDefinitions.has(objectType)) {\r\n        return undefined;\r\n    }\r\n\r\n    const [objectType2, ...superTypes] = getTypedInheritanceChain(objectType, objectInstance);\r\n\r\n    const output = Object.create(objectType2.prototype);\r\n\r\n    const definitions = [...superTypes.reverse(), objectType2]\r\n        .map((t) => objectDefinitions.get(t))\r\n        .filter((t) => !!t) as ObjectDefinition[];\r\n\r\n    definitions.forEach((d) => {\r\n        if (!d) {\r\n            return;\r\n        }\r\n\r\n        if (options.runConstructor) {\r\n            d.ctr.call(output);\r\n        }\r\n\r\n        d.beforeDeserialized.call(output);\r\n\r\n        // if (debug) {\r\n        //     console.log(\"======== PROPS: \" + objectInstance.localName);\r\n        // }\r\n\r\n        d.properties.forEach((p, key) => {\r\n            if (!p.objectType) {\r\n                throw new Error(`Cannot deserialize property \"${key}\" without type!`);\r\n            }\r\n\r\n            if (p.readonly) {\r\n                return;\r\n            }\r\n\r\n            // const namespaces: IXmlNamespaces = {};\r\n            // if (d.namespaces) {\r\n            //     for (const prop in d.namespaces) {\r\n            //         if (d.namespaces.hasOwnProperty(prop)) {\r\n            //             namespaces[prop] = d.namespaces[prop];\r\n            //         }\r\n            //     }\r\n            // }\r\n            // if (p.namespaces) {\r\n            //     for (const prop in p.namespaces) {\r\n            //         if (p.namespaces.hasOwnProperty(prop)) {\r\n            //             namespaces[prop] = p.namespaces[prop];\r\n            //         }\r\n            //     }\r\n            // }\r\n\r\n            // if (debug) {\r\n            //     console.log(`${p.xpathSelector}`);\r\n            // }\r\n\r\n            if (p.xpathSelectorParsed) {\r\n\r\n                const xpathMatched: Node[] = [];\r\n\r\n                let currentNodes = [objectInstance];\r\n\r\n                p.xpathSelectorParsed.forEach((item: IXPathSelectorItem, index: number) => {\r\n                    const nextCurrentNodes: Node[] = [];\r\n\r\n                    currentNodes.forEach((currentNode) => {\r\n\r\n                        if (item.isText) {\r\n                            let textNode = currentNode.firstChild;\r\n                            if (currentNode.childNodes && currentNode.childNodes.length) {\r\n                                for (let i = 0; i < currentNode.childNodes.length; i++) {\r\n                                    const childNode = currentNode.childNodes.item(i);\r\n                                    if (childNode.nodeType === 3) { // TEXT_NODE\r\n                                        textNode = childNode;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (textNode) {\r\n                                xpathMatched.push(textNode);\r\n                            }\r\n                        } else if (item.isAttribute) {\r\n                            if (currentNode.attributes) {\r\n\r\n                                const attr = item.namespaceUri ?\r\n                                    currentNode.attributes.getNamedItemNS(item.namespaceUri, item.localName) :\r\n                                    currentNode.attributes.getNamedItem(item.localName);\r\n\r\n                                if (attr) {\r\n                                    xpathMatched.push(attr);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (currentNode.childNodes && currentNode.childNodes.length) {\r\n                                for (let i = 0; i < currentNode.childNodes.length; i++) {\r\n                                    const childNode = currentNode.childNodes.item(i);\r\n                                    if (childNode.nodeType !== 1) { // ELEMENT_NODE\r\n                                        continue;\r\n                                    }\r\n                                    if (childNode.localName !== item.localName) {\r\n                                        continue;\r\n                                    }\r\n                                    if (item.namespaceUri && item.namespaceUri !== childNode.namespaceURI) {\r\n                                        continue;\r\n                                    }\r\n\r\n                                    nextCurrentNodes.push(childNode);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    currentNodes = nextCurrentNodes;\r\n\r\n                    if (index === p.xpathSelectorParsed.length - 1) {\r\n                        currentNodes.forEach((node) => {\r\n                            xpathMatched.push(node);\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // // CHECKING ...\r\n                // const select = xpath.useNamespaces(p.namespaces || {});\r\n                // const xPathSelected = select(p.xpathSelector, objectInstance);\r\n                // if (xPathSelected && xPathSelected.length) {\r\n                //     const xpathMatchedCheck: Node[] = [];\r\n                //     if (!(xPathSelected instanceof Array)) {\r\n                //         xpathMatchedCheck.push(xPathSelected);\r\n                //     } else {\r\n                //         xPathSelected.forEach((item: Node) => {\r\n                //             // console.log(item.nodeValue || item.localName);\r\n                //             xpathMatchedCheck.push(item);\r\n                //         });\r\n                //     }\r\n                //     if (!xpathMatched || !xpathMatched.length) {\r\n                //         console.log(\"########################## XPATH NO MATCH 1 !!!!!!\");\r\n                //         console.log(p.xpathSelector);\r\n                //     } else if (xpathMatchedCheck.length !== xpathMatched.length) {\r\n                //         console.log(\"########################## XPATH NO MATCH 2 !!!!!!\");\r\n                //     } else {\r\n                //         xpathMatchedCheck.forEach((item: Node, index: number) => {\r\n                //             if (item !== xpathMatched[index]) {\r\n                //                 console.log(\"########################## XPATH NO MATCH 3 !!!!!!\");\r\n                //             }\r\n                //         });\r\n                //     }\r\n                // } else {\r\n                //     if (xpathMatched && xpathMatched.length) {\r\n                //         console.log(\"########################## XPATH NO MATCH 4 !!!!!!\");\r\n                //     }\r\n                // }\r\n\r\n                if (xpathMatched && xpathMatched.length) {\r\n\r\n                    if (p.array || p.set) {\r\n                        output[key] = []; // Array<IDynamicObject>();\r\n                        xpathMatched.forEach((item) => {\r\n                            output[key].push(deserializeObject(item, p, options));\r\n                        });\r\n\r\n                        if (p.set) {\r\n                            output[key] = new Set(output[key]);\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    output[key] = deserializeObject(xpathMatched[0], p, options);\r\n                }\r\n            } else {\r\n                // console.log(\"########### USING XPATH!\");\r\n                // console.log(`${p.xpathSelector}`);\r\n\r\n                // const timeBegin = process.hrtime();\r\n                // console.log(namespaces);\r\n                // console.log(p.xpathSelector);\r\n                const select = xpath.useNamespaces(p.namespaces || {});\r\n                const xPathSelected = select(p.xpathSelector, objectInstance) as Node[];\r\n\r\n                if (xPathSelected && xPathSelected.length) {\r\n\r\n                    // const timeElapsed = process.hrtime(timeBegin);\r\n                    // if (debug) {\r\n                    //     console.log(`=-------- ${timeElapsed[0]} seconds + ${timeElapsed[1]} nanoseconds`);\r\n                    // }\r\n                    // if (timeElapsed[0] > 1) {\r\n                    //     process.exit(1);\r\n                    // }\r\n\r\n                    const xpathMatched: Node[] = [];\r\n\r\n                    // console.log(\"XPATH MATCH: \" + p.xpathSelector\r\n                    //     + \" == \" + (xPathSelected instanceof Array)\r\n                    //     + \" -- \" + xPathSelected.length);\r\n\r\n                    if (!(xPathSelected instanceof Array)) {\r\n                        xpathMatched.push(xPathSelected);\r\n                    } else {\r\n                        xPathSelected.forEach((item: Node) => {\r\n                            // console.log(item.nodeValue || item.localName);\r\n                            xpathMatched.push(item);\r\n                        });\r\n                    }\r\n\r\n                    if (p.array || p.set) {\r\n                        output[key] = []; // Array<IDynamicObject>();\r\n                        xpathMatched.forEach((item) => {\r\n                            output[key].push(deserializeObject(item, p, options));\r\n                        });\r\n\r\n                        if (p.set) {\r\n                            output[key] = new Set(output[key]);\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    output[key] = deserializeObject(xpathMatched[0], p, options);\r\n                }\r\n            }\r\n        });\r\n\r\n        d.onDeserialized.call(output);\r\n    });\r\n\r\n    return output;\r\n}\r\n\r\nfunction deserializeObject(\r\n    objectInstance: Node,\r\n    definition: PropertyDefinition,\r\n    _options: IParseOptions): IDynamicObject {\r\n\r\n    const primitive = definition.objectType === String\r\n        || definition.objectType === Boolean\r\n        || definition.objectType === Number;\r\n\r\n    const value: any =\r\n        // objectInstance.nodeValue;\r\n        objectInstance.nodeType === 3 ? // TEXT_NODE\r\n            (objectInstance as Text).data :\r\n            (objectInstance.nodeType === 2 ? // ATTRIBUTE_NODE\r\n                (objectInstance as Attr).value :\r\n                (objectInstance.nodeType === 1 ? // ELEMENT_NODE\r\n                    (objectInstance as Element).localName :\r\n                    objectInstance.nodeValue));\r\n\r\n    const converter = definition.converter || propertyConverters.get(definition.objectType);\r\n    if (converter) {\r\n        return converter.deserialize(value);\r\n    }\r\n\r\n    if (!primitive) {\r\n        const objDefinition = objectDefinitions.get(definition.objectType);\r\n\r\n        if (objDefinition) {\r\n            return deserialize(objectInstance, definition.objectType);\r\n        }\r\n    }\r\n\r\n    return value;\r\n}\r\n"]}