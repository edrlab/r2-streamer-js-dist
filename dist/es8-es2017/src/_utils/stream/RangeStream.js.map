{"version":3,"file":"RangeStream.js","sourceRoot":"","sources":["../../../../../src/_utils/stream/RangeStream.ts"],"names":[],"mappings":";;AAAA,gCAAgC;AAChC,mCAAmC;AAEnC,MAAM,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAEvC,iBAAyB,SAAQ,kBAAS;IAKtC,YAAqB,WAAmB,EAAW,SAAiB,EAAW,YAAoB;QAC/F,KAAK,EAAE,CAAC;QADS,gBAAW,GAAX,WAAW,CAAQ;QAAW,cAAS,GAAT,SAAS,CAAQ;QAAW,iBAAY,GAAZ,YAAY,CAAQ;QAE/F,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;QAEpB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QAEvB,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,QAAoB;QAE9B,QAAQ,EAAE,CAAC;IACf,CAAC;IAEM,UAAU,CAAC,KAAa,EAAE,SAAiB,EAAE,QAAoB;QACpE,IAAI,CAAC,aAAa,IAAI,KAAK,CAAC,MAAM,CAAC;QAGnC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACf,KAAK,CAAC,iBAAiB,CAAC,CAAC;gBACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAK,CAAC,wCAAwC,CAAC,CAAC;gBAChD,IAAI,CAAC,GAAG,EAAE,CAAC;YACf,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBAExC,IAAI,UAAU,GAAG,CAAC,CAAC;gBACnB,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;gBAEhC,UAAU,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;gBACpE,EAAE,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;oBACjB,UAAU,GAAG,CAAC,CAAC;gBACnB,CAAC;gBAED,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,QAAQ,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;gBACpE,CAAC;gBAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;gBAEjD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAEhB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;oBACnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAChB,IAAI,CAAC,GAAG,EAAE,CAAC;gBACf,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;YAGR,CAAC;QACL,CAAC;QAED,QAAQ,EAAE,CAAC;IACf,CAAC;CACJ;AApED,kCAoEC","sourcesContent":["import * as debug_ from \"debug\";\r\nimport { Transform } from \"stream\";\r\n\r\nconst debug = debug_(\"r2:RangeStream\");\r\n\r\nexport class RangeStream extends Transform {\r\n    private bytesReceived: number;\r\n    private finished: boolean;\r\n    private closed: boolean;\r\n\r\n    constructor(readonly streamBegin: number, readonly streamEnd: number, readonly streamLength: number) {\r\n        super();\r\n        this.bytesReceived = 0;\r\n        this.finished = false;\r\n        this.closed = false;\r\n        this.on(\"end\", () => {\r\n            // debug(\"------ RangeStream END\");\r\n        });\r\n        this.on(\"finish\", () => {\r\n            // debug(\"------ RangeStream FINISH\");\r\n        });\r\n    }\r\n\r\n    public _flush(callback: () => void): void {\r\n        // debug(\"FLUSH\");\r\n        callback();\r\n    }\r\n\r\n    public _transform(chunk: Buffer, _encoding: string, callback: () => void): void {\r\n        this.bytesReceived += chunk.length;\r\n        // debug(`_transform bytesReceived ${this.bytesReceived}`);\r\n\r\n        if (this.finished) {\r\n            if (!this.closed) {\r\n                debug(\"???? CLOSING...\");\r\n                this.closed = true;\r\n                this.push(null);\r\n            } else {\r\n                debug(\"???? STILL PIPE CALLING _transform ??!\");\r\n                this.end();\r\n            }\r\n        } else {\r\n            if (this.bytesReceived > this.streamBegin) {\r\n\r\n                let chunkBegin = 0;\r\n                let chunkEnd = chunk.length - 1;\r\n\r\n                chunkBegin = this.streamBegin - (this.bytesReceived - chunk.length);\r\n                if (chunkBegin < 0) {\r\n                    chunkBegin = 0;\r\n                }\r\n\r\n                if (this.bytesReceived > this.streamEnd) {\r\n                    this.finished = true;\r\n                    chunkEnd = chunk.length - (this.bytesReceived - this.streamEnd);\r\n                }\r\n                // console.log(`CHUNK: ${chunkBegin}-${chunkEnd}/${chunk.length}`);\r\n                this.push(chunk.slice(chunkBegin, chunkEnd + 1));\r\n\r\n                if (this.finished) {\r\n                    // debug(\"FINISHING...\");\r\n                    this.closed = true;\r\n                    this.push(null);\r\n                    this.end();\r\n                }\r\n            } else {\r\n                // NOOP\r\n                // no call to this.push(), we skip the entire current chunk buffer\r\n            }\r\n        }\r\n\r\n        callback();\r\n    }\r\n}\r\n"]}