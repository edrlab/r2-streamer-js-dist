{"version":3,"file":"zip2RandomAccessReader_Http.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip2RandomAccessReader_Http.ts"],"names":[],"mappings":"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","sourcesContent":["import { PassThrough } from \"stream\";\r\nimport * as util from \"util\";\r\n\r\nimport * as debug_ from \"debug\";\r\nimport * as request from \"request\";\r\nimport * as requestPromise from \"request-promise-native\";\r\nimport * as yauzl from \"yauzl\";\r\n\r\nimport { bufferToStream, streamToBufferPromise } from \"../stream/BufferUtils\";\r\n\r\n// import { HttpReadableStream } from \"./HttpReadableStream\";\r\n\r\nconst debug = debug_(\"r2:httpStream\");\r\n\r\nexport interface RandomAccessReader {\r\n    _readStreamForRange(start: number, end: number): void;\r\n}\r\nexport class HttpZipReader implements RandomAccessReader {\r\n\r\n    private firstBuffer: Buffer | undefined = undefined;\r\n    private firstBufferStart: number = 0;\r\n    private firstBufferEnd: number = 0;\r\n\r\n    constructor(readonly url: string, readonly byteLength: number) {\r\n        yauzl.RandomAccessReader.call(this);\r\n    }\r\n\r\n    public _readStreamForRange(start: number, end: number) {\r\n        // const length = end - start;\r\n        // debug(`_readStreamForRange (new HttpReadableStream) ${this.url}` +\r\n        //     ` content-length=${this.byteLength} start=${start} end+1=${end} (length=${length})`);\r\n\r\n        // return new HttpReadableStream(this.url, this.byteLength, start, end);\r\n        // =>\r\n\r\n        // const length = end - start;\r\n        // debug(`_read: ${size} (${this.url}` +\r\n        //     ` content-length=${this.byteLength} start=${this.start} end+1=${this.end} (length=${length}))`);\r\n        // debug(`alreadyRead: ${this.alreadyRead} (byteLength: ${length})`);\r\n\r\n        if (this.firstBuffer && start >= this.firstBufferStart && end <= this.firstBufferEnd) {\r\n\r\n            // console.log(`HTTP CACHE ${this.url}: ${start}-${end} (${length}) [${this.byteLength}]`);\r\n\r\n            const begin = start - this.firstBufferStart;\r\n            const stop = end - this.firstBufferStart;\r\n\r\n            return bufferToStream(this.firstBuffer.slice(begin, stop));\r\n        }\r\n\r\n        const stream = new PassThrough();\r\n\r\n        const lastByteIndex = end - 1;\r\n        const range = `${start}-${lastByteIndex}`;\r\n\r\n        // console.log(`HTTP GET ${this.url}: ${start}-${end} (${length}) [${this.byteLength}]`);\r\n\r\n        const failure = (err: any) => {\r\n            debug(err);\r\n            // this.stream.end();\r\n        };\r\n\r\n        const success = async (res: request.RequestResponse) => {\r\n            if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {\r\n                failure(\"HTTP CODE \" + res.statusCode);\r\n                return;\r\n            }\r\n\r\n            // debug(res);\r\n\r\n            // debug(res.headers);\r\n            // debug(res.headers[\"content-type\"]);\r\n            // debug(`HTTP response content-range: ${res.headers[\"content-range\"]}`);\r\n            // debug(`HTTP response content-length: ${res.headers[\"content-length\"]}`);\r\n\r\n            if (this.firstBuffer) {\r\n                res.pipe(stream);\r\n                // // .on(\"end\", () => {\r\n                // //     debug(\"END\");\r\n                // // });\r\n            } else {\r\n                let buffer: Buffer;\r\n                try {\r\n                    buffer = await streamToBufferPromise(res);\r\n                } catch (err) {\r\n                    debug(err);\r\n                    stream.end();\r\n                    return;\r\n                }\r\n                // debug(`streamToBufferPromise: ${buffer.length}`);\r\n\r\n                this.firstBuffer = buffer;\r\n                this.firstBufferStart = start;\r\n                this.firstBufferEnd = end;\r\n\r\n                stream.write(buffer);\r\n                stream.end();\r\n            }\r\n        };\r\n\r\n        // No response streaming! :(\r\n        // https://github.com/request/request-promise/issues/90\r\n        const needsStreamingResponse = true;\r\n        if (needsStreamingResponse) {\r\n            request.get({\r\n                headers: { Range: `bytes=${range}` },\r\n                method: \"GET\",\r\n                uri: this.url,\r\n            })\r\n                .on(\"response\", success)\r\n                .on(\"error\", failure);\r\n        } else {\r\n            // tslint:disable-next-line:no-floating-promises\r\n            (async () => {\r\n                let res: requestPromise.FullResponse;\r\n                try {\r\n                    // tslint:disable-next-line:await-promise no-floating-promises\r\n                    res = await requestPromise({\r\n                        headers: { Range: `bytes=${range}` },\r\n                        method: \"GET\",\r\n                        resolveWithFullResponse: true,\r\n                        uri: this.url,\r\n                    });\r\n                } catch (err) {\r\n                    failure(err);\r\n                    return;\r\n                }\r\n\r\n                await success(res);\r\n            })()\r\n                // .then(() => {\r\n                //     console.log(\"done\");\r\n                // }).catch((err) => {\r\n                //     console.log(err);\r\n                // })\r\n                ;\r\n        }\r\n\r\n        return stream;\r\n    }\r\n}\r\nutil.inherits(HttpZipReader, yauzl.RandomAccessReader);\r\n\r\n// // tslint:disable-next-line:space-before-function-paren\r\n// HttpZipReader.prototype._readStreamForRange = function (start: number, end: number) {\r\n\r\n// };\r\n"]}