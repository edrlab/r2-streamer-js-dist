{"version":3,"file":"zip2.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip2.ts"],"names":[],"mappings":"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","sourcesContent":["import * as debug_ from \"debug\";\r\nimport * as request from \"request\";\r\nimport * as requestPromise from \"request-promise-native\";\r\nimport * as yauzl from \"yauzl\";\r\n\r\nimport { isHTTP } from \"../http/UrlUtils\";\r\nimport { streamToBufferPromise } from \"../stream/BufferUtils\";\r\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\r\nimport { HttpZipReader } from \"./zip2RandomAccessReader_Http\";\r\n\r\nconst debug = debug_(\"r2:zip2\");\r\n\r\ninterface IStringKeyedObject { [key: string]: any; }\r\n\r\nexport class Zip2 extends Zip {\r\n\r\n    public static async loadPromise(filePath: string): Promise<IZip> {\r\n        if (isHTTP(filePath)) {\r\n            return Zip2.loadPromiseHTTP(filePath);\r\n        }\r\n\r\n        return new Promise<IZip>((resolve, reject) => {\r\n\r\n            yauzl.open(filePath, { lazyEntries: true, autoClose: false }, (err: any, zip: any) => {\r\n                if (err) {\r\n                    debug(\"yauzl init ERROR\");\r\n                    debug(err);\r\n                    reject(err);\r\n                    return;\r\n                }\r\n                const zip2 = new Zip2(filePath, zip);\r\n\r\n                zip.on(\"error\", (erro: any) => {\r\n                    debug(\"yauzl ERROR\");\r\n                    debug(erro);\r\n                    reject(erro);\r\n                });\r\n\r\n                zip.readEntry(); // next (lazyEntries)\r\n                zip.on(\"entry\", (entry: any) => {\r\n                    // if (/\\/$/.test(entry.fileName)) {\r\n                    if (entry.fileName[entry.fileName.length - 1] === \"/\") {\r\n                        // skip directories / folders\r\n                    } else {\r\n                        // debug(entry.fileName);\r\n                        zip2.addEntry(entry);\r\n                    }\r\n                    zip.readEntry(); // next (lazyEntries)\r\n                });\r\n\r\n                zip.on(\"end\", () => {\r\n                    debug(\"yauzl END\");\r\n                    resolve(zip2);\r\n                });\r\n\r\n                zip.on(\"close\", () => {\r\n                    debug(\"yauzl CLOSE\");\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async loadPromiseHTTP(filePath: string): Promise<IZip> {\r\n\r\n        // No response streaming! :(\r\n        // https://github.com/request/request-promise/issues/90\r\n        const needsStreamingResponse = true;\r\n\r\n        return new Promise<IZip>(async (resolve, reject) => {\r\n\r\n            const failure = (err: any) => {\r\n                debug(err);\r\n                reject(err);\r\n            };\r\n\r\n            const success = async (res: request.RequestResponse) => {\r\n                if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {\r\n                    failure(\"HTTP CODE \" + res.statusCode);\r\n                    return;\r\n                }\r\n\r\n                debug(filePath);\r\n                debug(res.headers);\r\n\r\n                // if (!res.headers[\"content-type\"]\r\n                //     || res.headers[\"content-type\"] !== \"application/epub+zip\") {\r\n                //     reject(\"content-type not supported!\");\r\n                //     return;\r\n                // }\r\n\r\n                // TODO: if the HTTP server does not provide Content-Length,\r\n                // then fallback on download, but interrupt (req.abort())\r\n                // if response payload reaches the max limit\r\n                if (!res.headers[\"content-length\"]) {\r\n                    reject(\"content-length not supported!\");\r\n                    return;\r\n                }\r\n                const httpZipByteLength = parseInt(res.headers[\"content-length\"] as string, 10);\r\n                debug(`Content-Length: ${httpZipByteLength}`);\r\n\r\n                if (!res.headers[\"accept-ranges\"]\r\n                    || res.headers[\"accept-ranges\"] !== \"bytes\") {\r\n                    if (httpZipByteLength > (2 * 1024 * 1024)) {\r\n                        reject(\"accept-ranges not supported, file too big to download: \" + httpZipByteLength);\r\n                        return;\r\n                    }\r\n                    debug(\"Downloading: \" + filePath);\r\n\r\n                    const failure_ = (err: any) => {\r\n\r\n                        debug(err);\r\n                        reject(err);\r\n                    };\r\n\r\n                    const success_ = async (ress: request.RequestResponse) => {\r\n                        if (ress.statusCode && (ress.statusCode < 200 || ress.statusCode >= 300)) {\r\n                            failure_(\"HTTP CODE \" + ress.statusCode);\r\n                            return;\r\n                        }\r\n\r\n                        // debug(filePath);\r\n                        // debug(res.headers);\r\n                        let buffer: Buffer;\r\n                        try {\r\n                            buffer = await streamToBufferPromise(ress);\r\n                        } catch (err) {\r\n                            debug(err);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n\r\n                        yauzl.fromBuffer(buffer,\r\n                            { lazyEntries: true },\r\n                            (err: any, zip: any) => {\r\n                                if (err) {\r\n                                    debug(\"yauzl init ERROR\");\r\n                                    debug(err);\r\n                                    reject(err);\r\n                                    return;\r\n                                }\r\n                                const zip2 = new Zip2(filePath, zip);\r\n\r\n                                zip.on(\"error\", (erro: any) => {\r\n                                    debug(\"yauzl ERROR\");\r\n                                    debug(erro);\r\n                                    reject(erro);\r\n                                });\r\n\r\n                                zip.readEntry(); // next (lazyEntries)\r\n                                zip.on(\"entry\", (entry: any) => {\r\n                                    if (entry.fileName[entry.fileName.length - 1] === \"/\") {\r\n                                        // skip directories / folders\r\n                                    } else {\r\n                                        // debug(entry.fileName);\r\n                                        zip2.addEntry(entry);\r\n                                    }\r\n                                    zip.readEntry(); // next (lazyEntries)\r\n                                });\r\n\r\n                                zip.on(\"end\", () => {\r\n                                    debug(\"yauzl END\");\r\n                                    resolve(zip2);\r\n                                });\r\n\r\n                                zip.on(\"close\", () => {\r\n                                    debug(\"yauzl CLOSE\");\r\n                                });\r\n                            });\r\n                    };\r\n\r\n                    if (needsStreamingResponse) {\r\n                        request.get({\r\n                            headers: {},\r\n                            method: \"GET\",\r\n                            uri: filePath,\r\n                        })\r\n                            .on(\"response\", success_)\r\n                            .on(\"error\", failure_);\r\n                    } else {\r\n                        let ress: requestPromise.FullResponse;\r\n                        try {\r\n                            // tslint:disable-next-line:await-promise no-floating-promises\r\n                            ress = await requestPromise({\r\n                                headers: {},\r\n                                method: \"GET\",\r\n                                resolveWithFullResponse: true,\r\n                                uri: filePath,\r\n                            });\r\n                        } catch (err) {\r\n                            failure_(err);\r\n                            return;\r\n                        }\r\n\r\n                        await success_(ress);\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                const httpZipReader = new HttpZipReader(filePath, httpZipByteLength);\r\n                yauzl.fromRandomAccessReader(httpZipReader, httpZipByteLength,\r\n                    { lazyEntries: true, autoClose: false },\r\n                    (err: any, zip: any) => {\r\n                        if (err) {\r\n                            debug(\"yauzl init ERROR\");\r\n                            debug(err);\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        zip.httpZipReader = httpZipReader;\r\n                        const zip2 = new Zip2(filePath, zip);\r\n\r\n                        zip.on(\"error\", (erro: any) => {\r\n                            debug(\"yauzl ERROR\");\r\n                            debug(erro);\r\n                            reject(erro);\r\n                        });\r\n\r\n                        zip.readEntry(); // next (lazyEntries)\r\n                        zip.on(\"entry\", (entry: any) => {\r\n                            if (entry.fileName[entry.fileName.length - 1] === \"/\") {\r\n                                // skip directories / folders\r\n                            } else {\r\n                                // debug(entry.fileName);\r\n                                zip2.addEntry(entry);\r\n                            }\r\n                            zip.readEntry(); // next (lazyEntries)\r\n                        });\r\n\r\n                        zip.on(\"end\", () => {\r\n                            debug(\"yauzl END\");\r\n                            resolve(zip2);\r\n                        });\r\n\r\n                        zip.on(\"close\", () => {\r\n                            debug(\"yauzl CLOSE\");\r\n                        });\r\n                    });\r\n            };\r\n\r\n            if (needsStreamingResponse) {\r\n                request.get({\r\n                    headers: {},\r\n                    method: \"HEAD\",\r\n                    uri: filePath,\r\n                })\r\n                    .on(\"response\", success)\r\n                    .on(\"error\", failure);\r\n            } else {\r\n                // TODO: instead of a HEAD request, if not supported then\r\n                // GET with immediate req.abort() in the response callback\r\n                let res: requestPromise.FullResponse;\r\n                try {\r\n                    // tslint:disable-next-line:await-promise no-floating-promises\r\n                    res = await requestPromise({\r\n                        headers: {},\r\n                        method: \"HEAD\",\r\n                        resolveWithFullResponse: true,\r\n                        uri: filePath,\r\n                    });\r\n                } catch (err) {\r\n                    failure(err);\r\n                    return;\r\n                }\r\n\r\n                await success(res);\r\n            }\r\n        });\r\n    }\r\n\r\n    private entries: IStringKeyedObject;\r\n\r\n    private constructor(readonly filePath: string, readonly zip: any) {\r\n        super();\r\n\r\n        // see addEntry()\r\n        this.entries = {};\r\n    }\r\n\r\n    public freeDestroy(): void {\r\n        debug(\"freeDestroy: Zip2 -- \" + this.filePath);\r\n        if (this.zip) {\r\n            this.zip.close();\r\n        }\r\n    }\r\n\r\n    public entriesCount(): number {\r\n        return this.zip.entryCount;\r\n    }\r\n\r\n    public hasEntries(): boolean {\r\n        return this.entriesCount() > 0;\r\n    }\r\n\r\n    public hasEntry(entryPath: string): boolean {\r\n        return this.hasEntries() && this.entries[entryPath];\r\n    }\r\n\r\n    public forEachEntry(callback: (entryName: string) => void) {\r\n\r\n        if (!this.hasEntries()) {\r\n            return;\r\n        }\r\n\r\n        Object.keys(this.entries).forEach((entryName) => {\r\n            callback(entryName);\r\n        });\r\n    }\r\n\r\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\r\n\r\n        // debug(`entryStreamPromise: ${entryPath}`);\r\n\r\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\r\n            return Promise.reject(\"no such path in zip: \" + entryPath);\r\n        }\r\n\r\n        const entry = this.entries[entryPath];\r\n\r\n        return new Promise<IStreamAndLength>((resolve, reject) => {\r\n\r\n            this.zip.openReadStream(entry, (err: any, stream: NodeJS.ReadableStream) => {\r\n                if (err) {\r\n                    debug(\"yauzl openReadStream ERROR\");\r\n                    debug(err);\r\n                    reject(err);\r\n                    return;\r\n                }\r\n                const streamAndLength: IStreamAndLength = {\r\n                    length: entry.uncompressedSize as number,\r\n                    reset: async () => {\r\n                        return this.entryStreamPromise(entryPath);\r\n                    },\r\n                    stream,\r\n                };\r\n                resolve(streamAndLength);\r\n            });\r\n        });\r\n    }\r\n\r\n    private addEntry(entry: any) {\r\n        this.entries[entry.fileName] = entry;\r\n    }\r\n}\r\n"]}