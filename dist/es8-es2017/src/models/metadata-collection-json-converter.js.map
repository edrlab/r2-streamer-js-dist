{"version":3,"file":"metadata-collection-json-converter.js","sourceRoot":"","sources":["../../../../src/models/metadata-collection-json-converter.ts"],"names":[],"mappings":";;AAAA,qCAIiB;AAEjB,+DAAmD;AAEnD;IACW,SAAS,CAAC,QAAoB;QAGjC,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEM,WAAW,CAAC,KAAgB;QAQ/B,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,GAAG,IAAI,gCAAU,EAAE,CAAC;YAC3B,CAAC,CAAC,IAAI,GAAG,KAAe,CAAC;YACzB,MAAM,CAAC,CAAC,CAAC;QACb,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,cAAM,CAAC,WAAW,CAAa,KAAK,EAAE,gCAAU,CAAC,CAAC;QAC7D,CAAC;IACL,CAAC;IAEM,2BAA2B;QAC9B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;CACJ;AA3BD,0DA2BC","sourcesContent":["import {\n    IPropertyConverter,\n    JSON as TAJSON,\n    JsonValue,\n} from \"ta-json\";\n\nimport { Collection } from \"./metadata-collection\";\n\nexport class JsonCollectionConverter implements IPropertyConverter {\n    public serialize(property: Collection): JsonValue {\n        // console.log(\"JsonCollectionConverter.serialize()\");\n\n        return TAJSON.serialize(property);\n    }\n\n    public deserialize(value: JsonValue): Collection {\n        // console.log(\"JsonCollectionConverter.deserialize()\");\n\n        // if (value instanceof Array) {\n        //     return value.map((v) => {\n        //         return this.deserialize(v);\n        //     }) as Collection[];\n        // } else\n        if (typeof value === \"string\") {\n            const c = new Collection();\n            c.Name = value as string;\n            return c;\n        } else {\n            return TAJSON.deserialize<Collection>(value, Collection);\n        }\n    }\n\n    public collapseArrayWithSingleItem(): boolean {\n        return true;\n    }\n}\n"]}