{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/parser/epub/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as bind from \"bindings\";\nimport * as crypto from \"crypto\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport * as debug_ from \"debug\";\n// https://github.com/edcarroll/ta-json\nimport {\n    JsonElementType,\n    JsonObject,\n    JsonProperty,\n} from \"ta-json\";\n\nimport { DUMMY_CRL } from \"./lcp-certificate\";\nimport { Encryption } from \"./lcp-encryption\";\nimport { Link } from \"./lcp-link\";\nimport { Rights } from \"./lcp-rights\";\nimport { Signature } from \"./lcp-signature\";\nimport { User } from \"./lcp-user\";\n\nconst AES_BLOCK_SIZE = 16;\n\nconst debug = debug_(\"r2:publication:lcp\");\n\nlet LCP_NATIVE_PLUGIN_PATH = path.join(process.cwd(), \"LCP/lcp.node\");\nexport function setLcpNativePluginPath(filepath: string): boolean {\n    LCP_NATIVE_PLUGIN_PATH = filepath;\n    debug(LCP_NATIVE_PLUGIN_PATH);\n\n    const exists = fs.existsSync(LCP_NATIVE_PLUGIN_PATH);\n    debug(\"LCP NATIVE PLUGIN: \" + (exists ? \"OKAY\" : \"MISSING\"));\n    return exists;\n}\n\n@JsonObject()\nexport class LCP {\n    @JsonProperty(\"id\")\n    public ID: string;\n\n    @JsonProperty(\"provider\")\n    public Provider: string;\n\n    @JsonProperty(\"issued\")\n    public Issued: Date;\n\n    @JsonProperty(\"updated\")\n    public Updated: Date;\n\n    @JsonProperty(\"encryption\")\n    public Encryption: Encryption;\n\n    @JsonProperty(\"rights\")\n    public Rights: Rights;\n\n    @JsonProperty(\"user\")\n    public User: User;\n\n    @JsonProperty(\"signature\")\n    public Signature: Signature;\n\n    @JsonProperty(\"links\")\n    @JsonElementType(Link)\n    public Links: Link[];\n\n    public ZipPath: string;\n    public JsonSource: string;\n\n    // JS impl\n    public ContentKey: Buffer | undefined;\n\n    // Native impl\n    private _usesNativeNodePlugin: boolean | undefined = undefined;\n    private _lcpNative: any | undefined;\n    private _lcpContext: any | undefined;\n\n    private userPassphraseHex: string | undefined;\n\n    public isNativeNodePlugin(): boolean {\n        this.init();\n        return this._usesNativeNodePlugin as boolean;\n    }\n\n    public isReady(): boolean {\n        if (this.isNativeNodePlugin()) {\n            return typeof this._lcpContext !== \"undefined\";\n        }\n        return typeof this.ContentKey !== \"undefined\";\n    }\n\n    public init() {\n\n        if (typeof this._usesNativeNodePlugin !== \"undefined\") {\n            return;\n        }\n\n        this.ContentKey = undefined;\n        this._lcpContext = undefined;\n\n        if (fs.existsSync(LCP_NATIVE_PLUGIN_PATH)) {\n            debug(\"LCP _usesNativeNodePlugin\");\n            const filePath = path.dirname(LCP_NATIVE_PLUGIN_PATH);\n            const fileName = path.basename(LCP_NATIVE_PLUGIN_PATH);\n            debug(filePath);\n            debug(fileName);\n            this._usesNativeNodePlugin = true;\n            this._lcpNative = bind({\n                bindings: fileName,\n                module_root: filePath,\n                try: [[\n                    \"module_root\",\n                    \"bindings\",\n                ]],\n            });\n        } else {\n            debug(\"LCP JS impl\");\n            this._usesNativeNodePlugin = false;\n            this._lcpNative = undefined;\n        }\n    }\n\n    public async decrypt(encryptedContent: Buffer): Promise<Buffer> {\n        // this.init();\n        if (!this.isNativeNodePlugin()) {\n            return Promise.reject(\"direct decrypt buffer only for native plugin\");\n        }\n        if (!this._lcpContext) {\n            return Promise.reject(\"LCP context not initialized (needs setUserPassphrase)\");\n        }\n\n        return new Promise<Buffer>((resolve, reject) => {\n\n            this._lcpNative.decrypt(\n                this._lcpContext,\n                encryptedContent,\n                (er: any, decryptedContent: any) => {\n                    if (er) {\n                        debug(er);\n                        reject(er);\n                        return;\n                    }\n                    const padding = decryptedContent[decryptedContent.length - 1];\n                    // debug(padding);\n                    // const buff = Buffer.from(\n                    //     decryptedContent,\n                    //     0,\n                    //     decryptedContent.length - padding);\n                    const buff = decryptedContent.slice(0, decryptedContent.length - padding);\n                    resolve(buff);\n                },\n            );\n        });\n    }\n\n    public async setUserPassphrase(pass: string): Promise<boolean> {\n        this.init();\n\n        this.userPassphraseHex = pass;\n        // debug(this.userPassphraseHex);\n        if (!this.userPassphraseHex) {\n            return false;\n        }\n\n        const check = this.Encryption.Profile === \"http://readium.org/lcp/basic-profile\"\n            && this.Encryption.UserKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#sha256\"\n            && this.Encryption.ContentKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"\n            ;\n        if (!check) {\n            debug(\"Incorrect LCP fields.\");\n            debug(this.Encryption.Profile);\n            debug(this.Encryption.ContentKey.Algorithm);\n            debug(this.Encryption.UserKey.Algorithm);\n\n            return false;\n            // return Promise.resolve(false);\n        }\n\n        if (this._usesNativeNodePlugin) {\n\n            return new Promise<boolean>((resolve, _reject) => {\n\n                this._lcpNative.findOneValidPassphrase(\n                    this.JsonSource,\n                    [this.userPassphraseHex],\n                    (err: any, validHashedPassphrase: any) => {\n                        if (err) {\n                            debug(err);\n                            resolve(false);\n                        } else {\n                            // debug(validHashedPassphrase);\n                            // resolve(true);\n\n                            this._lcpNative.createContext(\n                                this.JsonSource,\n                                validHashedPassphrase,\n                                DUMMY_CRL,\n                                (erro: any, context: any) => {\n                                    if (erro) {\n                                        debug(erro);\n                                        resolve(false);\n                                        return;\n                                    }\n\n                                    // debug(context);\n                                    this._lcpContext = context;\n\n                                    // const userKey = new Buffer(this.userPassphraseHex as string, \"hex\");\n                                    // const buff = new Buffer(context.encryptedContentKey, \"hex\");\n                                    // const iv = buff.slice(0, AES_BLOCK_SIZE);\n                                    // const encrypted = buff.slice(AES_BLOCK_SIZE);\n                                    // const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n                                    //     userKey,\n                                    //     iv);\n                                    // decryptStream.setAutoPadding(false);\n                                    // const decryptedContent = decryptStream.update(encrypted);\n                                    // const nPadding = decryptedContent[decryptedContent.length - 1];\n                                    // const size = decryptedContent.length - nPadding;\n                                    // this.ContentKey = decryptedContent.slice(0, size); // .toString(\"binary\");\n\n                                    // this._lcpNative.decrypt(\n                                    //     context,\n                                    //     buff,\n                                    //     (er: any, decryptedContent: any) => {\n                                    //         if (er) {\n                                    //             debug(er);\n                                    //             resolve(false);\n                                    //             return;\n                                    //         }\n                                    //         const padding = decryptedContent[decryptedContent.length - 1];\n                                    //         this.ContentKey = Buffer.from(\n                                    //             decryptedContent,\n                                    //             0,\n                                    //             decryptedContent.length - padding);\n                                    //         resolve(true);\n                                    //     },\n                                    // );\n\n                                    resolve(true);\n                                },\n                            );\n                        }\n                    },\n                );\n            });\n        } else {\n            // const userKey = forge.util.hexToBytes(passPhrase);\n            const userKey = new Buffer(this.userPassphraseHex, \"hex\");\n\n            const keyCheck = new Buffer(this.Encryption.UserKey.KeyCheck, \"base64\");\n            // .toString(\"binary\");\n\n            // const keyCheck_ = forge.util.decode64(lcp.Encryption.UserKey.KeyCheck);\n            // if (keyCheck !== keyCheck_) {\n            //     debug(`ERROR LCP.Encryption.UserKey.KeyCheck base64: ${keyCheck} !== ${keyCheck_}`);\n            // }\n            // publication.AddToInternal(\"lcp_user_key_check\", keyCheck);\n            // debug(\"---LCP Encryption.UserKey.KeyCheck BASE64 decoded (forge BYTES TO HEX): \"\n            //     + forge.util.bytesToHex(keyCheck));\n\n            const encryptedLicenseID = keyCheck;\n\n            // const iv = encryptedLicenseID.substring(0, AES_BLOCK_SIZE);\n            const iv = encryptedLicenseID.slice(0, AES_BLOCK_SIZE);\n\n            // debug(\"=============== LCP ID\");\n            // debug(lcp.ID);\n            // const lcpIDbuff = forge.util.createBuffer(lcp.ID, \"utf8\");\n            // debug(lcpIDbuff.toHex());\n            // debug(lcpIDbuff.toString());\n            // debug(lcpIDbuff.bytes());\n\n            // const aesCbcCipher = (forge as any).cipher.createCipher(\"AES-CBC\", userKey);\n            // aesCbcCipher.start({ iv, additionalData_: \"binary-encoded string\" });\n            // aesCbcCipher.update(lcpIDbuff);\n            // aesCbcCipher.finish();\n            // debug(\"=============== LCP CYPHER\");\n            // // breakLength: 100  maxArrayLength: undefined\n            // console.log(util.inspect(aesCbcCipher.output,\n            //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n            // debug(aesCbcCipher.output.bytes());\n            // debug(aesCbcCipher.output.toHex());\n            // // debug(aesCbcCipher.output.toString());\n\n            const encrypted = encryptedLicenseID.slice(AES_BLOCK_SIZE);\n\n            const decrypteds: Buffer[] = [];\n            const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n                userKey,\n                iv);\n            decryptStream.setAutoPadding(false);\n            const buff1 = decryptStream.update(encrypted);\n            // debug(buff1.toString(\"hex\"));\n            if (buff1) {\n                decrypteds.push(buff1);\n            }\n            const buff2 = decryptStream.final();\n            // debug(buff2.toString(\"hex\"));\n            if (buff2) {\n                decrypteds.push(buff2);\n            }\n            const decrypted = Buffer.concat(decrypteds);\n\n            const nPaddingBytes = decrypted[decrypted.length - 1];\n            const size = encrypted.length - nPaddingBytes;\n\n            const decryptedOut = decrypted.slice(0, size).toString(\"utf8\");\n\n            // const encrypted = encryptedLicenseID.substring(AES_BLOCK_SIZE);\n            // const toDecrypt = forge.util.createBuffer(encrypted, \"binary\");\n            // // const toDecrypt = aesCbcCipher.output;\n            // const aesCbcDecipher = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n            // aesCbcDecipher.start({ iv, additionalData_: \"binary-encoded string\" });\n            // aesCbcDecipher.update(toDecrypt);\n            // aesCbcDecipher.finish();\n\n            // // debug(\"=============== LCP DECYPHER\");\n            // // // breakLength: 100  maxArrayLength: undefined\n            // // console.log(util.inspect(aesCbcDecipher.output,\n            // //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n            // // debug(aesCbcDecipher.output.bytes());\n            // // debug(aesCbcDecipher.output.toHex());\n            // // // debug(aesCbcDecipher.output.toString());\n            // const decryptedOut = aesCbcDecipher.output.toString();\n\n            if (this.ID !== decryptedOut) {\n                debug(\"Failed LCP ID check.\");\n\n                return false;\n                // return Promise.resolve(false);\n            }\n\n            const encryptedContentKey =\n                new Buffer(this.Encryption.ContentKey.EncryptedValue, \"base64\");\n            // .toString(\"binary\");\n\n            // const iv2 = encryptedContentKey.substring(0, AES_BLOCK_SIZE);\n            const iv2 = encryptedContentKey.slice(0, AES_BLOCK_SIZE);\n\n            const encrypted2 = encryptedContentKey.slice(AES_BLOCK_SIZE);\n\n            const decrypteds2: Buffer[] = [];\n            const decryptStream2 = crypto.createDecipheriv(\"aes-256-cbc\",\n                userKey,\n                iv2);\n            decryptStream2.setAutoPadding(false);\n            const buff1_ = decryptStream2.update(encrypted2);\n            // debug(buff1.toString(\"hex\"));\n            if (buff1_) {\n                decrypteds2.push(buff1_);\n            }\n            const buff2_ = decryptStream2.final();\n            // debug(buff2.toString(\"hex\"));\n            if (buff2_) {\n                decrypteds2.push(buff2_);\n            }\n            const decrypted2 = Buffer.concat(decrypteds2);\n\n            const nPaddingBytes2 = decrypted2[decrypted2.length - 1];\n            const size2 = encrypted2.length - nPaddingBytes2;\n\n            this.ContentKey = decrypted2.slice(0, size2); // .toString(\"binary\");\n\n            // const encrypted2 = encryptedContentKey.substring(AES_BLOCK_SIZE);\n            // const toDecrypt2 =\n            //     forge.util.createBuffer(encrypted2, \"binary\");\n            // // const toDecrypt = aesCbcCipher.output;\n            // const aesCbcDecipher2 = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n            // aesCbcDecipher2.start({ iv: iv2, additionalData_: \"binary-encoded string\" });\n            // aesCbcDecipher2.update(toDecrypt2);\n            // aesCbcDecipher2.finish();\n            // const contentKey = new Buffer(aesCbcDecipher2.output.bytes());\n\n            // let userKey: string | undefined;\n            // const lcpPass = this.findFromInternal(\"lcp_user_pass_hash\");\n\n            // if (lcpPass) {\n            //     userKey = lcpPass.Value; // basic profile: user passphrase SHA256 hash digest\n            // } else {\n            //     const userPassPhrase = \"dan\"; // testing with my own WasteLand sample (LCP basic profile)\n            //     const sha256 = forge.md.sha256.create();\n            //     sha256.update(userPassPhrase, \"utf8\");\n            //     const digest = sha256.digest();\n            //     userKey = digest.bytes(); // 32 bytes => AES-256 key\n            //     // publication.AddToInternal(\"lcp_user_key\", userKey);\n            //     // debug(\"---LCP user key == passphrase + SHA256 digest HEX: \"\n            //     //     + digest.toHex() + \" // \" + userKey.length);\n            // }\n        }\n\n        return true;\n        // return Promise.resolve(true);\n    }\n}\n"]}