{"version":3,"file":"epub.js","sourceRoot":"","sources":["../../../../src/parser/epub.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\r\nimport * as querystring from \"querystring\";\r\n\r\nimport { MediaOverlayNode, timeStrToSeconds } from \"@models/media-overlay\";\r\nimport { Metadata } from \"@models/metadata\";\r\nimport { BelongsTo } from \"@models/metadata-belongsto\";\r\nimport { Collection } from \"@models/metadata-collection\";\r\nimport { Contributor } from \"@models/metadata-contributor\";\r\nimport { Encrypted } from \"@models/metadata-encrypted\";\r\nimport { MediaOverlay } from \"@models/metadata-media-overlay\";\r\nimport { IStringMap } from \"@models/metadata-multilang\";\r\nimport { Properties } from \"@models/metadata-properties\";\r\nimport { Subject } from \"@models/metadata-subject\";\r\nimport { Publication } from \"@models/publication\";\r\nimport { Link } from \"@models/publication-link\";\r\nimport { Transformers } from \"@transform/transformer\";\r\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\r\nimport { XML } from \"@utils/xml-js-mapper\";\r\nimport { IStreamAndLength, IZip } from \"@utils/zip/zip\";\r\nimport { zipLoadPromise } from \"@utils/zip/zipFactory\";\r\nimport * as debug_ from \"debug\";\r\nimport * as sizeOf from \"image-size\";\r\nimport * as moment from \"moment\";\r\nimport { JSON as TAJSON } from \"ta-json\";\r\nimport * as xmldom from \"xmldom\";\r\nimport * as xpath from \"xpath\";\r\n\r\nimport { Container } from \"./epub/container\";\r\nimport { Rootfile } from \"./epub/container-rootfile\";\r\nimport { Encryption } from \"./epub/encryption\";\r\nimport { LCP } from \"./epub/lcp\";\r\nimport { NCX } from \"./epub/ncx\";\r\nimport { NavPoint } from \"./epub/ncx-navpoint\";\r\nimport { OPF } from \"./epub/opf\";\r\nimport { Author } from \"./epub/opf-author\";\r\nimport { Manifest } from \"./epub/opf-manifest\";\r\nimport { Metafield } from \"./epub/opf-metafield\";\r\nimport { Title } from \"./epub/opf-title\";\r\nimport { SMIL } from \"./epub/smil\";\r\nimport { Par } from \"./epub/smil-par\";\r\nimport { Seq } from \"./epub/smil-seq\";\r\nimport { SeqOrPar } from \"./epub/smil-seq-or-par\";\r\n\r\nconst debug = debug_(\"r2:epub\");\r\n\r\nconst epub3 = \"3.0\";\r\nconst epub301 = \"3.0.1\";\r\nconst epub31 = \"3.1\";\r\n// const epub2 = \"2.0\";\r\n// const epub201 = \"2.0.1\";\r\nconst autoMeta = \"auto\";\r\nconst noneMeta = \"none\";\r\nconst reflowableMeta = \"reflowable\";\r\n\r\nexport const mediaOverlayURLPath = \"media-overlay.json\";\r\nexport const mediaOverlayURLParam = \"resource\";\r\n\r\nexport const addCoverDimensions = async (publication: Publication, coverLink: Link) => {\r\n\r\n    const zipInternal = publication.findFromInternal(\"zip\");\r\n    if (zipInternal) {\r\n        const zip = zipInternal.Value as IZip;\r\n        if (zip.hasEntry(coverLink.Href)) {\r\n            let zipStream: IStreamAndLength;\r\n            try {\r\n                zipStream = await zip.entryStreamPromise(coverLink.Href);\r\n            } catch (err) {\r\n                debug(coverLink.Href);\r\n                debug(coverLink.TypeLink);\r\n                debug(err);\r\n                return;\r\n            }\r\n\r\n            let zipData: Buffer;\r\n            try {\r\n                zipData = await streamToBufferPromise(zipStream.stream);\r\n\r\n                const imageInfo = sizeOf(zipData);\r\n                if (imageInfo) {\r\n                    coverLink.Width = imageInfo.width;\r\n                    coverLink.Height = imageInfo.height;\r\n\r\n                    if (coverLink.TypeLink &&\r\n                        coverLink.TypeLink.replace(\"jpeg\", \"jpg\").replace(\"+xml\", \"\")\r\n                        !== (\"image/\" + imageInfo.type)) {\r\n                        debug(`Wrong image type? ${coverLink.TypeLink} -- ${imageInfo.type}`);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                debug(coverLink.Href);\r\n                debug(coverLink.TypeLink);\r\n                debug(err);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport async function EpubParsePromise(filePath: string): Promise<Publication> {\r\n    let zip: IZip;\r\n    try {\r\n        zip = await zipLoadPromise(filePath);\r\n    } catch (err) {\r\n        debug(err);\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    if (!zip.hasEntries()) {\r\n        return Promise.reject(\"EPUB zip empty\");\r\n    }\r\n\r\n    const publication = new Publication();\r\n    publication.Context = [\"http://readium.org/webpub/default.jsonld\"];\r\n    publication.Metadata = new Metadata();\r\n    publication.Metadata.RDFType = \"http://schema.org/Book\";\r\n    publication.Metadata.Modified = moment(Date.now()).toDate();\r\n\r\n    publication.AddToInternal(\"filename\", path.basename(filePath));\r\n\r\n    publication.AddToInternal(\"type\", \"epub\");\r\n    publication.AddToInternal(\"zip\", zip);\r\n\r\n    let lcpl: LCP | undefined;\r\n    const lcplZipPath = \"META-INF/license.lcpl\";\r\n    if (zip.hasEntry(lcplZipPath)) {\r\n        let lcplZipStream_: IStreamAndLength;\r\n        try {\r\n            lcplZipStream_ = await zip.entryStreamPromise(lcplZipPath);\r\n        } catch (err) {\r\n            debug(err);\r\n            return Promise.reject(err);\r\n        }\r\n        const lcplZipStream = lcplZipStream_.stream;\r\n\r\n        let lcplZipData: Buffer;\r\n        try {\r\n            lcplZipData = await streamToBufferPromise(lcplZipStream);\r\n        } catch (err) {\r\n            debug(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const lcplStr = lcplZipData.toString(\"utf8\");\r\n        const lcplJson = global.JSON.parse(lcplStr);\r\n        debug(lcplJson);\r\n        lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\r\n        lcpl.ZipPath = lcplZipPath;\r\n        lcpl.JsonSource = lcplStr;\r\n        lcpl.init();\r\n\r\n        // breakLength: 100  maxArrayLength: undefined\r\n        // console.log(util.inspect(lcpl,\r\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\r\n\r\n        publication.LCP = lcpl;\r\n\r\n        // // breakLength: 100  maxArrayLength: undefined\r\n        // console.log(util.inspect(this.LCP,\r\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\r\n\r\n        publication.AddLink(\"application/vnd.readium.lcp.license-1.0+json\", [\"license\"],\r\n            lcpl.ZipPath, false);\r\n    }\r\n\r\n    let encryption: Encryption | undefined;\r\n    const encZipPath = \"META-INF/encryption.xml\";\r\n    if (zip.hasEntry(encZipPath)) {\r\n\r\n        let encryptionXmlZipStream_: IStreamAndLength;\r\n        try {\r\n            encryptionXmlZipStream_ = await zip.entryStreamPromise(encZipPath);\r\n        } catch (err) {\r\n            debug(err);\r\n            return Promise.reject(err);\r\n        }\r\n        const encryptionXmlZipStream = encryptionXmlZipStream_.stream;\r\n\r\n        let encryptionXmlZipData: Buffer;\r\n        try {\r\n            encryptionXmlZipData = await streamToBufferPromise(encryptionXmlZipStream);\r\n        } catch (err) {\r\n            debug(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const encryptionXmlStr = encryptionXmlZipData.toString(\"utf8\");\r\n        const encryptionXmlDoc = new xmldom.DOMParser().parseFromString(encryptionXmlStr);\r\n\r\n        encryption = XML.deserialize<Encryption>(encryptionXmlDoc, Encryption);\r\n        encryption.ZipPath = encZipPath;\r\n\r\n        // breakLength: 100  maxArrayLength: undefined\r\n        // console.log(util.inspect(encryption,\r\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\r\n    }\r\n\r\n    const containerZipPath = \"META-INF/container.xml\";\r\n\r\n    let containerXmlZipStream_: IStreamAndLength;\r\n    try {\r\n        containerXmlZipStream_ = await zip.entryStreamPromise(containerZipPath);\r\n    } catch (err) {\r\n        debug(err);\r\n        return Promise.reject(err);\r\n    }\r\n    const containerXmlZipStream = containerXmlZipStream_.stream;\r\n\r\n    let containerXmlZipData: Buffer;\r\n    try {\r\n        containerXmlZipData = await streamToBufferPromise(containerXmlZipStream);\r\n    } catch (err) {\r\n        debug(err);\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    const containerXmlStr = containerXmlZipData.toString(\"utf8\");\r\n    const containerXmlDoc = new xmldom.DOMParser().parseFromString(containerXmlStr);\r\n\r\n    // debug(containerXmlDoc);\r\n    // debug(containerXmlStr);\r\n    // const containerXmlRootElement = xpath.select1(\"/\", containerXmlDoc);\r\n    // debug(containerXmlRootElement.toString());\r\n\r\n    const container = XML.deserialize<Container>(containerXmlDoc, Container);\r\n    container.ZipPath = containerZipPath;\r\n    // breakLength: 100  maxArrayLength: undefined\r\n    // console.log(util.inspect(container,\r\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\r\n\r\n    const rootfile = container.Rootfile[0];\r\n\r\n    // debug(`${rootfile.Path}:`);\r\n\r\n    // let timeBegin = process.hrtime();\r\n\r\n    let opfZipStream_: IStreamAndLength;\r\n    try {\r\n        opfZipStream_ = await zip.entryStreamPromise(rootfile.Path);\r\n    } catch (err) {\r\n        debug(err);\r\n        return Promise.reject(err);\r\n    }\r\n    const opfZipStream = opfZipStream_.stream;\r\n\r\n    // const timeElapsed1 = process.hrtime(timeBegin);\r\n    // debug(`1) ${timeElapsed1[0]} seconds + ${timeElapsed1[1]} nanoseconds`);\r\n    // timeBegin = process.hrtime();\r\n\r\n    let opfZipData: Buffer;\r\n    try {\r\n        opfZipData = await streamToBufferPromise(opfZipStream);\r\n    } catch (err) {\r\n        debug(err);\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    // debug(`${opfZipData.length} bytes`);\r\n\r\n    // const timeElapsed2 = process.hrtime(timeBegin);\r\n    // debug(`2) ${timeElapsed2[0]} seconds + ${timeElapsed2[1]} nanoseconds`);\r\n    // timeBegin = process.hrtime();\r\n\r\n    const opfStr = opfZipData.toString(\"utf8\");\r\n\r\n    // const timeElapsed3 = process.hrtime(timeBegin);\r\n    // debug(`3) ${timeElapsed3[0]} seconds + ${timeElapsed3[1]} nanoseconds`);\r\n    // timeBegin = process.hrtime();\r\n\r\n    // TODO: this takes some time with large OPF XML data\r\n    // (typically: many manifest items),\r\n    // but it remains acceptable.\r\n    // e.g. BasicTechnicalMathWithCalculus.epub with 2.5MB OPF!\r\n    const opfDoc = new xmldom.DOMParser().parseFromString(opfStr);\r\n\r\n    // const timeElapsed4 = process.hrtime(timeBegin);\r\n    // debug(`4) ${timeElapsed4[0]} seconds + ${timeElapsed4[1]} nanoseconds`);\r\n    // const timeBegin = process.hrtime();\r\n\r\n    // tslint:disable-next-line:no-string-literal\r\n    // process.env[\"OPF_PARSE\"] = \"true\";\r\n    // TODO: this takes a MASSIVE amount of time with large OPF XML data\r\n    // (typically: many manifest items)\r\n    // e.g. BasicTechnicalMathWithCalculus.epub with 2.5MB OPF!\r\n    // culprit: XPath lib ... so we use our own mini XPath parser/matcher\r\n    // (=> performance gain in orders of magnitude!)\r\n    const opf = XML.deserialize<OPF>(opfDoc, OPF);\r\n    // tslint:disable-next-line:no-string-literal\r\n    // process.env[\"OPF_PARSE\"] = \"false\";\r\n\r\n    // const timeElapsed5 = process.hrtime(timeBegin);\r\n    // debug(`5) ${timeElapsed5[0]} seconds + ${timeElapsed5[1]} nanoseconds`);\r\n\r\n    opf.ZipPath = rootfile.Path;\r\n\r\n    // breakLength: 100  maxArrayLength: undefined\r\n    // console.log(util.inspect(opf,\r\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\r\n\r\n    // const epubVersion = getEpubVersion(rootfile, opf);\r\n\r\n    let ncx: NCX | undefined;\r\n    if (opf.Spine.Toc) {\r\n        const ncxManItem = opf.Manifest.find((manifestItem) => {\r\n            return manifestItem.ID === opf.Spine.Toc;\r\n        });\r\n        if (ncxManItem) {\r\n            const ncxFilePath = path.join(path.dirname(opf.ZipPath), ncxManItem.Href)\r\n                .replace(/\\\\/g, \"/\");\r\n            // debug(\"########## NCX: \"\r\n            //     + opf.ZipPath\r\n            //     + \" == \"\r\n            //     + ncxManItem.Href\r\n            //     + \" -- \"\r\n            //     + ncxFilePath);\r\n\r\n            let ncxZipStream_: IStreamAndLength;\r\n            try {\r\n                ncxZipStream_ = await zip.entryStreamPromise(ncxFilePath);\r\n            } catch (err) {\r\n                debug(err);\r\n                return Promise.reject(err);\r\n            }\r\n            const ncxZipStream = ncxZipStream_.stream;\r\n\r\n            let ncxZipData: Buffer;\r\n            try {\r\n                ncxZipData = await streamToBufferPromise(ncxZipStream);\r\n            } catch (err) {\r\n                debug(err);\r\n                return Promise.reject(err);\r\n            }\r\n\r\n            const ncxStr = ncxZipData.toString(\"utf8\");\r\n            const ncxDoc = new xmldom.DOMParser().parseFromString(ncxStr);\r\n            ncx = XML.deserialize<NCX>(ncxDoc, NCX);\r\n            ncx.ZipPath = ncxFilePath;\r\n\r\n            // breakLength: 100  maxArrayLength: undefined\r\n            // console.log(util.inspect(ncx,\r\n            //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\r\n        }\r\n    }\r\n\r\n    addTitle(publication, rootfile, opf);\r\n\r\n    addIdentifier(publication, rootfile, opf);\r\n\r\n    if (opf.Metadata) {\r\n        if (opf.Metadata.Language) {\r\n            publication.Metadata.Language = opf.Metadata.Language;\r\n        }\r\n        if (opf.Metadata.Rights && opf.Metadata.Rights.length) {\r\n            publication.Metadata.Rights = opf.Metadata.Rights.join(\" \");\r\n        }\r\n        if (opf.Metadata.Description && opf.Metadata.Description.length) {\r\n            publication.Metadata.Description = opf.Metadata.Description[0];\r\n        }\r\n        if (opf.Metadata.Publisher && opf.Metadata.Publisher.length) {\r\n            publication.Metadata.Publisher = [];\r\n\r\n            opf.Metadata.Publisher.forEach((pub) => {\r\n                const contrib = new Contributor();\r\n                contrib.Name = pub;\r\n                publication.Metadata.Publisher.push(contrib);\r\n            });\r\n        }\r\n        if (opf.Metadata.Source && opf.Metadata.Source.length) {\r\n            publication.Metadata.Source = opf.Metadata.Source[0];\r\n        }\r\n\r\n        if (opf.Metadata.Contributor && opf.Metadata.Contributor.length) {\r\n            opf.Metadata.Contributor.forEach((cont) => {\r\n                addContributor(publication, rootfile, opf, cont, undefined);\r\n            });\r\n        }\r\n        if (opf.Metadata.Creator && opf.Metadata.Creator.length) {\r\n            opf.Metadata.Creator.forEach((cont) => {\r\n                addContributor(publication, rootfile, opf, cont, \"aut\");\r\n            });\r\n        }\r\n\r\n        if (opf.Metadata.Meta) {\r\n            const metasDuration: Metafield[] = [];\r\n            const metasNarrator: Metafield[] = [];\r\n            const metasActiveClass: Metafield[] = [];\r\n            const metasPlaybackActiveClass: Metafield[] = [];\r\n\r\n            opf.Metadata.Meta.forEach((metaTag) => {\r\n                if (metaTag.Property === \"media:duration\") {\r\n                    metasDuration.push(metaTag);\r\n                }\r\n                if (metaTag.Property === \"media:narrator\") {\r\n                    metasNarrator.push(metaTag);\r\n                }\r\n                if (metaTag.Property === \"media:active-class\") {\r\n                    metasActiveClass.push(metaTag);\r\n                }\r\n                if (metaTag.Property === \"media:playback-active-class\") {\r\n                    metasPlaybackActiveClass.push(metaTag);\r\n                }\r\n            });\r\n\r\n            if (metasDuration.length) {\r\n                publication.Metadata.Duration = timeStrToSeconds(metasDuration[0].Data);\r\n            }\r\n            if (metasNarrator.length) {\r\n                if (!publication.Metadata.Narrator) {\r\n                    publication.Metadata.Narrator = [];\r\n                }\r\n                metasNarrator.forEach((metaNarrator) => {\r\n                    const cont = new Contributor();\r\n                    cont.Name = metaNarrator.Data;\r\n                    publication.Metadata.Narrator.push(cont);\r\n                });\r\n            }\r\n            if (metasActiveClass.length) {\r\n                if (!publication.Metadata.MediaOverlay) {\r\n                    publication.Metadata.MediaOverlay = new MediaOverlay();\r\n                }\r\n                publication.Metadata.MediaOverlay.ActiveClass = metasActiveClass[0].Data;\r\n            }\r\n            if (metasPlaybackActiveClass.length) {\r\n                if (!publication.Metadata.MediaOverlay) {\r\n                    publication.Metadata.MediaOverlay = new MediaOverlay();\r\n                }\r\n                publication.Metadata.MediaOverlay.PlaybackActiveClass = metasPlaybackActiveClass[0].Data;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (opf.Spine && opf.Spine.PageProgression) {\r\n        publication.Metadata.Direction = opf.Spine.PageProgression;\r\n    }\r\n    // else {\r\n    //     publication.Metadata.Direction = \"default\";\r\n    // }\r\n\r\n    if (isEpub3OrMore(rootfile, opf)) {\r\n        findContributorInMeta(publication, rootfile, opf);\r\n    }\r\n    await fillSpineAndResource(publication, rootfile, opf);\r\n\r\n    addRendition(publication, rootfile, opf);\r\n\r\n    await addCoverRel(publication, rootfile, opf);\r\n\r\n    if (encryption) {\r\n        fillEncryptionInfo(publication, rootfile, opf, encryption, lcpl);\r\n    }\r\n\r\n    await fillTOCFromNavDoc(publication, rootfile, opf, zip);\r\n\r\n    if (!publication.TOC || !publication.TOC.length) {\r\n        if (ncx) {\r\n            fillTOCFromNCX(publication, rootfile, opf, ncx);\r\n            fillPageListFromNCX(publication, rootfile, opf, ncx);\r\n        }\r\n        fillLandmarksFromGuide(publication, rootfile, opf);\r\n    }\r\n\r\n    fillCalibreSerieInfo(publication, rootfile, opf);\r\n    fillSubject(publication, rootfile, opf);\r\n\r\n    fillPublicationDate(publication, rootfile, opf);\r\n\r\n    await fillMediaOverlay(publication, rootfile, opf, zip);\r\n\r\n    return publication;\r\n}\r\n\r\n// private filePathToTitle(filePath: string): string {\r\n//     const fileName = path.basename(filePath);\r\n//     return slugify(fileName, \"_\").replace(/[\\.]/g, \"_\");\r\n// }\r\n\r\nexport async function getAllMediaOverlays(publication: Publication): Promise<MediaOverlayNode[]> {\r\n    const mos: MediaOverlayNode[] = [];\r\n\r\n    if (publication.Spine) {\r\n        for (const link of publication.Spine) {\r\n            // publication.Spine.forEach((link) => {\r\n            if (link.MediaOverlays) {\r\n                for (const mo of link.MediaOverlays) {\r\n                    // link.MediaOverlays.forEach((mo) => {\r\n                    try {\r\n                        await fillMediaOverlayParse(publication, mo);\r\n                    } catch (err) {\r\n                        return Promise.reject(err);\r\n                    }\r\n                    mos.push(mo);\r\n                    // });\r\n                }\r\n            }\r\n            // });\r\n        }\r\n    }\r\n\r\n    return Promise.resolve(mos);\r\n}\r\n\r\nexport async function getMediaOverlay(publication: Publication, spineHref: string): Promise<MediaOverlayNode[]> {\r\n    const mos: MediaOverlayNode[] = [];\r\n\r\n    if (publication.Spine) {\r\n        for (const link of publication.Spine) {\r\n            // publication.Spine.forEach((link) => {\r\n            if (link.MediaOverlays && link.Href.indexOf(spineHref) >= 0) {\r\n                for (const mo of link.MediaOverlays) {\r\n                    // link.MediaOverlays.forEach((mo) => {\r\n                    try {\r\n                        await fillMediaOverlayParse(publication, mo);\r\n                    } catch (err) {\r\n                        return Promise.reject(err);\r\n                    }\r\n                    mos.push(mo);\r\n                    // });\r\n                }\r\n            }\r\n            // });\r\n        }\r\n    }\r\n\r\n    return Promise.resolve(mos);\r\n}\r\n\r\nconst fillMediaOverlayParse =\r\n    async (publication: Publication, mo: MediaOverlayNode) => {\r\n\r\n    if (mo.initialized) {\r\n        return;\r\n    }\r\n\r\n    let link: Link | undefined;\r\n    if (publication.Resources) {\r\n\r\n        const relativePath = mo.SmilPathInZip;\r\n\r\n        if (publication.Resources) {\r\n            link = publication.Resources.find((l) => {\r\n                if (l.Href === relativePath) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n        if (!link) {\r\n            if (publication.Spine) {\r\n                link = publication.Spine.find((l) => {\r\n                    if (l.Href === relativePath) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n        }\r\n        if (!link) {\r\n            const err = \"Asset not declared in publication spine/resources! \" + relativePath;\r\n            debug(err);\r\n            return Promise.reject(err);\r\n        }\r\n    }\r\n\r\n    const zipInternal = publication.findFromInternal(\"zip\");\r\n    if (!zipInternal) {\r\n        return;\r\n    }\r\n    const zip = zipInternal.Value as IZip;\r\n\r\n    let smilZipStream_: IStreamAndLength;\r\n    try {\r\n        smilZipStream_ = await zip.entryStreamPromise(mo.SmilPathInZip);\r\n    } catch (err) {\r\n        debug(err);\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    if (link && link.Properties && link.Properties.Encrypted) {\r\n        let decryptFail = false;\r\n        let transformedStream: IStreamAndLength;\r\n        try {\r\n            transformedStream = await Transformers.tryStream(\r\n                publication, link,\r\n                smilZipStream_,\r\n                false, 0, 0);\r\n        } catch (err) {\r\n            debug(err);\r\n            return Promise.reject(err);\r\n        }\r\n        if (transformedStream) {\r\n            smilZipStream_ = transformedStream;\r\n        } else {\r\n            decryptFail = true;\r\n        }\r\n\r\n        if (decryptFail) {\r\n            const err = \"Encryption scheme not supported.\";\r\n            debug(err);\r\n            return Promise.reject(err);\r\n        }\r\n    }\r\n\r\n    const smilZipStream = smilZipStream_.stream;\r\n\r\n    let smilZipData: Buffer;\r\n    try {\r\n        smilZipData = await streamToBufferPromise(smilZipStream);\r\n    } catch (err) {\r\n        debug(err);\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    const smilStr = smilZipData.toString(\"utf8\");\r\n    const smilXmlDoc = new xmldom.DOMParser().parseFromString(smilStr);\r\n    const smil = XML.deserialize<SMIL>(smilXmlDoc, SMIL);\r\n    smil.ZipPath = mo.SmilPathInZip;\r\n\r\n    mo.initialized = true;\r\n    debug(\"PARSED SMIL: \" + mo.SmilPathInZip);\r\n\r\n    // breakLength: 100  maxArrayLength: undefined\r\n    // console.log(util.inspect(smil,\r\n    //     { showHidden: false, depth: 1000, colors: true, customInspect: true }));\r\n\r\n    mo.Role = [];\r\n    mo.Role.push(\"section\");\r\n\r\n    if (smil.Body) {\r\n        if (smil.Body.EpubType) {\r\n            smil.Body.EpubType.trim().split(\" \").forEach((role) => {\r\n                if (!role.length) {\r\n                    return;\r\n                }\r\n                if (mo.Role.indexOf(role) < 0) {\r\n                    mo.Role.push(role);\r\n                }\r\n            });\r\n        }\r\n        if (smil.Body.TextRef) {\r\n            const zipPath = path.join(path.dirname(smil.ZipPath), smil.Body.TextRef)\r\n                .replace(/\\\\/g, \"/\");\r\n            mo.Text = zipPath;\r\n\r\n        }\r\n        if (smil.Body.Children && smil.Body.Children.length) {\r\n            smil.Body.Children.forEach((seqChild) => {\r\n                if (!mo.Children) {\r\n                    mo.Children = [];\r\n                }\r\n                addSeqToMediaOverlay(smil, publication, mo, mo.Children, seqChild);\r\n            });\r\n        }\r\n    }\r\n\r\n    return;\r\n};\r\n\r\nconst fillMediaOverlay =\r\n    async (publication: Publication, rootfile: Rootfile, opf: OPF, zip: IZip) => {\r\n\r\n        if (!publication.Resources) {\r\n            return;\r\n        }\r\n\r\n        // no forEach(), because of await/async within the iteration body\r\n        // publication.Resources.forEach(async (item) => {\r\n        for (const item of publication.Resources) {\r\n            if (item.TypeLink !== \"application/smil+xml\") {\r\n                continue;\r\n            }\r\n\r\n            if (!zip.hasEntry(item.Href)) {\r\n                continue;\r\n            }\r\n\r\n            const manItemsHtmlWithSmil: Manifest[] = [];\r\n            opf.Manifest.forEach((manItemHtmlWithSmil) => {\r\n                if (manItemHtmlWithSmil.MediaOverlay) { // HTML\r\n                    const manItemSmil = opf.Manifest.find((mi) => {\r\n                        if (mi.ID === manItemHtmlWithSmil.MediaOverlay) {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n                    if (manItemSmil) {\r\n                        const smilFilePath2 = path.join(path.dirname(opf.ZipPath), manItemSmil.Href)\r\n                            .replace(/\\\\/g, \"/\");\r\n                        if (smilFilePath2 === item.Href) {\r\n                            manItemsHtmlWithSmil.push(manItemHtmlWithSmil);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            const mo = new MediaOverlayNode();\r\n            mo.SmilPathInZip = item.Href;\r\n            mo.initialized = false;\r\n\r\n            manItemsHtmlWithSmil.forEach((manItemHtmlWithSmil) => {\r\n\r\n                const htmlPathInZip = path.join(path.dirname(opf.ZipPath), manItemHtmlWithSmil.Href)\r\n                    .replace(/\\\\/g, \"/\");\r\n\r\n                const link = findLinKByHref(publication, rootfile, opf, htmlPathInZip);\r\n                if (link) {\r\n                    if (!link.MediaOverlays) {\r\n                        link.MediaOverlays = [];\r\n                    }\r\n\r\n                    const alreadyExists = link.MediaOverlays.find((moo) => {\r\n                        if (item.Href === moo.SmilPathInZip) {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n                    if (!alreadyExists) {\r\n                        link.MediaOverlays.push(mo);\r\n                    }\r\n\r\n                    if (!link.Properties) {\r\n                        link.Properties = new Properties();\r\n                    }\r\n                    link.Properties.MediaOverlay = mediaOverlayURLPath + \"?\" +\r\n                        mediaOverlayURLParam + \"=\" + querystring.escape(link.Href);\r\n                }\r\n            });\r\n\r\n            if (item.Properties && item.Properties.Encrypted) {\r\n                debug(\"ENCRYPTED SMIL MEDIA OVERLAY: \" + item.Href);\r\n                continue;\r\n            }\r\n            // LAZY\r\n            // await fillMediaOverlayParse(publication, mo);\r\n        }\r\n\r\n        return;\r\n    };\r\n\r\nconst addSeqToMediaOverlay = (\r\n    smil: SMIL, publication: Publication,\r\n    rootMO: MediaOverlayNode, mo: MediaOverlayNode[], seqChild: SeqOrPar) => {\r\n\r\n    const moc = new MediaOverlayNode();\r\n    moc.initialized = rootMO.initialized;\r\n    mo.push(moc);\r\n\r\n    if (seqChild instanceof Seq) {\r\n        moc.Role = [];\r\n        moc.Role.push(\"section\");\r\n\r\n        const seq = seqChild as Seq;\r\n\r\n        if (seq.EpubType) {\r\n            seq.EpubType.trim().split(\" \").forEach((role) => {\r\n                if (!role.length) {\r\n                    return;\r\n                }\r\n                if (moc.Role.indexOf(role) < 0) {\r\n                    moc.Role.push(role);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (seq.TextRef) {\r\n            const zipPath = path.join(path.dirname(smil.ZipPath), seq.TextRef)\r\n                .replace(/\\\\/g, \"/\");\r\n            moc.Text = zipPath;\r\n        }\r\n\r\n        if (seq.Children && seq.Children.length) {\r\n            seq.Children.forEach((child) => {\r\n                if (!moc.Children) {\r\n                    moc.Children = [];\r\n                }\r\n                addSeqToMediaOverlay(smil, publication, rootMO, moc.Children, child);\r\n            });\r\n        }\r\n    } else { // Par\r\n        const par = seqChild as Par;\r\n\r\n        if (par.EpubType) {\r\n            par.EpubType.trim().split(\" \").forEach((role) => {\r\n                if (!role.length) {\r\n                    return;\r\n                }\r\n                if (!moc.Role) {\r\n                    moc.Role = [];\r\n                }\r\n                if (moc.Role.indexOf(role) < 0) {\r\n                    moc.Role.push(role);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (par.Text && par.Text.Src) {\r\n            const zipPath = path.join(path.dirname(smil.ZipPath), par.Text.Src)\r\n                .replace(/\\\\/g, \"/\");\r\n            moc.Text = zipPath;\r\n        }\r\n        if (par.Audio && par.Audio.Src) {\r\n            const zipPath = path.join(path.dirname(smil.ZipPath), par.Audio.Src)\r\n                .replace(/\\\\/g, \"/\");\r\n            moc.Audio = zipPath;\r\n            moc.Audio += \"#t=\";\r\n            moc.Audio += par.Audio.ClipBegin ? timeStrToSeconds(par.Audio.ClipBegin) : \"0\";\r\n            if (par.Audio.ClipEnd) {\r\n                moc.Audio += \",\";\r\n                moc.Audio += timeStrToSeconds(par.Audio.ClipEnd);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst fillPublicationDate = (publication: Publication, rootfile: Rootfile, opf: OPF) => {\r\n\r\n    if (opf.Metadata && opf.Metadata.Date && opf.Metadata.Date.length) {\r\n\r\n        if (isEpub3OrMore(rootfile, opf) && opf.Metadata.Date[0] && opf.Metadata.Date[0].Data) {\r\n            publication.Metadata.PublicationDate = moment(opf.Metadata.Date[0].Data).toDate();\r\n            return;\r\n        }\r\n\r\n        opf.Metadata.Date.forEach((date) => {\r\n            if (date.Data && date.Event && date.Event.indexOf(\"publication\") >= 0) {\r\n                publication.Metadata.PublicationDate = moment(date.Data).toDate();\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nconst findContributorInMeta = (publication: Publication, rootfile: Rootfile, opf: OPF) => {\r\n\r\n    if (opf.Metadata && opf.Metadata.Meta) {\r\n        opf.Metadata.Meta.forEach((meta) => {\r\n            if (meta.Property === \"dcterms:creator\" || meta.Property === \"dcterms:contributor\") {\r\n                const cont = new Author();\r\n                cont.Data = meta.Data;\r\n                cont.ID = meta.ID;\r\n                addContributor(publication, rootfile, opf, cont, undefined);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nconst addContributor = (\r\n    publication: Publication, rootfile: Rootfile, opf: OPF, cont: Author, forcedRole: string | undefined) => {\r\n\r\n    const contributor = new Contributor();\r\n    let role: string | undefined;\r\n\r\n    // const epubVersion = getEpubVersion(rootfile, opf);\r\n\r\n    if (isEpub3OrMore(rootfile, opf)) {\r\n\r\n        const meta = findMetaByRefineAndProperty(rootfile, opf, cont.ID, \"role\");\r\n        if (meta && meta.Property === \"role\") {\r\n            role = meta.Data;\r\n        }\r\n        if (!role && forcedRole) {\r\n            role = forcedRole;\r\n        }\r\n\r\n        const metaAlt = findAllMetaByRefineAndProperty(rootfile, opf, cont.ID, \"alternate-script\");\r\n        if (metaAlt && metaAlt.length) {\r\n            contributor.Name = {} as IStringMap;\r\n\r\n            if (publication.Metadata &&\r\n                publication.Metadata.Language &&\r\n                publication.Metadata.Language.length) {\r\n\r\n                contributor.Name[publication.Metadata.Language[0].toLowerCase()] = cont.Data;\r\n            }\r\n\r\n            metaAlt.forEach((m) => {\r\n                if (m.Lang) {\r\n                    (contributor.Name as IStringMap)[m.Lang] = m.Data;\r\n                }\r\n            });\r\n        } else {\r\n            contributor.Name = cont.Data;\r\n        }\r\n    } else {\r\n        contributor.Name = cont.Data;\r\n        role = cont.Role;\r\n        if (!role && forcedRole) {\r\n            role = forcedRole;\r\n        }\r\n    }\r\n\r\n    if (role) {\r\n        switch (role) {\r\n            case \"aut\": {\r\n                if (!publication.Metadata.Author) {\r\n                    publication.Metadata.Author = [];\r\n                }\r\n                publication.Metadata.Author.push(contributor);\r\n                break;\r\n            }\r\n            case \"trl\": {\r\n                if (!publication.Metadata.Translator) {\r\n                    publication.Metadata.Translator = [];\r\n                }\r\n                publication.Metadata.Translator.push(contributor);\r\n                break;\r\n            }\r\n            case \"art\": {\r\n                if (!publication.Metadata.Artist) {\r\n                    publication.Metadata.Artist = [];\r\n                }\r\n                publication.Metadata.Artist.push(contributor);\r\n                break;\r\n            }\r\n            case \"edt\": {\r\n                if (!publication.Metadata.Editor) {\r\n                    publication.Metadata.Editor = [];\r\n                }\r\n                publication.Metadata.Editor.push(contributor);\r\n                break;\r\n            }\r\n            case \"ill\": {\r\n                if (!publication.Metadata.Illustrator) {\r\n                    publication.Metadata.Illustrator = [];\r\n                }\r\n                publication.Metadata.Illustrator.push(contributor);\r\n                break;\r\n            }\r\n            case \"ltr\": {\r\n                if (!publication.Metadata.Letterer) {\r\n                    publication.Metadata.Letterer = [];\r\n                }\r\n                publication.Metadata.Letterer.push(contributor);\r\n                break;\r\n            }\r\n            case \"pen\": {\r\n                if (!publication.Metadata.Penciler) {\r\n                    publication.Metadata.Penciler = [];\r\n                }\r\n                publication.Metadata.Penciler.push(contributor);\r\n                break;\r\n            }\r\n            case \"clr\": {\r\n                if (!publication.Metadata.Colorist) {\r\n                    publication.Metadata.Colorist = [];\r\n                }\r\n                publication.Metadata.Colorist.push(contributor);\r\n                break;\r\n            }\r\n            case \"ink\": {\r\n                if (!publication.Metadata.Inker) {\r\n                    publication.Metadata.Inker = [];\r\n                }\r\n                publication.Metadata.Inker.push(contributor);\r\n                break;\r\n            }\r\n            case \"nrt\": {\r\n                if (!publication.Metadata.Narrator) {\r\n                    publication.Metadata.Narrator = [];\r\n                }\r\n                publication.Metadata.Narrator.push(contributor);\r\n                break;\r\n            }\r\n            case \"pbl\": {\r\n                if (!publication.Metadata.Publisher) {\r\n                    publication.Metadata.Publisher = [];\r\n                }\r\n                publication.Metadata.Publisher.push(contributor);\r\n                break;\r\n            }\r\n            default: {\r\n                contributor.Role = role;\r\n\r\n                if (!publication.Metadata.Contributor) {\r\n                    publication.Metadata.Contributor = [];\r\n                }\r\n                publication.Metadata.Contributor.push(contributor);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst addIdentifier = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\r\n    if (opf.Metadata && opf.Metadata.Identifier) {\r\n        if (opf.UniqueIdentifier && opf.Metadata.Identifier.length > 1) {\r\n            opf.Metadata.Identifier.forEach((iden) => {\r\n                if (iden.ID === opf.UniqueIdentifier) {\r\n                    publication.Metadata.Identifier = iden.Data;\r\n                }\r\n            });\r\n        } else if (opf.Metadata.Identifier.length > 0) {\r\n            publication.Metadata.Identifier = opf.Metadata.Identifier[0].Data;\r\n        }\r\n    }\r\n};\r\n\r\nconst addTitle = (publication: Publication, rootfile: Rootfile, opf: OPF) => {\r\n\r\n    if (isEpub3OrMore(rootfile, opf)) {\r\n        let mainTitle: Title | undefined;\r\n\r\n        if (opf.Metadata &&\r\n            opf.Metadata.Title &&\r\n            opf.Metadata.Title.length) {\r\n\r\n            if (opf.Metadata.Meta) {\r\n                const tt = opf.Metadata.Title.find((title) => {\r\n                    const refineID = \"#\" + title.ID;\r\n\r\n                    const m = opf.Metadata.Meta.find((meta) => {\r\n                        if (meta.Data === \"main\" && meta.Refine === refineID) {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n                    if (m) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n                if (tt) {\r\n                    mainTitle = tt;\r\n                }\r\n            }\r\n\r\n            if (!mainTitle) {\r\n                mainTitle = opf.Metadata.Title[0];\r\n            }\r\n        }\r\n\r\n        if (mainTitle) {\r\n            const metaAlt = findAllMetaByRefineAndProperty(rootfile, opf, mainTitle.ID, \"alternate-script\");\r\n            if (metaAlt && metaAlt.length) {\r\n                publication.Metadata.Title = {} as IStringMap;\r\n\r\n                if (mainTitle.Lang) {\r\n                    publication.Metadata.Title[mainTitle.Lang.toLowerCase()] = mainTitle.Data;\r\n                }\r\n\r\n                metaAlt.forEach((m) => {\r\n                    if (m.Lang) {\r\n                        (publication.Metadata.Title as IStringMap)[m.Lang.toLowerCase()] = m.Data;\r\n                    }\r\n                });\r\n            } else {\r\n                publication.Metadata.Title = mainTitle.Data;\r\n            }\r\n        }\r\n\r\n    } else {\r\n        if (opf.Metadata &&\r\n            opf.Metadata.Title &&\r\n            opf.Metadata.Title.length) {\r\n\r\n            publication.Metadata.Title = opf.Metadata.Title[0].Data;\r\n        }\r\n    }\r\n};\r\n\r\nconst addRelAndPropertiesToLink =\r\n    async (publication: Publication, link: Link, linkEpub: Manifest, rootfile: Rootfile, opf: OPF) => {\r\n\r\n        if (linkEpub.Properties) {\r\n            await addToLinkFromProperties(publication, link, linkEpub.Properties);\r\n        }\r\n        const spineProperties = findPropertiesInSpineForManifest(linkEpub, rootfile, opf);\r\n        if (spineProperties) {\r\n            await addToLinkFromProperties(publication, link, spineProperties);\r\n        }\r\n    };\r\n\r\nconst addToLinkFromProperties = async (publication: Publication, link: Link, propertiesString: string) => {\r\n\r\n    const properties = propertiesString.trim().split(\" \");\r\n\r\n    const propertiesStruct = new Properties();\r\n\r\n    // https://idpf.github.io/epub-vocabs/rendition/\r\n\r\n    // no forEach(), because of await/async within the iteration body\r\n    // properties.forEach(async (p) => {\r\n    for (const p of properties) {\r\n        switch (p) {\r\n            case \"cover-image\": {\r\n                link.AddRel(\"cover\");\r\n                await addCoverDimensions(publication, link);\r\n                break;\r\n            }\r\n            case \"nav\": {\r\n                link.AddRel(\"contents\");\r\n                break;\r\n            }\r\n            case \"scripted\": {\r\n                if (!propertiesStruct.Contains) {\r\n                    propertiesStruct.Contains = [];\r\n                }\r\n                propertiesStruct.Contains.push(\"js\");\r\n                break;\r\n            }\r\n            case \"mathml\": {\r\n                if (!propertiesStruct.Contains) {\r\n                    propertiesStruct.Contains = [];\r\n                }\r\n                propertiesStruct.Contains.push(\"mathml\");\r\n                break;\r\n            }\r\n            case \"onix-record\": {\r\n                if (!propertiesStruct.Contains) {\r\n                    propertiesStruct.Contains = [];\r\n                }\r\n                propertiesStruct.Contains.push(\"onix\");\r\n                break;\r\n            }\r\n            case \"svg\": {\r\n                if (!propertiesStruct.Contains) {\r\n                    propertiesStruct.Contains = [];\r\n                }\r\n                propertiesStruct.Contains.push(\"svg\");\r\n                break;\r\n            }\r\n            case \"xmp-record\": {\r\n                if (!propertiesStruct.Contains) {\r\n                    propertiesStruct.Contains = [];\r\n                }\r\n                propertiesStruct.Contains.push(\"xmp\");\r\n                break;\r\n            }\r\n            case \"remote-resources\": {\r\n                if (!propertiesStruct.Contains) {\r\n                    propertiesStruct.Contains = [];\r\n                }\r\n                propertiesStruct.Contains.push(\"remote-resources\");\r\n                break;\r\n            }\r\n            case \"page-spread-left\": {\r\n                propertiesStruct.Page = \"left\";\r\n                break;\r\n            }\r\n            case \"page-spread-right\": {\r\n                propertiesStruct.Page = \"right\";\r\n                break;\r\n            }\r\n            case \"page-spread-center\": {\r\n                propertiesStruct.Page = \"center\";\r\n                break;\r\n            }\r\n            case \"rendition:spread-none\": {\r\n                propertiesStruct.Spread = noneMeta;\r\n                break;\r\n            }\r\n            case \"rendition:spread-auto\": {\r\n                propertiesStruct.Spread = autoMeta;\r\n                break;\r\n            }\r\n            case \"rendition:spread-landscape\": {\r\n                propertiesStruct.Spread = \"landscape\";\r\n                break;\r\n            }\r\n            case \"rendition:spread-portrait\": {\r\n                propertiesStruct.Spread = \"portrait\";\r\n                break;\r\n            }\r\n            case \"rendition:spread-both\": {\r\n                propertiesStruct.Spread = \"both\";\r\n                break;\r\n            }\r\n            case \"rendition:layout-reflowable\": {\r\n                propertiesStruct.Layout = reflowableMeta;\r\n                break;\r\n            }\r\n            case \"rendition:layout-pre-paginated\": {\r\n                propertiesStruct.Layout = \"fixed\";\r\n                break;\r\n            }\r\n            case \"rendition:orientation-auto\": {\r\n                propertiesStruct.Orientation = \"auto\";\r\n                break;\r\n            }\r\n            case \"rendition:orientation-landscape\": {\r\n                propertiesStruct.Orientation = \"landscape\";\r\n                break;\r\n            }\r\n            case \"rendition:orientation-portrait\": {\r\n                propertiesStruct.Orientation = \"portrait\";\r\n                break;\r\n            }\r\n            case \"rendition:flow-auto\": {\r\n                propertiesStruct.Overflow = autoMeta;\r\n                break;\r\n            }\r\n            case \"rendition:flow-paginated\": {\r\n                propertiesStruct.Overflow = \"paginated\";\r\n                break;\r\n            }\r\n            case \"rendition:flow-scrolled-continuous\": {\r\n                propertiesStruct.Overflow = \"scrolled-continuous\";\r\n                break;\r\n            }\r\n            case \"rendition:flow-scrolled-doc\": {\r\n                propertiesStruct.Overflow = \"scrolled\";\r\n                break;\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (propertiesStruct.Layout ||\r\n            propertiesStruct.Orientation ||\r\n            propertiesStruct.Overflow ||\r\n            propertiesStruct.Page ||\r\n            propertiesStruct.Spread ||\r\n            (propertiesStruct.Contains && propertiesStruct.Contains.length)) {\r\n\r\n            link.Properties = propertiesStruct;\r\n        }\r\n    }\r\n};\r\n\r\nconst addMediaOverlay = (link: Link, linkEpub: Manifest, rootfile: Rootfile, opf: OPF) => {\r\n    if (linkEpub.MediaOverlay) {\r\n        const meta = findMetaByRefineAndProperty(rootfile, opf, linkEpub.MediaOverlay, \"media:duration\");\r\n        if (meta) {\r\n            link.Duration = timeStrToSeconds(meta.Data);\r\n        }\r\n    }\r\n};\r\n\r\nconst findInManifestByID =\r\n    async (publication: Publication, rootfile: Rootfile, opf: OPF, ID: string): Promise<Link> => {\r\n\r\n        if (opf.Manifest && opf.Manifest.length) {\r\n            const item = opf.Manifest.find((manItem) => {\r\n                if (manItem.ID === ID) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (item) {\r\n                const linkItem = new Link();\r\n                linkItem.TypeLink = item.MediaType;\r\n                const zipPath = path.join(path.dirname(opf.ZipPath), item.Href)\r\n                    .replace(/\\\\/g, \"/\");\r\n                linkItem.Href = zipPath;\r\n                await addRelAndPropertiesToLink(publication, linkItem, item, rootfile, opf);\r\n                addMediaOverlay(linkItem, item, rootfile, opf);\r\n                return linkItem;\r\n            }\r\n        }\r\n        return Promise.reject(`${ID} not found`);\r\n    };\r\n\r\nconst addRendition = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\r\n\r\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\r\n        const rendition = new Properties();\r\n\r\n        opf.Metadata.Meta.forEach((meta) => {\r\n            switch (meta.Property) {\r\n                case \"rendition:layout\": {\r\n                    if (meta.Data === \"pre-paginated\") {\r\n                        rendition.Layout = \"fixed\";\r\n                    } else if (meta.Data === \"reflowable\") {\r\n                        rendition.Layout = \"reflowable\";\r\n                    }\r\n                    break;\r\n                }\r\n                case \"rendition:orientation\": {\r\n                    rendition.Orientation = meta.Data;\r\n                    break;\r\n                }\r\n                case \"rendition:spread\": {\r\n                    rendition.Spread = meta.Data;\r\n                    break;\r\n                }\r\n                case \"rendition:flow\": {\r\n                    rendition.Overflow = meta.Data;\r\n                    break;\r\n                }\r\n                default: {\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (rendition.Layout || rendition.Orientation || rendition.Overflow || rendition.Page || rendition.Spread) {\r\n            publication.Metadata.Rendition = rendition;\r\n        }\r\n    }\r\n};\r\n\r\nconst fillSpineAndResource = async (publication: Publication, rootfile: Rootfile, opf: OPF) => {\r\n\r\n    if (opf.Spine && opf.Spine.Items && opf.Spine.Items.length) {\r\n        // no forEach(), because of await/async within the iteration body\r\n        // opf.Spine.Items.forEach(async (item) => {\r\n        for (const item of opf.Spine.Items) {\r\n\r\n            if (!item.Linear || item.Linear === \"yes\") {\r\n\r\n                let linkItem: Link;\r\n                try {\r\n                    linkItem = await findInManifestByID(publication, rootfile, opf, item.IDref);\r\n                } catch (err) {\r\n                    debug(err);\r\n                    continue;\r\n                }\r\n\r\n                if (linkItem && linkItem.Href) {\r\n                    if (!publication.Spine) {\r\n                        publication.Spine = [];\r\n                    }\r\n                    publication.Spine.push(linkItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (opf.Manifest && opf.Manifest.length) {\r\n\r\n        // no forEach(), because of await/async within the iteration body\r\n        // opf.Manifest.forEach(async (item) => {\r\n        for (const item of opf.Manifest) {\r\n\r\n            const zipPath = path.join(path.dirname(opf.ZipPath), item.Href)\r\n                .replace(/\\\\/g, \"/\");\r\n            const linkSpine = findInSpineByHref(publication, zipPath);\r\n            if (!linkSpine || !linkSpine.Href) {\r\n\r\n                const linkItem = new Link();\r\n                linkItem.TypeLink = item.MediaType;\r\n                linkItem.Href = zipPath;\r\n                await addRelAndPropertiesToLink(publication, linkItem, item, rootfile, opf);\r\n                addMediaOverlay(linkItem, item, rootfile, opf);\r\n\r\n                if (!publication.Resources) {\r\n                    publication.Resources = [];\r\n                }\r\n                publication.Resources.push(linkItem);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst fillEncryptionInfo =\r\n    (publication: Publication, _rootfile: Rootfile, _opf: OPF, encryption: Encryption, lcp: LCP | undefined) => {\r\n\r\n        encryption.EncryptedData.forEach((encInfo) => {\r\n            const encrypted = new Encrypted();\r\n            encrypted.Algorithm = encInfo.EncryptionMethod.Algorithm;\r\n\r\n            if (lcp &&\r\n                encrypted.Algorithm !== \"http://www.idpf.org/2008/embedding\" &&\r\n                encrypted.Algorithm !== \"http://ns.adobe.com/pdf/enc#RC\") {\r\n                encrypted.Profile = lcp.Encryption.Profile;\r\n                encrypted.Scheme = \"http://readium.org/2014/01/lcp\";\r\n            }\r\n            if (encInfo.EncryptionProperties && encInfo.EncryptionProperties.length) {\r\n\r\n                encInfo.EncryptionProperties.forEach((prop) => {\r\n\r\n                    if (prop.Compression) {\r\n                        if (prop.Compression.OriginalLength) {\r\n                            encrypted.OriginalLength = parseFloat(prop.Compression.OriginalLength);\r\n                        }\r\n                        if (prop.Compression.Method === \"8\") {\r\n                            encrypted.Compression = \"deflate\";\r\n                        } else {\r\n                            encrypted.Compression = \"none\";\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            publication.Resources.forEach((l, _i, _arr) => {\r\n\r\n                const filePath = l.Href;\r\n                if (filePath === encInfo.CipherData.CipherReference.URI) {\r\n                    if (!l.Properties) {\r\n                        l.Properties = new Properties();\r\n                    }\r\n                    l.Properties.Encrypted = encrypted;\r\n                }\r\n            });\r\n\r\n            publication.Spine.forEach((l, _i, _arr) => {\r\n                const filePath = l.Href;\r\n                if (filePath === encInfo.CipherData.CipherReference.URI) {\r\n                    if (!l.Properties) {\r\n                        l.Properties = new Properties();\r\n                    }\r\n                    l.Properties.Encrypted = encrypted;\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\nconst fillPageListFromNCX = (publication: Publication, _rootfile: Rootfile, _opf: OPF, ncx: NCX) => {\r\n    if (ncx.PageList && ncx.PageList.PageTarget && ncx.PageList.PageTarget.length) {\r\n        ncx.PageList.PageTarget.forEach((pageTarget) => {\r\n            const link = new Link();\r\n            const zipPath = path.join(path.dirname(ncx.ZipPath), pageTarget.Content.Src)\r\n                .replace(/\\\\/g, \"/\");\r\n            link.Href = zipPath;\r\n            link.Title = pageTarget.Text;\r\n            if (!publication.PageList) {\r\n                publication.PageList = [];\r\n            }\r\n            publication.PageList.push(link);\r\n        });\r\n    }\r\n};\r\n\r\nconst fillTOCFromNCX = (publication: Publication, rootfile: Rootfile, opf: OPF, ncx: NCX) => {\r\n    if (ncx.Points && ncx.Points.length) {\r\n        ncx.Points.forEach((point) => {\r\n            if (!publication.TOC) {\r\n                publication.TOC = [];\r\n            }\r\n            fillTOCFromNavPoint(publication, rootfile, opf, ncx, point, publication.TOC);\r\n        });\r\n    }\r\n};\r\n\r\nconst fillLandmarksFromGuide = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\r\n    if (opf.Guide && opf.Guide.length) {\r\n        opf.Guide.forEach((ref) => {\r\n            if (ref.Href) {\r\n                const link = new Link();\r\n                const zipPath = path.join(path.dirname(opf.ZipPath), ref.Href)\r\n                    .replace(/\\\\/g, \"/\");\r\n                link.Href = zipPath;\r\n                link.Title = ref.Title;\r\n                if (!publication.Landmarks) {\r\n                    publication.Landmarks = [];\r\n                }\r\n                publication.Landmarks.push(link);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nconst fillTOCFromNavPoint =\r\n    (publication: Publication, rootfile: Rootfile, opf: OPF, ncx: NCX, point: NavPoint, node: Link[]) => {\r\n\r\n        const link = new Link();\r\n        const zipPath = path.join(path.dirname(ncx.ZipPath), point.Content.Src)\r\n            .replace(/\\\\/g, \"/\");\r\n        link.Href = zipPath;\r\n        link.Title = point.Text;\r\n\r\n        if (point.Points && point.Points.length) {\r\n            point.Points.forEach((p) => {\r\n                if (!link.Children) {\r\n                    link.Children = [];\r\n                }\r\n                fillTOCFromNavPoint(publication, rootfile, opf, ncx, p, link.Children);\r\n            });\r\n        }\r\n\r\n        node.push(link);\r\n    };\r\n\r\nconst fillSubject = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\r\n    if (opf.Metadata && opf.Metadata.Subject && opf.Metadata.Subject.length) {\r\n        opf.Metadata.Subject.forEach((s) => {\r\n            const sub = new Subject();\r\n            sub.Name = s.Data;\r\n            sub.Code = s.Term;\r\n            sub.Scheme = s.Authority;\r\n            if (!publication.Metadata.Subject) {\r\n                publication.Metadata.Subject = [];\r\n            }\r\n            publication.Metadata.Subject.push(sub);\r\n        });\r\n    }\r\n};\r\n\r\nconst fillCalibreSerieInfo = (publication: Publication, _rootfile: Rootfile, opf: OPF) => {\r\n    let serie: string | undefined;\r\n    let seriePosition: number | undefined;\r\n\r\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\r\n        opf.Metadata.Meta.forEach((m) => {\r\n            if (m.Name === \"calibre:series\") {\r\n                serie = m.Content;\r\n            }\r\n            if (m.Name === \"calibre:series_index\") {\r\n                seriePosition = parseFloat(m.Content);\r\n            }\r\n        });\r\n    }\r\n\r\n    if (serie) {\r\n        const collection = new Collection();\r\n        collection.Name = serie;\r\n        if (seriePosition) {\r\n            collection.Position = seriePosition;\r\n        }\r\n        if (!publication.Metadata.BelongsTo) {\r\n            publication.Metadata.BelongsTo = new BelongsTo();\r\n        }\r\n        if (!publication.Metadata.BelongsTo.Series) {\r\n            publication.Metadata.BelongsTo.Series = [];\r\n        }\r\n        publication.Metadata.BelongsTo.Series.push(collection);\r\n    }\r\n};\r\n\r\nconst fillTOCFromNavDoc = async (publication: Publication, _rootfile: Rootfile, _opf: OPF, zip: IZip):\r\n    Promise<void> => {\r\n\r\n    const navLink = publication.GetNavDoc();\r\n    if (!navLink) {\r\n        return;\r\n    }\r\n\r\n    const navDocFilePath = navLink.Href;\r\n    if (!zip.hasEntry(navDocFilePath)) {\r\n        return;\r\n    }\r\n\r\n    let navDocZipStream_: IStreamAndLength;\r\n    try {\r\n        navDocZipStream_ = await zip.entryStreamPromise(navDocFilePath);\r\n    } catch (err) {\r\n        debug(err);\r\n        return Promise.reject(err);\r\n    }\r\n    const navDocZipStream = navDocZipStream_.stream;\r\n\r\n    let navDocZipData: Buffer;\r\n    try {\r\n        navDocZipData = await streamToBufferPromise(navDocZipStream);\r\n    } catch (err) {\r\n        debug(err);\r\n        return Promise.reject(err);\r\n    }\r\n\r\n    const navDocStr = navDocZipData.toString(\"utf8\");\r\n    const navXmlDoc = new xmldom.DOMParser().parseFromString(navDocStr);\r\n\r\n    const select = xpath.useNamespaces({\r\n        epub: \"http://www.idpf.org/2007/ops\",\r\n        xhtml: \"http://www.w3.org/1999/xhtml\",\r\n    });\r\n\r\n    const navs = select(\"/xhtml:html/xhtml:body//xhtml:nav\", navXmlDoc) as Element[];\r\n    if (navs && navs.length) {\r\n\r\n        navs.forEach((navElement: Element) => {\r\n\r\n            const typeNav = select(\"@epub:type\", navElement);\r\n            if (typeNav && typeNav.length) {\r\n\r\n                const olElem = select(\"xhtml:ol\", navElement) as Element[];\r\n\r\n                const roles = (typeNav[0] as Attr).value;\r\n                const role = roles.trim().split(\" \")[0]; // TODO assumes only single epub:type in space-separated value?\r\n                switch (role) {\r\n\r\n                    case \"toc\": {\r\n                        publication.TOC = [];\r\n                        fillTOCFromNavDocWithOL(select, olElem, publication.TOC, navLink.Href);\r\n                        break;\r\n                    }\r\n                    case \"page-list\": {\r\n                        publication.PageList = [];\r\n                        fillTOCFromNavDocWithOL(select, olElem, publication.PageList, navLink.Href);\r\n                        break;\r\n                    }\r\n                    case \"landmarks\": {\r\n                        publication.Landmarks = [];\r\n                        fillTOCFromNavDocWithOL(select, olElem, publication.Landmarks, navLink.Href);\r\n                        break;\r\n                    }\r\n                    case \"lot\": {\r\n                        publication.LOT = [];\r\n                        fillTOCFromNavDocWithOL(select, olElem, publication.LOT, navLink.Href);\r\n                        break;\r\n                    }\r\n                    case \"loa\": {\r\n                        publication.LOA = [];\r\n                        fillTOCFromNavDocWithOL(select, olElem, publication.LOA, navLink.Href);\r\n                        break;\r\n                    }\r\n                    case \"loi\": {\r\n                        publication.LOI = [];\r\n                        fillTOCFromNavDocWithOL(select, olElem, publication.LOI, navLink.Href);\r\n                        break;\r\n                    }\r\n                    case \"lov\": {\r\n                        publication.LOV = [];\r\n                        fillTOCFromNavDocWithOL(select, olElem, publication.LOV, navLink.Href);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nconst fillTOCFromNavDocWithOL = (select: any, olElems: Element[], node: Link[], navDocPath: string) => {\r\n\r\n    olElems.forEach((olElem: Element) => {\r\n\r\n        const liElems = select(\"xhtml:li\", olElem);\r\n        if (liElems && liElems.length) {\r\n\r\n            liElems.forEach((liElem: Element) => {\r\n\r\n                const link = new Link();\r\n                node.push(link);\r\n\r\n                const aElems = select(\"xhtml:a\", liElem);\r\n                if (aElems && aElems.length > 0) {\r\n\r\n                    const aHref = select(\"@href\", aElems[0]);\r\n                    if (aHref && aHref.length) {\r\n                        let val = (aHref[0] as Attr).value;\r\n                        if (val[0] === \"#\") {\r\n                            val = path.basename(navDocPath) + val;\r\n                        }\r\n\r\n                        const zipPath = path.join(path.dirname(navDocPath), val)\r\n                            .replace(/\\\\/g, \"/\");\r\n                        link.Href = zipPath;\r\n                    }\r\n\r\n                    let aText = aElems[0].textContent; // select(\"text()\", aElems[0])[0].data;\r\n                    if (aText && aText.length) {\r\n                        aText = aText.trim();\r\n                        aText = aText.replace(/\\s\\s+/g, \" \");\r\n                        link.Title = aText;\r\n                    }\r\n                } else {\r\n                    const liFirstChild = select(\"xhtml:*[1]\", liElem);\r\n                    if (liFirstChild && liFirstChild.length && liFirstChild[0].textContent) {\r\n                        link.Title = liFirstChild[0].textContent.trim();\r\n                    }\r\n                }\r\n\r\n                const olElemsNext = select(\"xhtml:ol\", liElem);\r\n                if (olElemsNext && olElemsNext.length) {\r\n                    if (!link.Children) {\r\n                        link.Children = [];\r\n                    }\r\n                    fillTOCFromNavDocWithOL(select, olElemsNext, link.Children, navDocPath);\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nconst addCoverRel = async (publication: Publication, rootfile: Rootfile, opf: OPF) => {\r\n\r\n    let coverID: string | undefined;\r\n\r\n    if (opf.Metadata && opf.Metadata.Meta && opf.Metadata.Meta.length) {\r\n        opf.Metadata.Meta.find((meta) => {\r\n            if (meta.Name === \"cover\") {\r\n                coverID = meta.Content;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n\r\n    if (coverID) {\r\n        let manifestInfo: Link;\r\n        try {\r\n            manifestInfo = await findInManifestByID(publication, rootfile, opf, coverID);\r\n        } catch (err) {\r\n            debug(err);\r\n            return;\r\n        }\r\n        if (manifestInfo && manifestInfo.Href && publication.Resources && publication.Resources.length) {\r\n\r\n            const href = manifestInfo.Href;\r\n            const linky = publication.Resources.find((item, _i, _arr) => {\r\n                if (item.Href === href) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (linky) { // publication.Resources[i]\r\n                linky.AddRel(\"cover\");\r\n                await addCoverDimensions(publication, linky);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst findPropertiesInSpineForManifest = (linkEpub: Manifest, _rootfile: Rootfile, opf: OPF): string | undefined => {\r\n\r\n    if (opf.Spine && opf.Spine.Items && opf.Spine.Items.length) {\r\n        const it = opf.Spine.Items.find((item) => {\r\n            if (item.IDref === linkEpub.ID) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        if (it && it.Properties) {\r\n            return it.Properties;\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\nconst findInSpineByHref = (publication: Publication, href: string): Link | undefined => {\r\n\r\n    if (publication.Spine && publication.Spine.length) {\r\n        const ll = publication.Spine.find((l) => {\r\n            if (l.Href === href) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        if (ll) {\r\n            return ll;\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\nconst findMetaByRefineAndProperty = (\r\n    rootfile: Rootfile, opf: OPF, ID: string, property: string): Metafield | undefined => {\r\n\r\n    const ret = findAllMetaByRefineAndProperty(rootfile, opf, ID, property);\r\n    if (ret.length) {\r\n        return ret[0];\r\n    }\r\n    return undefined;\r\n};\r\n\r\nconst findAllMetaByRefineAndProperty = (_rootfile: Rootfile, opf: OPF, ID: string, property: string): Metafield[] => {\r\n    const metas: Metafield[] = [];\r\n\r\n    const refineID = \"#\" + ID;\r\n\r\n    if (opf.Metadata && opf.Metadata.Meta) {\r\n        opf.Metadata.Meta.forEach((metaTag) => {\r\n            if (metaTag.Refine === refineID && metaTag.Property === property) {\r\n                metas.push(metaTag);\r\n            }\r\n        });\r\n    }\r\n\r\n    return metas;\r\n};\r\n\r\nconst getEpubVersion = (rootfile: Rootfile, opf: OPF): string | undefined => {\r\n\r\n    if (rootfile.Version) {\r\n        return rootfile.Version;\r\n    } else if (opf.Version) {\r\n        return opf.Version;\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\nconst isEpub3OrMore = (rootfile: Rootfile, opf: OPF): boolean => {\r\n\r\n    const version = getEpubVersion(rootfile, opf);\r\n    return (version === epub3 || version === epub301 || version === epub31);\r\n};\r\n\r\nconst findLinKByHref = (publication: Publication, _rootfile: Rootfile, _opf: OPF, href: string): Link | undefined => {\r\n    if (publication.Spine && publication.Spine.length) {\r\n        const ll = publication.Spine.find((l) => {\r\n            const pathInZip = l.Href;\r\n\r\n            if (href === pathInZip) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        if (ll) {\r\n            return ll;\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n};\r\n"]}