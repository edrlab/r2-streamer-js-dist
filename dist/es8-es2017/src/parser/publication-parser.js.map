{"version":3,"file":"publication-parser.js","sourceRoot":"","sources":["../../../../src/parser/publication-parser.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAG7B,qCAA8C;AAC9C,uCAAgD;AAEzC,KAAK,kCAAkC,QAAgB;IAE1D,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;IACjD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5B,uBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5B,qBAAe,CAAC,QAAQ,CAAC,CAAC;AAClC,CAAC;AAPD,0DAOC","sourcesContent":["import * as path from \"path\";\n\nimport { Publication } from \"@models/publication\";\nimport { CbzParsePromise } from \"@parser/cbz\";\nimport { EpubParsePromise } from \"@parser/epub\";\n\nexport async function PublicationParsePromise(filePath: string): Promise<Publication> {\n\n    const fileName = path.basename(filePath);\n    const ext = path.extname(fileName).toLowerCase();\n    return /\\.epub[3]?$/.test(ext) ?\n        EpubParsePromise(filePath) :\n        CbzParsePromise(filePath);\n}\n"]}