{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/electron/main/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from \"crypto\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { injectFileInZip } from \"@r2-streamer-js/_utils/zip/zipInjector\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport { LCP } from \"@r2-streamer-js/parser/epub/lcp\";\nimport * as debug_ from \"debug\";\nimport { ipcMain } from \"electron\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nimport { R2_EVENT_TRY_LCP_PASS, R2_EVENT_TRY_LCP_PASS_RES } from \"../common/events\";\n\nconst debug = debug_(\"r2:electron:main:lcp\");\n\nexport function installLcpHandler(_publicationsServer: Server) {\n\n    ipcMain.on(R2_EVENT_TRY_LCP_PASS, async (\n        event: any,\n        publicationFilePath: string,\n        lcpPass: string,\n        isSha256Hex: boolean) => {\n\n        // debug(publicationFilePath);\n        // debug(lcpPass);\n        let okay = false;\n        try {\n            okay = await tryLcpPass(publicationFilePath, lcpPass, isSha256Hex);\n        } catch (err) {\n            debug(err);\n            okay = false;\n        }\n\n        let passSha256Hex: string | undefined;\n        if (okay) {\n            if (isSha256Hex) {\n                passSha256Hex = lcpPass;\n            } else {\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(lcpPass);\n                passSha256Hex = checkSum.digest(\"hex\");\n                // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n                // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n            }\n        }\n\n        event.sender.send(R2_EVENT_TRY_LCP_PASS_RES,\n            okay,\n            (okay ? \"Correct.\" : \"Please try again.\"),\n            passSha256Hex ? passSha256Hex : \"xxx\",\n        );\n    });\n\n    async function tryLcpPass(publicationFilePath: string, lcpPass: string, isSha256Hex: boolean): Promise<boolean> {\n        const publication = _publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication) {\n            return false;\n        }\n\n        let lcpPassHex: string | undefined;\n\n        if (isSha256Hex) {\n            lcpPassHex = lcpPass;\n        } else {\n            const checkSum = crypto.createHash(\"sha256\");\n            checkSum.update(lcpPass);\n            lcpPassHex = checkSum.digest(\"hex\");\n            // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n            // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n        }\n\n        const okay = await publication.LCP.setUserPassphrase(lcpPassHex);\n        if (!okay) {\n            debug(\"FAIL publication.LCP.setUserPassphrase()\");\n        }\n        return okay;\n    }\n}\n\nexport async function downloadFromLCPL(filePath: string, dir: string, destFileName: string): Promise<string[]> {\n\n    return new Promise<string[]>(async (resolve, reject) => {\n\n        const lcplStr = fs.readFileSync(filePath, { encoding: \"utf8\" });\n        // debug(lcplStr);\n        const lcplJson = global.JSON.parse(lcplStr);\n        const lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\n        if (lcpl.Links) {\n            const pubLink = lcpl.Links.find((link) => {\n                return link.Rel === \"publication\";\n            });\n            if (pubLink) {\n\n                const destPathTMP = path.join(dir, destFileName + \".tmp\");\n                const destPathFINAL = path.join(dir, destFileName);\n\n                const failure = (err: any) => {\n                    debug(err);\n                    reject(pubLink.Href + \" (\" + err + \")\");\n                };\n\n                const success = async (response: request.RequestResponse) => {\n                    if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                        failure(\"HTTP CODE \" + response.statusCode);\n                        return;\n                    }\n\n                    const destStreamTMP = fs.createWriteStream(destPathTMP);\n                    response.pipe(destStreamTMP);\n                    // response.on(\"end\", () => {\n                    // });\n                    destStreamTMP.on(\"finish\", () => {\n\n                        const zipError = (err: any) => {\n                            debug(err);\n                            reject(destPathTMP + \" (\" + err + \")\");\n                        };\n\n                        const doneCallback = () => {\n                            setTimeout(() => {\n                                fs.unlinkSync(destPathTMP);\n                            }, 1000);\n\n                            resolve([destPathFINAL, pubLink.Href]);\n                        };\n                        const zipEntryPath = \"META-INF/license.lcpl\";\n\n                        injectFileInZip(destPathTMP, destPathFINAL, filePath, zipEntryPath, zipError, doneCallback);\n                    });\n\n                    // let responseData: Buffer | undefined;\n                    // try {\n                    //     responseData = await streamToBufferPromise(response);\n                    // } catch (err) {\n                    //     debug(err);\n                    //     return;\n                    // }\n                    // const responseStr = responseData.toString(\"utf8\");\n                };\n\n                // No response streaming! :(\n                // https://github.com/request/request-promise/issues/90\n                const needsStreamingResponse = true;\n                if (needsStreamingResponse) {\n                    request.get({\n                        headers: {},\n                        method: \"GET\",\n                        uri: pubLink.Href,\n                    })\n                        .on(\"response\", success)\n                        .on(\"error\", failure);\n                } else {\n                    let response: requestPromise.FullResponse | undefined;\n                    try {\n                        // tslint:disable-next-line:await-promise no-floating-promises\n                        response = await requestPromise({\n                            headers: {},\n                            method: \"GET\",\n                            resolveWithFullResponse: true,\n                            uri: pubLink.Href,\n                        });\n                    } catch (err) {\n                        failure(err);\n                        return;\n                    }\n\n                    // To please the TypeScript compiler :(\n                    response = response as requestPromise.FullResponse;\n                    await success(response);\n                }\n            }\n        }\n    });\n}\n"]}