{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/electron/main/lcp.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,gCAAgC;AAGhC,uCAAmC;AAEnC,6CAAoF;AAEpF,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AAE/B,2BAAkC,mBAA2B;IAEzD,kBAAO,CAAC,EAAE,CAAC,8BAAqB,EAAE,KAAK,EACnC,KAAU,EACV,mBAA2B,EAC3B,OAAe,EACf,WAAoB,EAAE,EAAE;QAIxB,IAAI,IAAI,GAAG,KAAK,CAAC;QACjB,IAAI,CAAC;YACD,IAAI,GAAG,MAAM,UAAU,CAAC,mBAAmB,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QACvE,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,KAAK,CAAC,GAAG,CAAC,CAAC;YACX,IAAI,GAAG,KAAK,CAAC;QACjB,CAAC;QAED,IAAI,aAAiC,CAAC;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACP,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBACd,aAAa,GAAG,OAAO,CAAC;YAC5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC7C,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACzB,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAG3C,CAAC;QACL,CAAC;QAED,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAyB,EACvC,IAAI,EACJ,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,mBAAmB,CAAC,EACzC,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CACxC,CAAC;IACN,CAAC,CAAC,CAAC;IAEH,KAAK,qBAAqB,mBAA2B,EAAE,OAAe,EAAE,WAAoB;QACxF,MAAM,WAAW,GAAG,mBAAmB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;QAC/E,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,IAAI,UAA8B,CAAC;QAEnC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,UAAU,GAAG,OAAO,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC7C,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACzB,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAGxC,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QACjE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACR,KAAK,CAAC,0CAA0C,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AA9DD,8CA8DC","sourcesContent":["import * as crypto from \"crypto\";\nimport * as debug_ from \"debug\";\n\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport { ipcMain } from \"electron\";\n\nimport { R2_EVENT_TRY_LCP_PASS, R2_EVENT_TRY_LCP_PASS_RES } from \"../common/events\";\n\nconst debug = debug_(\"r2:lsd\");\n\nexport function installLcpHandler(_publicationsServer: Server) {\n\n    ipcMain.on(R2_EVENT_TRY_LCP_PASS, async (\n        event: any,\n        publicationFilePath: string,\n        lcpPass: string,\n        isSha256Hex: boolean) => {\n\n        // debug(publicationFilePath);\n        // debug(lcpPass);\n        let okay = false;\n        try {\n            okay = await tryLcpPass(publicationFilePath, lcpPass, isSha256Hex);\n        } catch (err) {\n            debug(err);\n            okay = false;\n        }\n\n        let passSha256Hex: string | undefined;\n        if (okay) {\n            if (isSha256Hex) {\n                passSha256Hex = lcpPass;\n            } else {\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(lcpPass);\n                passSha256Hex = checkSum.digest(\"hex\");\n                // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n                // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n            }\n        }\n\n        event.sender.send(R2_EVENT_TRY_LCP_PASS_RES,\n            okay,\n            (okay ? \"Correct.\" : \"Please try again.\"),\n            passSha256Hex ? passSha256Hex : \"xxx\",\n        );\n    });\n\n    async function tryLcpPass(publicationFilePath: string, lcpPass: string, isSha256Hex: boolean): Promise<boolean> {\n        const publication = _publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication) {\n            return false;\n        }\n\n        let lcpPassHex: string | undefined;\n\n        if (isSha256Hex) {\n            lcpPassHex = lcpPass;\n        } else {\n            const checkSum = crypto.createHash(\"sha256\");\n            checkSum.update(lcpPass);\n            lcpPassHex = checkSum.digest(\"hex\");\n            // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n            // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n        }\n\n        const okay = await publication.LCP.setUserPassphrase(lcpPassHex);\n        if (!okay) {\n            debug(\"FAIL publication.LCP.setUserPassphrase()\");\n        }\n        return okay;\n    }\n}\n"]}