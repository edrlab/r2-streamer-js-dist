{"version":3,"file":"server-manifestjson.js","sourceRoot":"","sources":["../../../../src/http/server-manifestjson.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from \"crypto\";\r\nimport * as path from \"path\";\r\n\r\nimport {\r\n    getAllMediaOverlays,\r\n    mediaOverlayURLParam,\r\n    mediaOverlayURLPath,\r\n} from \"@parser/epub\";\r\nimport { encodeURIComponent_RFC3986, isHTTP } from \"@utils/http/UrlUtils\";\r\nimport { sortObject, traverseJsonObjects } from \"@utils/JsonUtils\";\r\nimport * as css2json from \"css2json\";\r\nimport * as debug_ from \"debug\";\r\nimport * as express from \"express\";\r\nimport * as jsonMarkup from \"json-markup\";\r\nimport { JSON as TAJSON } from \"ta-json\";\r\n\r\nimport { Publication } from \"@models/publication\";\r\nimport { Server } from \"./server\";\r\n\r\nconst debug = debug_(\"r2:server:manifestjson\");\r\n\r\nexport function serverManifestJson(server: Server, routerPathBase64: express.Router) {\r\n\r\n    // https://github.com/mafintosh/json-markup/blob/master/style.css\r\n    const jsonStyle = `\r\n.json-markup {\r\n    line-height: 17px;\r\n    font-size: 13px;\r\n    font-family: monospace;\r\n    white-space: pre;\r\n}\r\n.json-markup-key {\r\n    font-weight: bold;\r\n}\r\n.json-markup-bool {\r\n    color: firebrick;\r\n}\r\n.json-markup-string {\r\n    color: green;\r\n}\r\n.json-markup-null {\r\n    color: gray;\r\n}\r\n.json-markup-number {\r\n    color: blue;\r\n}\r\n`;\r\n\r\n    const routerManifestJson = express.Router({ strict: false });\r\n    // routerManifestJson.use(morgan(\"combined\"));\r\n\r\n    routerManifestJson.get([\"/\", \"/show/:jsonPath?\"],\r\n        async (req: express.Request, res: express.Response) => {\r\n\r\n            if (!req.params.pathBase64) {\r\n                req.params.pathBase64 = (req as any).pathBase64;\r\n            }\r\n            if (!req.params.lcpPass64) {\r\n                req.params.lcpPass64 = (req as any).lcpPass64;\r\n            }\r\n\r\n            const isShow = req.url.indexOf(\"/show\") >= 0 || req.query.show;\r\n            if (!req.params.jsonPath && req.query.show) {\r\n                req.params.jsonPath = req.query.show;\r\n            }\r\n\r\n            // debug(req.method);\r\n            const isHead = req.method.toLowerCase() === \"head\";\r\n            if (isHead) {\r\n                debug(\"HEAD !!!!!!!!!!!!!!!!!!!\");\r\n            }\r\n\r\n            const isCanonical = req.query.canonical && req.query.canonical === \"true\";\r\n\r\n            const isSecureHttp = req.secure ||\r\n                req.protocol === \"https\" ||\r\n                req.get(\"X-Forwarded-Proto\") === \"https\"\r\n                // (req.headers.host && req.headers.host.indexOf(\"now.sh\") >= 0) ||\r\n                // (req.hostname && req.hostname.indexOf(\"now.sh\") >= 0)\r\n                ;\r\n\r\n            const pathBase64Str = new Buffer(req.params.pathBase64, \"base64\").toString(\"utf8\");\r\n\r\n            // const fileName = path.basename(pathBase64Str);\r\n            // const ext = path.extname(fileName).toLowerCase();\r\n\r\n            let publication: Publication;\r\n            try {\r\n                publication = await server.loadOrGetCachedPublication(pathBase64Str);\r\n            } catch (err) {\r\n                debug(err);\r\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\r\n                    + err + \"</p></body></html>\");\r\n                return;\r\n            }\r\n\r\n            // dumpPublication(publication);\r\n\r\n            if (req.params.lcpPass64 && !server.disableDecryption) {\r\n                const lcpPass = new Buffer(req.params.lcpPass64, \"base64\").toString(\"utf8\");\r\n                if (publication.LCP) {\r\n                    let okay = false;\r\n                    try {\r\n                        okay = await publication.LCP.setUserPassphrase(lcpPass); // hex\r\n                    } catch (err) {\r\n                        debug(err);\r\n                        okay = false;\r\n                    }\r\n                    if (!okay) {\r\n                        const errMsg = \"FAIL publication.LCP.setUserPassphrase()\";\r\n                        debug(errMsg);\r\n                        res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\r\n                            + errMsg + \"</p></body></html>\");\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // debug(req.url); // path local to this router\r\n            // debug(req.baseUrl); // path local to above this router\r\n            // debug(req.originalUrl); // full path (req.baseUrl + req.url)\r\n            // url.parse(req.originalUrl, false).host\r\n            // req.headers.host has port, not req.hostname\r\n\r\n            const rootUrl = (isSecureHttp ? \"https://\" : \"http://\")\r\n                + req.headers.host + \"/pub/\"\r\n                + (req.params.lcpPass64 ?\r\n                    (server.lcpBeginToken + encodeURIComponent_RFC3986(req.params.lcpPass64) + server.lcpEndToken) :\r\n                    \"\")\r\n                + encodeURIComponent_RFC3986(req.params.pathBase64);\r\n            const manifestURL = rootUrl + \"/\" + \"manifest.json\";\r\n\r\n            const selfLink = publication.searchLinkByRel(\"self\");\r\n            if (!selfLink) {\r\n                publication.AddLink(\"application/webpub+json\", [\"self\"], manifestURL, false);\r\n            }\r\n\r\n            function absoluteURL(href: string): string {\r\n                return rootUrl + \"/\" + href;\r\n            }\r\n\r\n            function absolutizeURLs(jsonObj: any) {\r\n                traverseJsonObjects(jsonObj,\r\n                    (obj) => {\r\n                        if (obj.href && typeof obj.href === \"string\"\r\n                            && !isHTTP(obj.href)) {\r\n                            // obj.href_ = obj.href;\r\n                            obj.href = absoluteURL(obj.href);\r\n                        }\r\n\r\n                        if (obj[\"media-overlay\"] && typeof obj[\"media-overlay\"] === \"string\"\r\n                            && !isHTTP(obj[\"media-overlay\"])) {\r\n                            // obj[\"media-overlay_\"] = obj[\"media-overlay\"];\r\n                            obj[\"media-overlay\"] = absoluteURL(obj[\"media-overlay\"]);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            let hasMO = false;\r\n            if (publication.Spine) {\r\n                const link = publication.Spine.find((l) => {\r\n                    if (l.Properties && l.Properties.MediaOverlay) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n                if (link) {\r\n                    hasMO = true;\r\n                }\r\n            }\r\n            if (hasMO) {\r\n                const moLink = publication.searchLinkByRel(\"media-overlay\");\r\n                if (!moLink) {\r\n                    const moURL = // rootUrl + \"/\" +\r\n                        mediaOverlayURLPath +\r\n                        \"?\" + mediaOverlayURLParam + \"={path}\";\r\n                    publication.AddLink(\"application/vnd.readium.mo+json\", [\"media-overlay\"], moURL, true);\r\n                }\r\n            }\r\n\r\n            let coverImage: string | undefined;\r\n            const coverLink = publication.GetCover();\r\n            if (coverLink) {\r\n                coverImage = coverLink.Href;\r\n                if (coverImage && !isHTTP(coverImage)) {\r\n                    coverImage = absoluteURL(coverImage);\r\n                }\r\n            }\r\n\r\n            if (isShow) {\r\n                let objToSerialize: any = null;\r\n\r\n                if (req.params.jsonPath) {\r\n                    switch (req.params.jsonPath) {\r\n\r\n                        case \"all\": {\r\n                            objToSerialize = publication;\r\n                            break;\r\n                        }\r\n                        case \"cover\": {\r\n                            objToSerialize = publication.GetCover();\r\n                            break;\r\n                        }\r\n                        case \"mediaoverlays\": {\r\n                            try {\r\n                                objToSerialize = await getAllMediaOverlays(publication);\r\n                            } catch (err) {\r\n                                debug(err);\r\n                                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\r\n                                    + err + \"</p></body></html>\");\r\n                                return;\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"spine\": {\r\n                            objToSerialize = publication.Spine;\r\n                            break;\r\n                        }\r\n                        case \"pagelist\": {\r\n                            objToSerialize = publication.PageList;\r\n                            break;\r\n                        }\r\n                        case \"landmarks\": {\r\n                            objToSerialize = publication.Landmarks;\r\n                            break;\r\n                        }\r\n                        case \"links\": {\r\n                            objToSerialize = publication.Links;\r\n                            break;\r\n                        }\r\n                        case \"resources\": {\r\n                            objToSerialize = publication.Resources;\r\n                            break;\r\n                        }\r\n                        case \"toc\": {\r\n                            objToSerialize = publication.TOC;\r\n                            break;\r\n                        }\r\n                        case \"metadata\": {\r\n                            objToSerialize = publication.Metadata;\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            objToSerialize = null;\r\n                        }\r\n                    }\r\n                } else {\r\n                    objToSerialize = publication;\r\n                }\r\n\r\n                if (!objToSerialize) {\r\n                    objToSerialize = {};\r\n                }\r\n\r\n                const jsonObj = TAJSON.serialize(objToSerialize);\r\n\r\n                absolutizeURLs(jsonObj);\r\n\r\n                // const jsonStr = global.JSON.stringify(jsonObj, null, \"    \");\r\n\r\n                // // breakLength: 100  maxArrayLength: undefined\r\n                // const dumpStr = util.inspect(objToSerialize,\r\n                //     { showHidden: false, depth: 1000, colors: false, customInspect: true });\r\n\r\n                const jsonPretty = jsonMarkup(jsonObj, css2json(jsonStyle));\r\n\r\n                res.status(200).send(\"<html>\" +\r\n                    \"<head><script type=\\\"application/ld+json\\\" href=\\\"\" +\r\n                    manifestURL +\r\n                    \"\\\"></script></head>\" +\r\n                    \"<body>\" +\r\n                    \"<h1>\" + path.basename(pathBase64Str) + \"</h1>\" +\r\n                    (coverImage ? \"<img src=\\\"\" + coverImage + \"\\\" alt=\\\"\\\"/>\" : \"\") +\r\n                    \"<hr><p><pre>\" + jsonPretty + \"</pre></p>\" +\r\n                    // \"<hr><p><pre>\" + jsonStr + \"</pre></p>\" +\r\n                    // \"<p><pre>\" + dumpStr + \"</pre></p>\" +\r\n                    \"</body></html>\");\r\n            } else {\r\n                server.setResponseCORS(res);\r\n                res.set(\"Content-Type\", \"application/webpub+json; charset=utf-8\");\r\n\r\n                const publicationJsonObj = TAJSON.serialize(publication);\r\n\r\n                // absolutizeURLs(publicationJsonObj);\r\n\r\n                if (isCanonical) {\r\n                    if (publicationJsonObj.links) {\r\n                        delete publicationJsonObj.links;\r\n                    }\r\n                }\r\n\r\n                const publicationJsonStr = isCanonical ?\r\n                    global.JSON.stringify(sortObject(publicationJsonObj), null, \"\") :\r\n                    global.JSON.stringify(publicationJsonObj, null, \"  \");\r\n\r\n                const checkSum = crypto.createHash(\"sha256\");\r\n                checkSum.update(publicationJsonStr);\r\n                const hash = checkSum.digest(\"hex\");\r\n\r\n                const match = req.header(\"If-None-Match\");\r\n                if (match === hash) {\r\n                    debug(\"manifest.json cache\");\r\n                    res.status(304); // StatusNotModified\r\n                    res.end();\r\n                    return;\r\n                }\r\n\r\n                res.setHeader(\"ETag\", hash);\r\n                // res.setHeader(\"Cache-Control\", \"public,max-age=86400\");\r\n\r\n                const links = publication.GetPreFetchResources();\r\n                if (links && links.length) {\r\n                    let prefetch = \"\";\r\n                    links.forEach((l) => {\r\n                        const href = absoluteURL(l.Href);\r\n                        prefetch += \"<\" + href + \">;\" + \"rel=prefetch,\";\r\n                    });\r\n\r\n                    res.setHeader(\"Link\", prefetch);\r\n                }\r\n\r\n                res.status(200);\r\n\r\n                if (isHead) {\r\n                    res.end();\r\n                } else {\r\n                    res.send(publicationJsonStr);\r\n                }\r\n            }\r\n        });\r\n\r\n    routerPathBase64.use(\"/:pathBase64/manifest.json\", routerManifestJson);\r\n}\r\n"]}