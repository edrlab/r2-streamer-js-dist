{"version":3,"file":"server-manifestjson.js","sourceRoot":"","sources":["../../../../src/http/server-manifestjson.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from \"crypto\";\nimport * as path from \"path\";\n\nimport {\n    getAllMediaOverlays,\n    mediaOverlayURLParam,\n    mediaOverlayURLPath,\n} from \"@parser/epub\";\nimport { encodeURIComponent_RFC3986, isHTTP } from \"@utils/http/UrlUtils\";\nimport { sortObject, traverseJsonObjects } from \"@utils/JsonUtils\";\nimport * as css2json from \"css2json\";\nimport * as debug_ from \"debug\";\nimport * as express from \"express\";\nimport * as jsonMarkup from \"json-markup\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nimport { Publication } from \"@models/publication\";\nimport { Server } from \"./server\";\n\n// import { ITryLcpUserKeyResult } from \"@r2-lcp-js/parser/epub/lcp\";\n\nconst debug = debug_(\"r2:streamer#http/server-manifestjson\");\n\nexport function serverManifestJson(server: Server, routerPathBase64: express.Router) {\n\n    // https://github.com/mafintosh/json-markup/blob/master/style.css\n    const jsonStyle = `\n.json-markup {\n    line-height: 17px;\n    font-size: 13px;\n    font-family: monospace;\n    white-space: pre;\n}\n.json-markup-key {\n    font-weight: bold;\n}\n.json-markup-bool {\n    color: firebrick;\n}\n.json-markup-string {\n    color: green;\n}\n.json-markup-null {\n    color: gray;\n}\n.json-markup-number {\n    color: blue;\n}\n`;\n\n    const routerManifestJson = express.Router({ strict: false });\n    // routerManifestJson.use(morgan(\"combined\"));\n\n    routerManifestJson.get([\"/\", \"/show/:jsonPath?\"],\n        async (req: express.Request, res: express.Response) => {\n\n            if (!req.params.pathBase64) {\n                req.params.pathBase64 = (req as any).pathBase64;\n            }\n            if (!req.params.lcpPass64) {\n                req.params.lcpPass64 = (req as any).lcpPass64;\n            }\n\n            const isShow = req.url.indexOf(\"/show\") >= 0 || req.query.show;\n            if (!req.params.jsonPath && req.query.show) {\n                req.params.jsonPath = req.query.show;\n            }\n\n            // debug(req.method);\n            const isHead = req.method.toLowerCase() === \"head\";\n            if (isHead) {\n                debug(\"HEAD !!!!!!!!!!!!!!!!!!!\");\n            }\n\n            const isCanonical = req.query.canonical && req.query.canonical === \"true\";\n\n            const isSecureHttp = req.secure ||\n                req.protocol === \"https\" ||\n                req.get(\"X-Forwarded-Proto\") === \"https\"\n                // (req.headers.host && req.headers.host.indexOf(\"now.sh\") >= 0) ||\n                // (req.hostname && req.hostname.indexOf(\"now.sh\") >= 0)\n                ;\n\n            const pathBase64Str = new Buffer(req.params.pathBase64, \"base64\").toString(\"utf8\");\n\n            // const fileName = path.basename(pathBase64Str);\n            // const ext = path.extname(fileName).toLowerCase();\n\n            let publication: Publication;\n            try {\n                publication = await server.loadOrGetCachedPublication(pathBase64Str);\n            } catch (err) {\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n\n            // dumpPublication(publication);\n\n            if (req.params.lcpPass64 && !server.disableDecryption) {\n                const lcpPass = new Buffer(req.params.lcpPass64, \"base64\").toString(\"utf8\");\n                if (publication.LCP) {\n                    // let okay: ITryLcpUserKeyResult;\n                    try {\n                        // okay =\n                        await publication.LCP.tryUserKeys([lcpPass]); // hex\n                    } catch (err) {\n                        debug(err);\n                        const errMsg = \"FAIL publication.LCP.tryUserKeys(): \" + err;\n                        debug(errMsg);\n                        res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                            + errMsg + \"</p></body></html>\");\n                        return;\n                    }\n                }\n            }\n\n            // debug(req.url); // path local to this router\n            // debug(req.baseUrl); // path local to above this router\n            // debug(req.originalUrl); // full path (req.baseUrl + req.url)\n            // url.parse(req.originalUrl, false).host\n            // req.headers.host has port, not req.hostname\n\n            const rootUrl = (isSecureHttp ? \"https://\" : \"http://\")\n                + req.headers.host + \"/pub/\"\n                + (req.params.lcpPass64 ?\n                    (server.lcpBeginToken + encodeURIComponent_RFC3986(req.params.lcpPass64) + server.lcpEndToken) :\n                    \"\")\n                + encodeURIComponent_RFC3986(req.params.pathBase64);\n            const manifestURL = rootUrl + \"/\" + \"manifest.json\";\n\n            const selfLink = publication.searchLinkByRel(\"self\");\n            if (!selfLink) {\n                publication.AddLink(\"application/webpub+json\", [\"self\"], manifestURL, false);\n            }\n\n            function absoluteURL(href: string): string {\n                return rootUrl + \"/\" + href;\n            }\n\n            function absolutizeURLs(jsonObj: any) {\n                traverseJsonObjects(jsonObj,\n                    (obj) => {\n                        if (obj.href && typeof obj.href === \"string\"\n                            && !isHTTP(obj.href)) {\n                            // obj.href_ = obj.href;\n                            obj.href = absoluteURL(obj.href);\n                        }\n\n                        if (obj[\"media-overlay\"] && typeof obj[\"media-overlay\"] === \"string\"\n                            && !isHTTP(obj[\"media-overlay\"])) {\n                            // obj[\"media-overlay_\"] = obj[\"media-overlay\"];\n                            obj[\"media-overlay\"] = absoluteURL(obj[\"media-overlay\"]);\n                        }\n                    });\n            }\n\n            let hasMO = false;\n            if (publication.Spine) {\n                const link = publication.Spine.find((l) => {\n                    if (l.Properties && l.Properties.MediaOverlay) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (link) {\n                    hasMO = true;\n                }\n            }\n            if (hasMO) {\n                const moLink = publication.searchLinkByRel(\"media-overlay\");\n                if (!moLink) {\n                    const moURL = // rootUrl + \"/\" +\n                        mediaOverlayURLPath +\n                        \"?\" + mediaOverlayURLParam + \"={path}\";\n                    publication.AddLink(\"application/vnd.readium.mo+json\", [\"media-overlay\"], moURL, true);\n                }\n            }\n\n            let coverImage: string | undefined;\n            const coverLink = publication.GetCover();\n            if (coverLink) {\n                coverImage = coverLink.Href;\n                if (coverImage && !isHTTP(coverImage)) {\n                    coverImage = absoluteURL(coverImage);\n                }\n            }\n\n            if (isShow) {\n                let objToSerialize: any = null;\n\n                if (req.params.jsonPath) {\n                    switch (req.params.jsonPath) {\n\n                        case \"all\": {\n                            objToSerialize = publication;\n                            break;\n                        }\n                        case \"cover\": {\n                            objToSerialize = publication.GetCover();\n                            break;\n                        }\n                        case \"mediaoverlays\": {\n                            try {\n                                objToSerialize = await getAllMediaOverlays(publication);\n                            } catch (err) {\n                                debug(err);\n                                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                                    + err + \"</p></body></html>\");\n                                return;\n                            }\n                            break;\n                        }\n                        case \"spine\": {\n                            objToSerialize = publication.Spine;\n                            break;\n                        }\n                        case \"pagelist\": {\n                            objToSerialize = publication.PageList;\n                            break;\n                        }\n                        case \"landmarks\": {\n                            objToSerialize = publication.Landmarks;\n                            break;\n                        }\n                        case \"links\": {\n                            objToSerialize = publication.Links;\n                            break;\n                        }\n                        case \"resources\": {\n                            objToSerialize = publication.Resources;\n                            break;\n                        }\n                        case \"toc\": {\n                            objToSerialize = publication.TOC;\n                            break;\n                        }\n                        case \"metadata\": {\n                            objToSerialize = publication.Metadata;\n                            break;\n                        }\n                        default: {\n                            objToSerialize = null;\n                        }\n                    }\n                } else {\n                    objToSerialize = publication;\n                }\n\n                if (!objToSerialize) {\n                    objToSerialize = {};\n                }\n\n                const jsonObj = TAJSON.serialize(objToSerialize);\n\n                absolutizeURLs(jsonObj);\n\n                // const jsonStr = global.JSON.stringify(jsonObj, null, \"    \");\n\n                // // breakLength: 100  maxArrayLength: undefined\n                // const dumpStr = util.inspect(objToSerialize,\n                //     { showHidden: false, depth: 1000, colors: false, customInspect: true });\n\n                const jsonPretty = jsonMarkup(jsonObj, css2json(jsonStyle));\n\n                res.status(200).send(\"<html>\" +\n                    \"<head><script type=\\\"application/ld+json\\\" href=\\\"\" +\n                    manifestURL +\n                    \"\\\"></script></head>\" +\n                    \"<body>\" +\n                    \"<h1>\" + path.basename(pathBase64Str) + \"</h1>\" +\n                    (coverImage ? \"<img src=\\\"\" + coverImage + \"\\\" alt=\\\"\\\"/>\" : \"\") +\n                    \"<hr><p><pre>\" + jsonPretty + \"</pre></p>\" +\n                    // \"<hr><p><pre>\" + jsonStr + \"</pre></p>\" +\n                    // \"<p><pre>\" + dumpStr + \"</pre></p>\" +\n                    \"</body></html>\");\n            } else {\n                server.setResponseCORS(res);\n                res.set(\"Content-Type\", \"application/webpub+json; charset=utf-8\");\n\n                const publicationJsonObj = TAJSON.serialize(publication);\n\n                // absolutizeURLs(publicationJsonObj);\n\n                if (isCanonical) {\n                    if (publicationJsonObj.links) {\n                        delete publicationJsonObj.links;\n                    }\n                }\n\n                const publicationJsonStr = isCanonical ?\n                    global.JSON.stringify(sortObject(publicationJsonObj), null, \"\") :\n                    global.JSON.stringify(publicationJsonObj, null, \"  \");\n\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(publicationJsonStr);\n                const hash = checkSum.digest(\"hex\");\n\n                const match = req.header(\"If-None-Match\");\n                if (match === hash) {\n                    debug(\"manifest.json cache\");\n                    res.status(304); // StatusNotModified\n                    res.end();\n                    return;\n                }\n\n                res.setHeader(\"ETag\", hash);\n                // res.setHeader(\"Cache-Control\", \"public,max-age=86400\");\n\n                const links = publication.GetPreFetchResources();\n                if (links && links.length) {\n                    let prefetch = \"\";\n                    links.forEach((l) => {\n                        const href = absoluteURL(l.Href);\n                        prefetch += \"<\" + href + \">;\" + \"rel=prefetch,\";\n                    });\n\n                    res.setHeader(\"Link\", prefetch);\n                }\n\n                res.status(200);\n\n                if (isHead) {\n                    res.end();\n                } else {\n                    res.send(publicationJsonStr);\n                }\n            }\n        });\n\n    routerPathBase64.use(\"/:pathBase64/manifest.json\", routerManifestJson);\n}\n"]}