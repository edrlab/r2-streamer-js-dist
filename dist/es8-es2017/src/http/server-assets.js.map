{"version":3,"file":"server-assets.js","sourceRoot":"","sources":["../../../../src/http/server-assets.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as path from \"path\";\n\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { Transformers } from \"@transform/transformer\";\nimport { parseRangeHeader } from \"@utils/http/RangeUtils\";\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\n// import { CounterPassThroughStream } from \"@utils/stream/CounterPassThroughStream\";\nimport { IStreamAndLength, IZip } from \"@utils/zip/zip\";\nimport * as debug_ from \"debug\";\nimport * as express from \"express\";\nimport * as mime from \"mime-types\";\n\nimport { IRequestPayloadExtension, IRequestQueryParams, _asset, _pathBase64 } from \"./request-ext\";\nimport { Server } from \"./server\";\n\nconst debug = debug_(\"r2:streamer#http/server-assets\");\n\nexport function serverAssets(server: Server, routerPathBase64: express.Router) {\n\n    // let streamCounter = 0;\n\n    const routerAssets = express.Router({ strict: false });\n    // routerAssets.use(morgan(\"combined\"), { stream: { write: (msg: any) => debug(msg) } }));\n\n    routerAssets.get(\"/\",\n        async (req: express.Request, res: express.Response) => {\n\n            const reqparams = req.params as IRequestPayloadExtension;\n\n            if (!reqparams.pathBase64) {\n                reqparams.pathBase64 = (req as IRequestPayloadExtension).pathBase64;\n            }\n            if (!reqparams.asset) {\n                reqparams.asset = (req as IRequestPayloadExtension).asset;\n            }\n            if (!reqparams.lcpPass64) {\n                reqparams.lcpPass64 = (req as IRequestPayloadExtension).lcpPass64;\n            }\n\n            const isShow = (req.query as IRequestQueryParams).show;\n\n            // debug(req.method);\n            const isHead = req.method.toLowerCase() === \"head\";\n            if (isHead) {\n                debug(\"HEAD !!!!!!!!!!!!!!!!!!!\");\n            }\n\n            const pathBase64Str = new Buffer(reqparams.pathBase64, \"base64\").toString(\"utf8\");\n\n            // const fileName = path.basename(pathBase64Str);\n            // const ext = path.extname(fileName).toLowerCase();\n\n            let publication: Publication;\n            try {\n                publication = await server.loadOrGetCachedPublication(pathBase64Str);\n            } catch (err) {\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n\n            // dumpPublication(publication);\n\n            const zipInternal = publication.findFromInternal(\"zip\");\n            if (!zipInternal) {\n                const err = \"No publication zip!\";\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n            const zip = zipInternal.Value as IZip;\n\n            const pathInZip = reqparams.asset;\n\n            if (!zip.hasEntry(pathInZip)) {\n                const err = \"Asset not in zip! \" + pathInZip;\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n\n            let link: Link | undefined;\n\n            if ((publication.Resources || publication.Spine)\n                && pathInZip.indexOf(\"META-INF/\") !== 0\n                && !pathInZip.endsWith(\".opf\")) {\n\n                const relativePath = pathInZip;\n\n                if (publication.Resources) {\n                    link = publication.Resources.find((l) => {\n                        if (l.Href === relativePath) {\n                            return true;\n                        }\n                        return false;\n                    });\n                }\n                if (!link) {\n                    if (publication.Spine) {\n                        link = publication.Spine.find((l) => {\n                            if (l.Href === relativePath) {\n                                return true;\n                            }\n                            return false;\n                        });\n                    }\n                }\n                if (!link) {\n                    const err = \"Asset not declared in publication spine/resources!\" + relativePath;\n                    debug(err);\n                    res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                        + err + \"</p></body></html>\");\n                    return;\n                }\n            }\n\n            if (server.isSecured() && !link &&\n                (pathInZip.indexOf(\"META-INF/\") === 0 || pathInZip.endsWith(\".opf\"))\n            ) {\n                res.status(200).send(\"<html><body></body></html>\");\n                return;\n            }\n\n            let mediaType = mime.lookup(pathInZip);\n            if (link && link.TypeLink) {\n                mediaType = link.TypeLink;\n            }\n\n            const isText = (typeof mediaType === \"string\") && (\n                mediaType.indexOf(\"text/\") === 0 ||\n                mediaType.indexOf(\"application/xhtml\") === 0 ||\n                mediaType.indexOf(\"application/xml\") === 0 ||\n                mediaType.indexOf(\"application/json\") === 0 ||\n                mediaType.indexOf(\"application/svg\") === 0 ||\n                mediaType.indexOf(\"application/smil\") === 0 ||\n                mediaType.indexOf(\"+json\") > 0 ||\n                mediaType.indexOf(\"+smil\") > 0 ||\n                mediaType.indexOf(\"+svg\") > 0 ||\n                mediaType.indexOf(\"+xhtml\") > 0 ||\n                mediaType.indexOf(\"+xml\") > 0);\n\n            // const isVideoAudio = mediaType && (\n            //     mediaType.indexOf(\"audio/\") === 0 ||\n            //     mediaType.indexOf(\"video/\") === 0);\n            // if (isVideoAudio) {\n            //     debug(req.headers);\n            // }\n\n            const isEncrypted = link && link.Properties && link.Properties.Encrypted;\n            const isObfuscatedFont = isEncrypted && link &&\n                (link.Properties.Encrypted.Algorithm === \"http://ns.adobe.com/pdf/enc#RC\"\n                    || link.Properties.Encrypted.Algorithm === \"http://www.idpf.org/2008/embedding\");\n\n            const isPartialByteRangeRequest = ((req.headers && req.headers.range) ? true : false);\n\n            // if (isEncrypted && isPartialByteRangeRequest) {\n            //     const err = \"Encrypted video/audio not supported (HTTP 206 partial request byte range)\";\n            //     debug(err);\n            //     res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n            //         + err + \"</p></body></html>\");\n            //     return;\n            // }\n\n            let partialByteBegin = 0; // inclusive boundaries\n            let partialByteEnd = -1;\n            let partialByteLength = 0;\n            if (isPartialByteRangeRequest) {\n                debug(req.headers.range);\n                const ranges = parseRangeHeader(req.headers.range);\n                // debug(ranges);\n\n                if (ranges && ranges.length) {\n                    if (ranges.length > 1) {\n                        const err = \"Too many HTTP ranges: \" + req.headers.range;\n                        debug(err);\n                        res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                            + err + \"</p></body></html>\");\n                        return;\n                    }\n                    partialByteBegin = ranges[0].begin;\n                    partialByteEnd = ranges[0].end;\n\n                    if (partialByteBegin < 0) {\n                        partialByteBegin = 0;\n                    }\n                }\n            }\n\n            // debug(`${pathInZip} >> ${partialByteBegin}-${partialByteEnd}`);\n            let zipStream_: IStreamAndLength;\n            try {\n                zipStream_ = isPartialByteRangeRequest && !isEncrypted ?\n                    await zip.entryStreamRangePromise(pathInZip, partialByteBegin, partialByteEnd) :\n                    await zip.entryStreamPromise(pathInZip);\n            } catch (err) {\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n\n            const doTransform = !isEncrypted || (isObfuscatedFont || !server.disableDecryption);\n\n            if (doTransform && link) {\n\n                let transformFail = false;\n                let transformedStream: IStreamAndLength;\n                try {\n                    transformedStream = await Transformers.tryStream(\n                        publication, link,\n                        zipStream_,\n                        isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\n                } catch (err) {\n                    debug(err);\n                    res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                        + err + \"</p></body></html>\");\n                    return;\n                }\n                if (transformedStream) {\n                    if (transformedStream !== zipStream_) {\n                        debug(\"Asset transformed ok: \" + link.Href);\n                    }\n                    zipStream_ = transformedStream; // can be unchanged\n                } else {\n                    transformFail = true;\n                }\n\n                if (transformFail) {\n                    const err = \"Transform fail (encryption scheme not supported?)\";\n                    debug(err);\n                    res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                        + err + \"</p></body></html>\");\n                    return;\n                }\n            }\n\n            if (partialByteEnd < 0) {\n                partialByteEnd = zipStream_.length - 1;\n            }\n\n            partialByteLength = isPartialByteRangeRequest ?\n                partialByteEnd - partialByteBegin + 1 :\n                zipStream_.length;\n\n            if (isShow) {\n                let zipData: Buffer;\n                try {\n                    zipData = await streamToBufferPromise(zipStream_.stream);\n                } catch (err) {\n                    debug(err);\n                    res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                        + err + \"</p></body></html>\");\n                    return;\n                }\n                if (zipData) {\n                    debug(\"CHECK: \" + zipStream_.length + \" ==> \" + zipData.length);\n                }\n                res.status(200).send(\"<html><body>\" +\n                    \"<h1>\" + path.basename(pathBase64Str) + \"</h1>\" +\n                    \"<h2>\" + mediaType + \"</h2>\" +\n                    ((isText && zipData) ?\n                        (\"<p><pre>\" +\n                            zipData.toString(\"utf8\").replace(/&/g, \"&amp;\")\n                                .replace(/</g, \"&lt;\")\n                                .replace(/>/g, \"&gt;\")\n                                .replace(/\"/g, \"&quot;\")\n                                .replace(/'/g, \"&apos;\") +\n                            \"</pre></p>\")\n                        : \"<p>BINARY</p>\"\n                    ) + \"</body></html>\");\n\n                return;\n            }\n\n            server.setResponseCORS(res);\n            res.setHeader(\"Cache-Control\", \"public,max-age=86400\");\n\n            if (mediaType) {\n                res.set(\"Content-Type\", mediaType);\n                // res.type(mediaType);\n            }\n\n            res.setHeader(\"Accept-Ranges\", \"bytes\");\n\n            if (isPartialByteRangeRequest) {\n                // res.setHeader(\"Connection\", \"close\");\n                // res.setHeader(\"Transfer-Encoding\", \"chunked\");\n                res.setHeader(\"Content-Length\", `${partialByteLength}`);\n                const rangeHeader = `bytes ${partialByteBegin}-${partialByteEnd}/${zipStream_.length}`;\n                // debug(\"+++> \" + rangeHeader + \" (( \" + partialByteLength);\n                res.setHeader(\"Content-Range\", rangeHeader);\n                res.status(206);\n            } else {\n                res.setHeader(\"Content-Length\", `${zipStream_.length}`);\n                // debug(\"---> \" + zipStream_.length);\n                res.status(200);\n            }\n\n            if (isHead) {\n                res.end();\n                // } else if (zipStream_.length === 2) {\n                //     debug(\"===> BUFFER SEND (short stream)\");\n                //     let zipData: Buffer;\n                //     try {\n                //         zipData = await streamToBufferPromise(zipStream_.stream);\n                //     } catch (err) {\n                //         debug(err);\n                //         res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                //             + err + \"</p></body></html>\");\n                //         return;\n                //     }\n                //     if (zipData) {\n                //         debug(\"CHECK: \" + zipStream_.length + \" ==> \" + zipData.length);\n                //     }\n                //     res.send(zipStream_.stream);\n            } else {\n                // debug(\"===> STREAM PIPE\");\n\n                // const counterStream = new CounterPassThroughStream(++streamCounter);\n\n                zipStream_.stream\n                    // .on(\"finish\", () => {\n                    //     debug(\"ZIP FINISH \" + counterStream.id);\n                    // })\n                    // .on(\"end\", () => {\n                    //     debug(\"ZIP END \" + counterStream.id);\n                    // })\n                    // .on(\"close\", () => {\n                    //     debug(\"ZIP CLOSE \" + counterStream.id);\n                    // })\n                    // .on(\"error\", () => {\n                    //     debug(\"ZIP ERROR \" + counterStream.id);\n                    // })\n                    // .on(\"pipe\", () => {\n                    //     debug(\"ZIP PIPE \" + counterStream.id);\n                    // })\n                    // .on(\"unpipe\", () => {\n                    //     debug(\"ZIP UNPIPE \" + counterStream.id);\n                    // })\n                    // .on(\"drain\", () => {\n                    //     debug(\"ZIP DRAIN \" + counterStream.id);\n                    // })\n                    // .pipe(counterStream)\n                    // .on(\"progress\", function f() {\n                    //     debug(\"CounterPassThroughStream PROGRESS: \" +\n                    //         (this as CounterPassThroughStream).id +\n                    //         \" -- \" + (this as CounterPassThroughStream).bytesReceived);\n                    // })\n                    // .on(\"end\", function f() {\n                    //     debug(\"CounterPassThroughStream END: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // .on(\"close\", function f() {\n                    //     debug(\"CounterPassThroughStream CLOSE: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // .once(\"finish\", function f() {\n                    //     debug(\"CounterPassThroughStream FINISH: \" +\n                    //         (this as CounterPassThroughStream).id +\n                    //         \" -- \" + (this as CounterPassThroughStream).bytesReceived);\n                    // })\n                    // .on(\"error\", function f() {\n                    //     debug(\"CounterPassThroughStream ERROR: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // .on(\"pipe\", function f() {\n                    //     debug(\"CounterPassThroughStream PIPE: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // .on(\"unpipe\", function f() {\n                    //     debug(\"CounterPassThroughStream UNPIPE: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // // .on(\"drain\", function f() {\n                    // //     debug(\"CounterPassThroughStream DRAIN: \" +\n                    // //         (this as CounterPassThroughStream).id);\n                    // // })\n                    .pipe(res)\n                    // .on(\"finish\", () => {\n                    //     debug(\"RES FINISH \" + counterStream.id);\n                    // })\n                    // .on(\"end\", () => {\n                    //     debug(\"RES END \" + counterStream.id);\n                    // })\n                    .on(\"close\", () => {\n                        // debug(\"RES CLOSE \" + counterStream.id);\n\n                        res.end();\n\n                        // counterStream.unpipe(res);\n                        // counterStream.end();\n                        // if (zipStream_) {\n                        //     zipStream_.stream.unpipe(counterStream);\n                        // }\n\n                        // zipStream.close();\n                    })\n                    // .on(\"error\", () => {\n                    //     debug(\"RES ERROR \" + counterStream.id);\n                    // })\n                    // .on(\"pipe\", () => {\n                    //     debug(\"RES PIPE \" + counterStream.id);\n                    // })\n                    // .on(\"unpipe\", () => {\n                    //     debug(\"RES UNPIPE \" + counterStream.id);\n                    // })\n                    // .on(\"drain\", () => {\n                    //     debug(\"RES DRAIN \" + counterStream.id);\n                    // })\n                    ;\n            }\n        });\n\n    routerPathBase64.param(\"asset\", (req, _res, next, value, _name) => {\n        (req as IRequestPayloadExtension).asset = value;\n        next();\n    });\n\n    routerPathBase64.use(\"/:\" + _pathBase64 + \"/:\" + _asset + \"(*)\", routerAssets);\n}\n"]}