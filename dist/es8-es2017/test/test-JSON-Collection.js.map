{"version":3,"file":"test-JSON-Collection.js","sourceRoot":"","sources":["../../../test/test-JSON-Collection.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\n\nimport { BelongsTo } from \"@models/metadata-belongsto\";\nimport { Collection } from \"@models/metadata-collection\";\nimport { test } from \"ava\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nimport { setLcpNativePluginPath } from \"@parser/epub/lcp\";\nimport { initGlobals } from \"../src/init-globals\";\nimport {\n    checkType,\n    checkType_Array,\n    checkType_Object,\n    checkType_String,\n    inspect,\n    logJSON,\n} from \"./helpers\";\n\ninitGlobals();\nsetLcpNativePluginPath(path.join(process.cwd(), \"LCP/lcp.node\"));\n\n// ==========================\n\nconst colName1 = \"theName1\";\nconst colID1 = \"theID1\";\nconst col1 = new Collection();\ncol1.Name = colName1;\ncol1.Identifier = colID1;\n\nconst colName2 = \"theName2\";\nconst colID2 = \"theID2\";\nconst col2 = new Collection();\ncol2.Name = colName2;\ncol2.Identifier = colID2;\n\n// ==========================\n\ntest(\"JSON SERIALIZE: BelongsTo.Series => Collection[]\", (t) => {\n\n    const b = new BelongsTo();\n    b.Series = [];\n    b.Series.push(col1);\n    b.Series.push(col2);\n    inspect(b);\n\n    const json = TAJSON.serialize(b);\n    logJSON(json);\n\n    checkType_Array(t, json.series);\n    t.is(json.series.length, 2);\n\n    checkType_Object(t, json.series[0]);\n\n    checkType_String(t, json.series[0].name);\n    t.is(json.series[0].name, colName1);\n\n    checkType_String(t, json.series[0].identifier);\n    t.is(json.series[0].identifier, colID1);\n\n    checkType_Object(t, json.series[1]);\n\n    checkType_String(t, json.series[1].name);\n    t.is(json.series[1].name, colName2);\n\n    checkType_String(t, json.series[1].identifier);\n    t.is(json.series[1].identifier, colID2);\n});\n\ntest(\"JSON SERIALIZE: BelongsTo.Series => Collection[1] collapse-array\", (t) => {\n\n    const b = new BelongsTo();\n    b.Series = [col1];\n    inspect(b);\n\n    const json = TAJSON.serialize(b);\n    // // (normalizes single-item array to the item value itself)\n    // traverseJsonObjects(json,\n    //     (obj, parent, keyInParent) => {\n    //         if (parent && obj instanceof Array && obj.length === 1) {\n    //             parent[keyInParent] = obj[0];\n    //         }\n    //     });\n    logJSON(json);\n\n    checkType_Object(t, json.series);\n\n    checkType_String(t, json.series.name);\n    t.is(json.series.name, colName1);\n\n    checkType_String(t, json.series.identifier);\n    t.is(json.series.identifier, colID1);\n});\n\ntest(\"JSON DESERIALIZE: BelongsTo.Series => Collection[]\", (t) => {\n\n    const json: any = {};\n    json.series = [{ name: colName1, identifier: colID1 }, { name: colName2, identifier: colID2 }];\n    logJSON(json);\n\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\n    inspect(b);\n\n    checkType_Array(t, b.Series);\n    t.is(b.Series.length, 2);\n\n    checkType(t, b.Series[0], Collection);\n\n    checkType_String(t, b.Series[0].Name);\n    t.is(b.Series[0].Name, colName1);\n\n    checkType_String(t, b.Series[0].Identifier);\n    t.is(b.Series[0].Identifier, colID1);\n\n    checkType(t, b.Series[1], Collection);\n\n    checkType_String(t, b.Series[1].Name);\n    t.is(b.Series[1].Name, colName2);\n\n    checkType_String(t, b.Series[1].Identifier);\n    t.is(b.Series[1].Identifier, colID2);\n});\n\ntest(\"JSON DESERIALIZE: BelongsTo.Series => Collection[1]\", (t) => {\n\n    const json: any = {};\n    json.series = [{ name: colName1, identifier: colID1 }];\n    logJSON(json);\n\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\n    inspect(b);\n\n    checkType_Array(t, b.Series);\n    t.is(b.Series.length, 1);\n\n    checkType(t, b.Series[0], Collection);\n\n    checkType_String(t, b.Series[0].Name);\n    t.is(b.Series[0].Name, colName1);\n\n    checkType_String(t, b.Series[0].Identifier);\n    t.is(b.Series[0].Identifier, colID1);\n});\n\ntest(\"JSON DESERIALIZE: BelongsTo.Series => Collection\", (t) => {\n\n    const json: any = {};\n    json.series = { name: colName2, identifier: colID2 };\n    logJSON(json);\n\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\n    inspect(b);\n\n    checkType_Array(t, b.Series);\n    t.is(b.Series.length, 1);\n\n    checkType(t, b.Series[0], Collection);\n\n    checkType_String(t, b.Series[0].Name);\n    t.is(b.Series[0].Name, colName2);\n\n    checkType_String(t, b.Series[0].Identifier);\n    t.is(b.Series[0].Identifier, colID2);\n});\n\ntest(\"JSON DESERIALIZE: BelongsTo.Series => CollectionSTR[]\", (t) => {\n\n    const json: any = {};\n    json.series = [colName1, colName2];\n    logJSON(json);\n\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\n    inspect(b);\n\n    checkType_Array(t, b.Series);\n    t.is(b.Series.length, 2);\n\n    checkType(t, b.Series[0], Collection);\n\n    checkType_String(t, b.Series[0].Name);\n    t.is(b.Series[0].Name, colName1);\n\n    checkType(t, b.Series[1], Collection);\n\n    checkType_String(t, b.Series[1].Name);\n    t.is(b.Series[1].Name, colName2);\n});\n\ntest(\"JSON DESERIALIZE: BelongsTo.Series => CollectionSTR[1]\", (t) => {\n\n    const json: any = {};\n    json.series = [colName1];\n    logJSON(json);\n\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\n    inspect(b);\n\n    checkType_Array(t, b.Series);\n    t.is(b.Series.length, 1);\n\n    checkType(t, b.Series[0], Collection);\n\n    checkType_String(t, b.Series[0].Name);\n    t.is(b.Series[0].Name, colName1);\n});\n\ntest(\"JSON DESERIALIZE: BelongsTo.Series => CollectionSTR\", (t) => {\n\n    const json: any = {};\n    json.series = colName2;\n    logJSON(json);\n\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\n    inspect(b);\n\n    checkType_Array(t, b.Series);\n    t.is(b.Series.length, 1);\n\n    checkType(t, b.Series[0], Collection);\n\n    checkType_String(t, b.Series[0].Name);\n    t.is(b.Series[0].Name, colName2);\n});\n"]}