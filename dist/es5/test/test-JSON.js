"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var metadata_1 = require("../src/models/metadata");
var metadata_contributor_1 = require("../src/models/metadata-contributor");
var publication_1 = require("../src/models/publication");
var publication_link_1 = require("../src/models/publication-link");
var opds_entry_1 = require("../src/opds/opds1/opds-entry");
var opds2_1 = require("../src/opds/opds2/opds2");
var opds2_link_1 = require("../src/opds/opds2/opds2-link");
var opds2_publicationMetadata_1 = require("../src/opds/opds2/opds2-publicationMetadata");
var xml_js_mapper_1 = require("../src/_utils/xml-js-mapper");
var ava_1 = require("ava");
var ta_json_1 = require("ta-json");
var xmldom = require("xmldom");
var init_globals_1 = require("../src/init-globals");
var helpers_1 = require("./helpers");
init_globals_1.initGlobals();
var date = new Date();
date.setUTCFullYear(2000, 11, 31);
date.setUTCHours(23, 59, 59, 999);
var dateSTR = "2000-12-31T23:59:59.999Z";
ava_1.test("JSON SERIALIZE: OPDSPublicationMetadata.Modified => Date", function (t) {
    var md = new opds2_publicationMetadata_1.OPDSPublicationMetadata();
    md.Modified = date;
    helpers_1.inspect(md);
    var json = ta_json_1.JSON.serialize(md);
    helpers_1.logJSON(json);
    helpers_1.checkType_String(t, json.modified);
    t.is(json.modified, dateSTR);
});
ava_1.test("JSON DESERIALIZE: OPDSPublicationMetadata.Modified => Date", function (t) {
    var json = {};
    json.modified = dateSTR;
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, opds2_publicationMetadata_1.OPDSPublicationMetadata);
    helpers_1.inspect(md);
    helpers_1.checkType(t, md.Modified, Date);
    helpers_1.checkDate(t, md.Modified, date);
});
ava_1.test("XML DESERIALIZE: OPDS Entry.Updated => Date", function (t) {
    var xmlStr = "<entry xmlns=\"http://opds-spec.org/2010/catalog\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n            <atom:updated>" + dateSTR + "</atom:updated>\n        </entry>";
    console.log(xmlStr);
    var xml = new xmldom.DOMParser().parseFromString(xmlStr);
    var md = xml_js_mapper_1.XML.deserialize(xml, opds_entry_1.Entry);
    helpers_1.inspect(md);
    helpers_1.checkType(t, md.Updated, Date);
    helpers_1.checkDate(t, md.Updated, date);
});
var titleStr1 = "str1";
var titleStr2 = "str2";
var titleLang1 = "lang1";
var titleLang2 = "lang2";
var titleLangStr1 = {};
titleLangStr1[titleLang1] = titleStr1;
titleLangStr1[titleLang2] = titleStr2;
var titleLangStr2 = {};
titleLangStr2[titleLang1] = titleStr2;
titleLangStr2[titleLang2] = titleStr1;
ava_1.test("JSON SERIALIZE: OPDSPublicationMetadata.Title => string", function (t) {
    var md = new opds2_publicationMetadata_1.OPDSPublicationMetadata();
    md.Title = titleStr1;
    helpers_1.inspect(md);
    var json = ta_json_1.JSON.serialize(md);
    helpers_1.logJSON(json);
    helpers_1.checkType_String(t, json.title);
    t.is(json.title, titleStr1);
});
ava_1.test("JSON SERIALIZE: OPDSPublicationMetadata.Title => string-lang", function (t) {
    var md = new opds2_publicationMetadata_1.OPDSPublicationMetadata();
    md.Title = titleLangStr1;
    helpers_1.inspect(md);
    var json = ta_json_1.JSON.serialize(md);
    helpers_1.logJSON(json);
    helpers_1.checkType_Object(t, json.title);
    helpers_1.checkType_String(t, json.title[titleLang1]);
    t.is(json.title[titleLang1], titleStr1);
    helpers_1.checkType_String(t, json.title[titleLang2]);
    t.is(json.title[titleLang2], titleStr2);
});
ava_1.test("JSON DESERIALIZE: OPDSPublicationMetadata.Title => string", function (t) {
    var json = {};
    json.title = titleStr1;
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, opds2_publicationMetadata_1.OPDSPublicationMetadata);
    helpers_1.inspect(md);
    helpers_1.checkType_String(t, md.Title);
    t.is(md.Title, titleStr1);
});
ava_1.test("JSON DESERIALIZE: OPDSPublicationMetadata.Title => string-lang", function (t) {
    var json = {};
    json.title = titleLangStr1;
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, opds2_publicationMetadata_1.OPDSPublicationMetadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Object(t, md.Title);
    helpers_1.checkType_String(t, md.Title[titleLang1]);
    t.is(md.Title[titleLang1], titleStr1);
    helpers_1.checkType_String(t, md.Title[titleLang2]);
    t.is(md.Title[titleLang2], titleStr2);
});
ava_1.test("JSON SERIALIZE: Metadata.Title => string", function (t) {
    var md = new metadata_1.Metadata();
    md.Title = titleStr1;
    helpers_1.inspect(md);
    var json = ta_json_1.JSON.serialize(md);
    helpers_1.logJSON(json);
    helpers_1.checkType_String(t, json.title);
    t.is(json.title, titleStr1);
});
ava_1.test("JSON SERIALIZE: Metadata.Title => string-lang", function (t) {
    var md = new metadata_1.Metadata();
    md.Title = titleLangStr1;
    helpers_1.inspect(md);
    var json = ta_json_1.JSON.serialize(md);
    helpers_1.logJSON(json);
    helpers_1.checkType_Object(t, json.title);
    helpers_1.checkType_String(t, json.title[titleLang1]);
    t.is(json.title[titleLang1], titleStr1);
    helpers_1.checkType_String(t, json.title[titleLang2]);
    t.is(json.title[titleLang2], titleStr2);
});
ava_1.test("JSON DESERIALIZE: Metadata.Title => string", function (t) {
    var json = {};
    json.title = titleStr1;
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_String(t, md.Title);
    t.is(md.Title, titleStr1);
});
ava_1.test("JSON DESERIALIZE: Metadata.Title => string-lang", function (t) {
    var json = {};
    json.title = titleLangStr1;
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Object(t, md.Title);
    helpers_1.checkType_String(t, md.Title[titleLang1]);
    t.is(md.Title[titleLang1], titleStr1);
    helpers_1.checkType_String(t, md.Title[titleLang2]);
    t.is(md.Title[titleLang2], titleStr2);
});
var contName1 = "theName1";
var contRole1 = "theRole1";
var cont1 = new metadata_contributor_1.Contributor();
cont1.Name = contName1;
cont1.Role = contRole1;
var contName2 = "theName2";
var contRole2 = "theRole2";
var cont2 = new metadata_contributor_1.Contributor();
cont2.Name = contName2;
cont2.Role = contRole2;
ava_1.test("JSON SERIALIZE: Metadata.Imprint => Contributor[]", function (t) {
    var md = new metadata_1.Metadata();
    md.Imprint = [];
    md.Imprint.push(cont1);
    md.Imprint.push(cont2);
    helpers_1.inspect(md);
    var json = ta_json_1.JSON.serialize(md);
    helpers_1.logJSON(json);
    helpers_1.checkType_Array(t, json.imprint);
    t.is(json.imprint.length, 2);
    helpers_1.checkType_Object(t, json.imprint[0]);
    helpers_1.checkType_String(t, json.imprint[0].name);
    t.is(json.imprint[0].name, contName1);
    helpers_1.checkType_String(t, json.imprint[0].role);
    t.is(json.imprint[0].role, contRole1);
    helpers_1.checkType_Object(t, json.imprint[1]);
    helpers_1.checkType_String(t, json.imprint[1].name);
    t.is(json.imprint[1].name, contName2);
    helpers_1.checkType_String(t, json.imprint[1].role);
    t.is(json.imprint[1].role, contRole2);
});
ava_1.test("JSON SERIALIZE: Metadata.Imprint => Contributor[1] collapse-array", function (t) {
    var md = new metadata_1.Metadata();
    md.Imprint = [cont1];
    helpers_1.inspect(md);
    var json = ta_json_1.JSON.serialize(md);
    helpers_1.logJSON(json);
    helpers_1.checkType_Object(t, json.imprint);
    helpers_1.checkType_String(t, json.imprint.name);
    t.is(json.imprint.name, contName1);
    helpers_1.checkType_String(t, json.imprint.role);
    t.is(json.imprint.role, contRole1);
});
ava_1.test("JSON DESERIALIZE: Metadata.Imprint => Contributor[]", function (t) {
    var json = {};
    json.imprint = [{ name: contName1, role: contRole1 }, { name: contName2, role: contRole2 }];
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Array(t, md.Imprint);
    t.is(md.Imprint.length, 2);
    helpers_1.checkType(t, md.Imprint[0], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Imprint[0].Name);
    t.is(md.Imprint[0].Name, contName1);
    helpers_1.checkType_String(t, md.Imprint[0].Role);
    t.is(md.Imprint[0].Role, contRole1);
    helpers_1.checkType(t, md.Imprint[1], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Imprint[1].Name);
    t.is(md.Imprint[1].Name, contName2);
    helpers_1.checkType_String(t, md.Imprint[1].Role);
    t.is(md.Imprint[1].Role, contRole2);
});
ava_1.test("JSON DESERIALIZE: Metadata.Imprint => Contributor[1]", function (t) {
    var json = {};
    json.imprint = [{ name: contName1, role: contRole1 }];
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Array(t, md.Imprint);
    t.is(md.Imprint.length, 1);
    helpers_1.checkType(t, md.Imprint[0], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Imprint[0].Name);
    t.is(md.Imprint[0].Name, contName1);
    helpers_1.checkType_String(t, md.Imprint[0].Role);
    t.is(md.Imprint[0].Role, contRole1);
});
ava_1.test("JSON DESERIALIZE: Metadata.Imprint => Contributor", function (t) {
    var json = {};
    json.imprint = { name: contName2, role: contRole2 };
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Array(t, md.Imprint);
    t.is(md.Imprint.length, 1);
    helpers_1.checkType(t, md.Imprint[0], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Imprint[0].Name);
    t.is(md.Imprint[0].Name, contName2);
    helpers_1.checkType_String(t, md.Imprint[0].Role);
    t.is(md.Imprint[0].Role, contRole2);
});
ava_1.test("JSON DESERIALIZE: Metadata.Imprint => ContributorSTR[]", function (t) {
    var json = {};
    json.imprint = [contName1, contName2];
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Array(t, md.Imprint);
    t.is(md.Imprint.length, 2);
    helpers_1.checkType(t, md.Imprint[0], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Imprint[0].Name);
    t.is(md.Imprint[0].Name, contName1);
    helpers_1.checkType(t, md.Imprint[1], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Imprint[1].Name);
    t.is(md.Imprint[1].Name, contName2);
});
ava_1.test("JSON DESERIALIZE: Metadata.Imprint => ContributorSTR[1]", function (t) {
    var json = {};
    json.imprint = [contName1];
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Array(t, md.Imprint);
    t.is(md.Imprint.length, 1);
    helpers_1.checkType(t, md.Imprint[0], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Imprint[0].Name);
    t.is(md.Imprint[0].Name, contName1);
});
ava_1.test("JSON DESERIALIZE: Metadata.Imprint => ContributorSTR", function (t) {
    var json = {};
    json.imprint = contName2;
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Array(t, md.Imprint);
    t.is(md.Imprint.length, 1);
    helpers_1.checkType(t, md.Imprint[0], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Imprint[0].Name);
    t.is(md.Imprint[0].Name, contName2);
});
ava_1.test("JSON DESERIALIZE: Metadata.Publisher => ContributorSTR", function (t) {
    var json = {};
    json.publisher = contName2;
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Array(t, md.Publisher);
    t.is(md.Publisher.length, 1);
    helpers_1.checkType(t, md.Publisher[0], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Publisher[0].Name);
    t.is(md.Publisher[0].Name, contName2);
});
ava_1.test("JSON DESERIALIZE: Metadata.Publisher => ContributorSTR[]", function (t) {
    var json = {};
    json.publisher = [contName1, contName2];
    helpers_1.logJSON(json);
    var md = ta_json_1.JSON.deserialize(json, metadata_1.Metadata);
    helpers_1.inspect(md);
    helpers_1.checkType_Array(t, md.Publisher);
    t.is(md.Publisher.length, 2);
    helpers_1.checkType(t, md.Publisher[0], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Publisher[0].Name);
    t.is(md.Publisher[0].Name, contName1);
    helpers_1.checkType(t, md.Publisher[1], metadata_contributor_1.Contributor);
    helpers_1.checkType_String(t, md.Publisher[1].Name);
    t.is(md.Publisher[1].Name, contName2);
});
var contextStr1 = "http://context1";
var contextStr2 = "http://context2";
ava_1.test("JSON SERIALIZE: Publication.Context => string[]", function (t) {
    var pub = new publication_1.Publication();
    pub.Context = [];
    pub.Context.push(contextStr1);
    pub.Context.push(contextStr2);
    helpers_1.inspect(pub);
    var json = ta_json_1.JSON.serialize(pub);
    helpers_1.logJSON(json);
    helpers_1.checkType_Array(t, json["@context"]);
    t.is(json["@context"].length, 2);
    helpers_1.checkType_String(t, json["@context"][0]);
    t.is(json["@context"][0], contextStr1);
    helpers_1.checkType_String(t, json["@context"][1]);
    t.is(json["@context"][1], contextStr2);
});
ava_1.test("JSON SERIALIZE: Publication.Context => string[1] collapse-array", function (t) {
    var pub = new publication_1.Publication();
    pub.Context = [contextStr1];
    helpers_1.inspect(pub);
    var json = ta_json_1.JSON.serialize(pub);
    helpers_1.logJSON(json);
    helpers_1.checkType_String(t, json["@context"]);
    t.is(json["@context"], contextStr1);
});
ava_1.test("JSON DESERIALIZE: Publication.Context => string[]", function (t) {
    var json = {};
    json["@context"] = [contextStr1, contextStr2];
    helpers_1.logJSON(json);
    var pub = ta_json_1.JSON.deserialize(json, publication_1.Publication);
    helpers_1.inspect(pub);
    helpers_1.checkType_Array(t, pub.Context);
    t.is(pub.Context.length, 2);
    helpers_1.checkType_String(t, pub.Context[0]);
    t.is(pub.Context[0], contextStr1);
    helpers_1.checkType_String(t, pub.Context[1]);
    t.is(pub.Context[1], contextStr2);
});
ava_1.test("JSON DESERIALIZE: Publication.Context => string[1]", function (t) {
    var json = {};
    json["@context"] = [contextStr1];
    helpers_1.logJSON(json);
    var pub = ta_json_1.JSON.deserialize(json, publication_1.Publication);
    helpers_1.inspect(pub);
    helpers_1.checkType_Array(t, pub.Context);
    t.is(pub.Context.length, 1);
    helpers_1.checkType_String(t, pub.Context[0]);
    t.is(pub.Context[0], contextStr1);
});
ava_1.test("JSON DESERIALIZE: Publication.Context => string", function (t) {
    var json = {};
    json["@context"] = contextStr1;
    helpers_1.logJSON(json);
    var pub = ta_json_1.JSON.deserialize(json, publication_1.Publication);
    helpers_1.inspect(pub);
    helpers_1.checkType_Array(t, pub.Context);
    t.is(pub.Context.length, 1);
    helpers_1.checkType_String(t, pub.Context[0]);
    t.is(pub.Context[0], contextStr1);
});
ava_1.test("JSON SERIALIZE: OPDSFeed.Context => string[]", function (t) {
    var pub = new opds2_1.OPDSFeed();
    pub.Context = [];
    pub.Context.push(contextStr1);
    pub.Context.push(contextStr2);
    helpers_1.inspect(pub);
    var json = ta_json_1.JSON.serialize(pub);
    helpers_1.logJSON(json);
    helpers_1.checkType_Array(t, json["@context"]);
    t.is(json["@context"].length, 2);
    helpers_1.checkType_String(t, json["@context"][0]);
    t.is(json["@context"][0], contextStr1);
    helpers_1.checkType_String(t, json["@context"][1]);
    t.is(json["@context"][1], contextStr2);
});
ava_1.test("JSON SERIALIZE: OPDSFeed.Context => string[1] collapse-array", function (t) {
    var pub = new opds2_1.OPDSFeed();
    pub.Context = [contextStr1];
    helpers_1.inspect(pub);
    var json = ta_json_1.JSON.serialize(pub);
    helpers_1.logJSON(json);
    helpers_1.checkType_String(t, json["@context"]);
    t.is(json["@context"], contextStr1);
});
ava_1.test("JSON DESERIALIZE: OPDSFeed.Context => string[]", function (t) {
    var json = {};
    json["@context"] = [contextStr1, contextStr2];
    helpers_1.logJSON(json);
    var pub = ta_json_1.JSON.deserialize(json, opds2_1.OPDSFeed);
    helpers_1.inspect(pub);
    helpers_1.checkType_Array(t, pub.Context);
    t.is(pub.Context.length, 2);
    helpers_1.checkType_String(t, pub.Context[0]);
    t.is(pub.Context[0], contextStr1);
    helpers_1.checkType_String(t, pub.Context[1]);
    t.is(pub.Context[1], contextStr2);
});
ava_1.test("JSON DESERIALIZE: OPDSFeed.Context => string[1]", function (t) {
    var json = {};
    json["@context"] = [contextStr1];
    helpers_1.logJSON(json);
    var pub = ta_json_1.JSON.deserialize(json, opds2_1.OPDSFeed);
    helpers_1.inspect(pub);
    helpers_1.checkType_Array(t, pub.Context);
    t.is(pub.Context.length, 1);
    helpers_1.checkType_String(t, pub.Context[0]);
    t.is(pub.Context[0], contextStr1);
});
ava_1.test("JSON DESERIALIZE: OPDSFeed.Context => string", function (t) {
    var json = {};
    json["@context"] = contextStr1;
    helpers_1.logJSON(json);
    var pub = ta_json_1.JSON.deserialize(json, opds2_1.OPDSFeed);
    helpers_1.inspect(pub);
    helpers_1.checkType_Array(t, pub.Context);
    t.is(pub.Context.length, 1);
    helpers_1.checkType_String(t, pub.Context[0]);
    t.is(pub.Context[0], contextStr1);
});
var relStr1 = "rel1";
var relStr2 = "rel2";
ava_1.test("JSON SERIALIZE: OPDSLink.Rel => string[]", function (t) {
    var link = new opds2_link_1.OPDSLink();
    link.AddRel(relStr1);
    link.AddRel(relStr2);
    helpers_1.inspect(link);
    var json = ta_json_1.JSON.serialize(link);
    helpers_1.logJSON(json);
    helpers_1.checkType_Array(t, json.rel);
    t.is(json.rel.length, 2);
    helpers_1.checkType_String(t, json.rel[0]);
    t.is(json.rel[0], relStr1);
    helpers_1.checkType_String(t, json.rel[1]);
    t.is(json.rel[1], relStr2);
});
ava_1.test("JSON SERIALIZE: OPDSLink.Rel => string[] (recursive links)", function (t) {
    var link = new opds2_link_1.OPDSLink();
    link.AddRel(relStr1);
    link.AddRel(relStr2);
    var child = new opds2_link_1.OPDSLink();
    child.AddRel(relStr2);
    child.AddRel(relStr1);
    link.Children = [];
    link.Children.push(child);
    helpers_1.inspect(link);
    var json = ta_json_1.JSON.serialize(link);
    helpers_1.logJSON(json);
    helpers_1.checkType_Array(t, json.rel);
    t.is(json.rel.length, 2);
    helpers_1.checkType_String(t, json.rel[0]);
    t.is(json.rel[0], relStr1);
    helpers_1.checkType_String(t, json.rel[1]);
    t.is(json.rel[1], relStr2);
    helpers_1.checkType_Array(t, json.children);
    t.is(json.children.length, 1);
    helpers_1.checkType_Array(t, json.children[0].rel);
    t.is(json.children[0].rel.length, 2);
    helpers_1.checkType_String(t, json.children[0].rel[0]);
    t.is(json.children[0].rel[0], relStr2);
    helpers_1.checkType_String(t, json.children[0].rel[1]);
    t.is(json.children[0].rel[1], relStr1);
});
ava_1.test("JSON SERIALIZE: OPDSLink.Rel => string", function (t) {
    var link = new opds2_link_1.OPDSLink();
    link.AddRel(relStr1);
    helpers_1.inspect(link);
    var json = ta_json_1.JSON.serialize(link);
    helpers_1.logJSON(json);
    helpers_1.checkType_String(t, json.rel);
    t.is(json.rel, relStr1);
});
ava_1.test("JSON SERIALIZE: OPDSLink.Rel => string (recursive links)", function (t) {
    var link = new opds2_link_1.OPDSLink();
    link.AddRel(relStr1);
    var child = new opds2_link_1.OPDSLink();
    child.AddRel(relStr2);
    link.Children = [];
    link.Children.push(child);
    helpers_1.inspect(link);
    var json = ta_json_1.JSON.serialize(link);
    helpers_1.logJSON(json);
    helpers_1.checkType_String(t, json.rel);
    t.is(json.rel, relStr1);
    helpers_1.checkType_Array(t, json.children);
    t.is(json.children.length, 1);
    helpers_1.checkType_String(t, json.children[0].rel);
    t.is(json.children[0].rel, relStr2);
});
ava_1.test("JSON DESERIALIZE: OPDSLink.Rel => string[]", function (t) {
    var json = {};
    json.rel = [relStr1, relStr2];
    helpers_1.logJSON(json);
    var link = ta_json_1.JSON.deserialize(json, opds2_link_1.OPDSLink);
    helpers_1.inspect(link);
    helpers_1.checkType_Array(t, link.Rel);
    t.is(link.Rel.length, 2);
    helpers_1.checkType_String(t, link.Rel[0]);
    t.is(link.Rel[0], relStr1);
    helpers_1.checkType_String(t, link.Rel[1]);
    t.is(link.Rel[1], relStr2);
});
ava_1.test("JSON DESERIALIZE: OPDSLink.Rel => string[] (recursive children)", function (t) {
    var json = {};
    json.rel = [relStr1, relStr2];
    json.children = [];
    json.children.push({ rel: [relStr2, relStr1] });
    helpers_1.logJSON(json);
    var link = ta_json_1.JSON.deserialize(json, opds2_link_1.OPDSLink);
    helpers_1.inspect(link);
    helpers_1.checkType_Array(t, link.Rel);
    t.is(link.Rel.length, 2);
    helpers_1.checkType_String(t, link.Rel[0]);
    t.is(link.Rel[0], relStr1);
    helpers_1.checkType_String(t, link.Rel[1]);
    t.is(link.Rel[1], relStr2);
    helpers_1.checkType_Array(t, link.Children);
    t.is(link.Children.length, 1);
    helpers_1.checkType_Array(t, link.Children[0].Rel);
    t.is(link.Children[0].Rel.length, 2);
    helpers_1.checkType_String(t, link.Children[0].Rel[0]);
    t.is(link.Children[0].Rel[0], relStr2);
    helpers_1.checkType_String(t, link.Children[0].Rel[1]);
    t.is(link.Children[0].Rel[1], relStr1);
});
ava_1.test("JSON DESERIALIZE: OPDSLink.Rel => string[1]", function (t) {
    var json = {};
    json.rel = [relStr1];
    helpers_1.logJSON(json);
    var link = ta_json_1.JSON.deserialize(json, opds2_link_1.OPDSLink);
    helpers_1.inspect(link);
    helpers_1.checkType_Array(t, link.Rel);
    t.is(link.Rel.length, 1);
    helpers_1.checkType_String(t, link.Rel[0]);
    t.is(link.Rel[0], relStr1);
});
ava_1.test("JSON DESERIALIZE: OPDSLink.Rel => string", function (t) {
    var json = {};
    json.rel = relStr1;
    helpers_1.logJSON(json);
    var link = ta_json_1.JSON.deserialize(json, opds2_link_1.OPDSLink);
    helpers_1.inspect(link);
    helpers_1.checkType_Array(t, link.Rel);
    t.is(link.Rel.length, 1);
    helpers_1.checkType_String(t, link.Rel[0]);
    t.is(link.Rel[0], relStr1);
});
ava_1.test("JSON DESERIALIZE: OPDSLink.Rel => string (recursive children)", function (t) {
    var json = {};
    json.rel = relStr1;
    json.children = [];
    json.children.push({ rel: relStr2 });
    helpers_1.logJSON(json);
    var link = ta_json_1.JSON.deserialize(json, opds2_link_1.OPDSLink);
    helpers_1.inspect(link);
    helpers_1.checkType_Array(t, link.Rel);
    t.is(link.Rel.length, 1);
    helpers_1.checkType_String(t, link.Rel[0]);
    t.is(link.Rel[0], relStr1);
    helpers_1.checkType_Array(t, link.Children);
    t.is(link.Children.length, 1);
    helpers_1.checkType_Array(t, link.Children[0].Rel);
    t.is(link.Children[0].Rel.length, 1);
    helpers_1.checkType_String(t, link.Children[0].Rel[0]);
    t.is(link.Children[0].Rel[0], relStr2);
});
ava_1.test("JSON SERIALIZE: Publication Link.Rel => string[]", function (t) {
    var link = new publication_link_1.Link();
    link.AddRel(relStr1);
    link.AddRel(relStr2);
    helpers_1.inspect(link);
    var json = ta_json_1.JSON.serialize(link);
    helpers_1.logJSON(json);
    helpers_1.checkType_Array(t, json.rel);
    t.is(json.rel.length, 2);
    helpers_1.checkType_String(t, json.rel[0]);
    t.is(json.rel[0], relStr1);
    helpers_1.checkType_String(t, json.rel[1]);
    t.is(json.rel[1], relStr2);
});
ava_1.test("JSON SERIALIZE: Publication Link.Rel => string", function (t) {
    var link = new publication_link_1.Link();
    link.AddRel(relStr1);
    helpers_1.inspect(link);
    var json = ta_json_1.JSON.serialize(link);
    helpers_1.logJSON(json);
    helpers_1.checkType_String(t, json.rel);
    t.is(json.rel, relStr1);
});
ava_1.test("JSON DESERIALIZE: Publication Link.Rel => string[]", function (t) {
    var json = {};
    json.rel = [relStr1, relStr2];
    helpers_1.logJSON(json);
    var link = ta_json_1.JSON.deserialize(json, publication_link_1.Link);
    helpers_1.inspect(link);
    helpers_1.checkType_Array(t, link.Rel);
    t.is(link.Rel.length, 2);
    helpers_1.checkType_String(t, link.Rel[0]);
    t.is(link.Rel[0], relStr1);
    helpers_1.checkType_String(t, link.Rel[1]);
    t.is(link.Rel[1], relStr2);
});
ava_1.test("JSON DESERIALIZE: Publication Link.Rel => string[1]", function (t) {
    var json = {};
    json.rel = [relStr1];
    helpers_1.logJSON(json);
    var link = ta_json_1.JSON.deserialize(json, publication_link_1.Link);
    helpers_1.inspect(link);
    helpers_1.checkType_Array(t, link.Rel);
    t.is(link.Rel.length, 1);
    helpers_1.checkType_String(t, link.Rel[0]);
    t.is(link.Rel[0], relStr1);
});
ava_1.test("JSON DESERIALIZE: Publication Link.Rel => string", function (t) {
    var json = {};
    json.rel = relStr1;
    helpers_1.logJSON(json);
    var link = ta_json_1.JSON.deserialize(json, publication_link_1.Link);
    helpers_1.inspect(link);
    helpers_1.checkType_Array(t, link.Rel);
    t.is(link.Rel.length, 1);
    helpers_1.checkType_String(t, link.Rel[0]);
    t.is(link.Rel[0], relStr1);
});
//# sourceMappingURL=test-JSON.js.map