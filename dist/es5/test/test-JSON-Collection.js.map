{"version":3,"file":"test-JSON-Collection.js","sourceRoot":"","sources":["../../../test/test-JSON-Collection.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAE7B,iEAAuD;AACvD,mEAAyD;AACzD,2BAA2B;AAC3B,mCAAyC;AAEzC,wCAA0D;AAC1D,oDAAkD;AAClD,qCAOmB;AAEnB,0BAAW,EAAE,CAAC;AACd,4BAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;AAIpE,IAAM,QAAQ,GAAG,UAAU,CAAC;AAC5B,IAAM,MAAM,GAAG,QAAQ,CAAC;AACxB,IAAM,IAAI,GAAG,IAAI,gCAAU,EAAE,CAAC;AAC9B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;AACrB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;AAEzB,IAAM,QAAQ,GAAG,UAAU,CAAC;AAC5B,IAAM,MAAM,GAAG,QAAQ,CAAC;AACxB,IAAM,IAAI,GAAG,IAAI,gCAAU,EAAE,CAAC;AAC9B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;AACrB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;AAIzB,UAAI,CAAC,kDAAkD,EAAE,UAAC,CAAC;IAEvD,IAAM,CAAC,GAAG,IAAI,8BAAS,EAAE,CAAC;IAC1B,CAAC,CAAC,MAAM,GAAG,EAAE,CAAC;IACd,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,iBAAO,CAAC,CAAC,CAAC,CAAC;IAEX,IAAM,IAAI,GAAG,cAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACjC,iBAAO,CAAC,IAAI,CAAC,CAAC;IAEd,yBAAe,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAE5B,0BAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEpC,0BAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEpC,0BAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAExC,0BAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEpC,0BAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEpC,0BAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC;AAEH,UAAI,CAAC,kEAAkE,EAAE,UAAC,CAAC;IAEvE,IAAM,CAAC,GAAG,IAAI,8BAAS,EAAE,CAAC;IAC1B,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;IAClB,iBAAO,CAAC,CAAC,CAAC,CAAC;IAEX,IAAM,IAAI,GAAG,cAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAQjC,iBAAO,CAAC,IAAI,CAAC,CAAC;IAEd,0BAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAEjC,0BAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEjC,0BAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC;AAEH,UAAI,CAAC,oDAAoD,EAAE,UAAC,CAAC;IAEzD,IAAM,IAAI,GAAQ,EAAE,CAAC;IACrB,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;IAC/F,iBAAO,CAAC,IAAI,CAAC,CAAC;IAEd,IAAM,CAAC,GAAc,cAAM,CAAC,WAAW,CAAY,IAAI,EAAE,8BAAS,CAAC,CAAC;IACpE,iBAAO,CAAC,CAAC,CAAC,CAAC;IAEX,yBAAe,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAEzB,mBAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gCAAU,CAAC,CAAC;IAEtC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEjC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAErC,mBAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gCAAU,CAAC,CAAC;IAEtC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEjC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC;AAEH,UAAI,CAAC,qDAAqD,EAAE,UAAC,CAAC;IAE1D,IAAM,IAAI,GAAQ,EAAE,CAAC;IACrB,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;IACvD,iBAAO,CAAC,IAAI,CAAC,CAAC;IAEd,IAAM,CAAC,GAAc,cAAM,CAAC,WAAW,CAAY,IAAI,EAAE,8BAAS,CAAC,CAAC;IACpE,iBAAO,CAAC,CAAC,CAAC,CAAC;IAEX,yBAAe,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAEzB,mBAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gCAAU,CAAC,CAAC;IAEtC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEjC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC;AAEH,UAAI,CAAC,kDAAkD,EAAE,UAAC,CAAC;IAEvD,IAAM,IAAI,GAAQ,EAAE,CAAC;IACrB,IAAI,CAAC,MAAM,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;IACrD,iBAAO,CAAC,IAAI,CAAC,CAAC;IAEd,IAAM,CAAC,GAAc,cAAM,CAAC,WAAW,CAAY,IAAI,EAAE,8BAAS,CAAC,CAAC;IACpE,iBAAO,CAAC,CAAC,CAAC,CAAC;IAEX,yBAAe,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAEzB,mBAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gCAAU,CAAC,CAAC;IAEtC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEjC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC;AAEH,UAAI,CAAC,uDAAuD,EAAE,UAAC,CAAC;IAE5D,IAAM,IAAI,GAAQ,EAAE,CAAC;IACrB,IAAI,CAAC,MAAM,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACnC,iBAAO,CAAC,IAAI,CAAC,CAAC;IAEd,IAAM,CAAC,GAAc,cAAM,CAAC,WAAW,CAAY,IAAI,EAAE,8BAAS,CAAC,CAAC;IACpE,iBAAO,CAAC,CAAC,CAAC,CAAC;IAEX,yBAAe,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAEzB,mBAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gCAAU,CAAC,CAAC;IAEtC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAEjC,mBAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gCAAU,CAAC,CAAC;IAEtC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC;AAEH,UAAI,CAAC,wDAAwD,EAAE,UAAC,CAAC;IAE7D,IAAM,IAAI,GAAQ,EAAE,CAAC;IACrB,IAAI,CAAC,MAAM,GAAG,CAAC,QAAQ,CAAC,CAAC;IACzB,iBAAO,CAAC,IAAI,CAAC,CAAC;IAEd,IAAM,CAAC,GAAc,cAAM,CAAC,WAAW,CAAY,IAAI,EAAE,8BAAS,CAAC,CAAC;IACpE,iBAAO,CAAC,CAAC,CAAC,CAAC;IAEX,yBAAe,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAEzB,mBAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gCAAU,CAAC,CAAC;IAEtC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC;AAEH,UAAI,CAAC,qDAAqD,EAAE,UAAC,CAAC;IAE1D,IAAM,IAAI,GAAQ,EAAE,CAAC;IACrB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;IACvB,iBAAO,CAAC,IAAI,CAAC,CAAC;IAEd,IAAM,CAAC,GAAc,cAAM,CAAC,WAAW,CAAY,IAAI,EAAE,8BAAS,CAAC,CAAC;IACpE,iBAAO,CAAC,CAAC,CAAC,CAAC;IAEX,yBAAe,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAEzB,mBAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,gCAAU,CAAC,CAAC;IAEtC,0BAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC","sourcesContent":["import * as path from \"path\";\r\n\r\nimport { BelongsTo } from \"@models/metadata-belongsto\";\r\nimport { Collection } from \"@models/metadata-collection\";\r\nimport { test } from \"ava\";\r\nimport { JSON as TAJSON } from \"ta-json\";\r\n\r\nimport { setLcpNativePluginPath } from \"@parser/epub/lcp\";\r\nimport { initGlobals } from \"../src/init-globals\";\r\nimport {\r\n    checkType,\r\n    checkType_Array,\r\n    checkType_Object,\r\n    checkType_String,\r\n    inspect,\r\n    logJSON,\r\n} from \"./helpers\";\r\n\r\ninitGlobals();\r\nsetLcpNativePluginPath(path.join(process.cwd(), \"LCP\", \"lcp.node\"));\r\n\r\n// ==========================\r\n\r\nconst colName1 = \"theName1\";\r\nconst colID1 = \"theID1\";\r\nconst col1 = new Collection();\r\ncol1.Name = colName1;\r\ncol1.Identifier = colID1;\r\n\r\nconst colName2 = \"theName2\";\r\nconst colID2 = \"theID2\";\r\nconst col2 = new Collection();\r\ncol2.Name = colName2;\r\ncol2.Identifier = colID2;\r\n\r\n// ==========================\r\n\r\ntest(\"JSON SERIALIZE: BelongsTo.Series => Collection[]\", (t) => {\r\n\r\n    const b = new BelongsTo();\r\n    b.Series = [];\r\n    b.Series.push(col1);\r\n    b.Series.push(col2);\r\n    inspect(b);\r\n\r\n    const json = TAJSON.serialize(b);\r\n    logJSON(json);\r\n\r\n    checkType_Array(t, json.series);\r\n    t.is(json.series.length, 2);\r\n\r\n    checkType_Object(t, json.series[0]);\r\n\r\n    checkType_String(t, json.series[0].name);\r\n    t.is(json.series[0].name, colName1);\r\n\r\n    checkType_String(t, json.series[0].identifier);\r\n    t.is(json.series[0].identifier, colID1);\r\n\r\n    checkType_Object(t, json.series[1]);\r\n\r\n    checkType_String(t, json.series[1].name);\r\n    t.is(json.series[1].name, colName2);\r\n\r\n    checkType_String(t, json.series[1].identifier);\r\n    t.is(json.series[1].identifier, colID2);\r\n});\r\n\r\ntest(\"JSON SERIALIZE: BelongsTo.Series => Collection[1] collapse-array\", (t) => {\r\n\r\n    const b = new BelongsTo();\r\n    b.Series = [col1];\r\n    inspect(b);\r\n\r\n    const json = TAJSON.serialize(b);\r\n    // // (normalizes single-item array to the item value itself)\r\n    // traverseJsonObjects(json,\r\n    //     (obj, parent, keyInParent) => {\r\n    //         if (parent && obj instanceof Array && obj.length === 1) {\r\n    //             parent[keyInParent] = obj[0];\r\n    //         }\r\n    //     });\r\n    logJSON(json);\r\n\r\n    checkType_Object(t, json.series);\r\n\r\n    checkType_String(t, json.series.name);\r\n    t.is(json.series.name, colName1);\r\n\r\n    checkType_String(t, json.series.identifier);\r\n    t.is(json.series.identifier, colID1);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: BelongsTo.Series => Collection[]\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.series = [{ name: colName1, identifier: colID1 }, { name: colName2, identifier: colID2 }];\r\n    logJSON(json);\r\n\r\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\r\n    inspect(b);\r\n\r\n    checkType_Array(t, b.Series);\r\n    t.is(b.Series.length, 2);\r\n\r\n    checkType(t, b.Series[0], Collection);\r\n\r\n    checkType_String(t, b.Series[0].Name);\r\n    t.is(b.Series[0].Name, colName1);\r\n\r\n    checkType_String(t, b.Series[0].Identifier);\r\n    t.is(b.Series[0].Identifier, colID1);\r\n\r\n    checkType(t, b.Series[1], Collection);\r\n\r\n    checkType_String(t, b.Series[1].Name);\r\n    t.is(b.Series[1].Name, colName2);\r\n\r\n    checkType_String(t, b.Series[1].Identifier);\r\n    t.is(b.Series[1].Identifier, colID2);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: BelongsTo.Series => Collection[1]\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.series = [{ name: colName1, identifier: colID1 }];\r\n    logJSON(json);\r\n\r\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\r\n    inspect(b);\r\n\r\n    checkType_Array(t, b.Series);\r\n    t.is(b.Series.length, 1);\r\n\r\n    checkType(t, b.Series[0], Collection);\r\n\r\n    checkType_String(t, b.Series[0].Name);\r\n    t.is(b.Series[0].Name, colName1);\r\n\r\n    checkType_String(t, b.Series[0].Identifier);\r\n    t.is(b.Series[0].Identifier, colID1);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: BelongsTo.Series => Collection\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.series = { name: colName2, identifier: colID2 };\r\n    logJSON(json);\r\n\r\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\r\n    inspect(b);\r\n\r\n    checkType_Array(t, b.Series);\r\n    t.is(b.Series.length, 1);\r\n\r\n    checkType(t, b.Series[0], Collection);\r\n\r\n    checkType_String(t, b.Series[0].Name);\r\n    t.is(b.Series[0].Name, colName2);\r\n\r\n    checkType_String(t, b.Series[0].Identifier);\r\n    t.is(b.Series[0].Identifier, colID2);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: BelongsTo.Series => CollectionSTR[]\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.series = [colName1, colName2];\r\n    logJSON(json);\r\n\r\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\r\n    inspect(b);\r\n\r\n    checkType_Array(t, b.Series);\r\n    t.is(b.Series.length, 2);\r\n\r\n    checkType(t, b.Series[0], Collection);\r\n\r\n    checkType_String(t, b.Series[0].Name);\r\n    t.is(b.Series[0].Name, colName1);\r\n\r\n    checkType(t, b.Series[1], Collection);\r\n\r\n    checkType_String(t, b.Series[1].Name);\r\n    t.is(b.Series[1].Name, colName2);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: BelongsTo.Series => CollectionSTR[1]\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.series = [colName1];\r\n    logJSON(json);\r\n\r\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\r\n    inspect(b);\r\n\r\n    checkType_Array(t, b.Series);\r\n    t.is(b.Series.length, 1);\r\n\r\n    checkType(t, b.Series[0], Collection);\r\n\r\n    checkType_String(t, b.Series[0].Name);\r\n    t.is(b.Series[0].Name, colName1);\r\n});\r\n\r\ntest(\"JSON DESERIALIZE: BelongsTo.Series => CollectionSTR\", (t) => {\r\n\r\n    const json: any = {};\r\n    json.series = colName2;\r\n    logJSON(json);\r\n\r\n    const b: BelongsTo = TAJSON.deserialize<BelongsTo>(json, BelongsTo);\r\n    inspect(b);\r\n\r\n    checkType_Array(t, b.Series);\r\n    t.is(b.Series.length, 1);\r\n\r\n    checkType(t, b.Series[0], Collection);\r\n\r\n    checkType_String(t, b.Series[0].Name);\r\n    t.is(b.Series[0].Name, colName2);\r\n});\r\n"]}