{"version":3,"file":"transformer.js","sourceRoot":"","sources":["../../../../src/transform/transformer.ts"],"names":[],"mappings":";;;AAIA,qDAAmD;AACnD,iEAA8D;AAC9D,+DAA4D;AAkB5D;IAyBI;QACI,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IAzBa,qBAAQ,GAAtB;QACI,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC;IAClC,CAAC;IAMmB,sBAAS,GAA7B,UACI,WAAwB,EAAE,IAAU,EACpC,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EAAE,cAAsB;;;gBAChD,WAAO,YAAY,CAAC,QAAQ,EAAE,CAAC,UAAU,CACrC,WAAW,EAAE,IAAI,EACjB,MAAM,EACN,yBAAyB,EAAE,gBAAgB,EAAE,cAAc,CAAC,EAAC;;;KACpE;IAUM,0BAAG,GAAV,UAAW,WAAyB;QAChC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;IACL,CAAC;IAoBa,iCAAU,GAAxB,UACI,WAAwB,EAAE,IAAU,EACpC,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EAAE,cAAsB;;;;gBAE1C,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAC,CAAC;oBACzC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjC,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;oBACD,eAAe,GAAG,CAAC,CAAC,eAAe,CAC/B,WAAW,EAAE,IAAI,EACjB,MAAM,EACN,yBAAyB,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;oBACjE,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;wBAClB,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,CAAC,WAAW,IAAI,eAAe,CAAC,CAAC,CAAC;oBACjC,MAAM,KAAC,eAAe,EAAC;gBAC3B,CAAC;gBACD,WAAO,OAAO,CAAC,MAAM,CAAC,4BAA4B,CAAC,EAAC;;;KACvD;IAvDc,sBAAS,GAAiB,IAAI,YAAY,EAAE,CAAC;IAwDhE,mBAAC;CAAA,AA7ED,IA6EC;AA7EY,oCAAY;AA+EzB,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,2CAAmB,EAAE,CAAC,CAAC;AACvD,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,yCAAkB,EAAE,CAAC,CAAC;AACtD,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,gCAAc,EAAE,CAAC,CAAC","sourcesContent":["import { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { IStreamAndLength } from \"@utils/zip/zip\";\n\nimport { TransformerLCP } from \"./transformer-lcp\";\nimport { TransformerObfAdobe } from \"./transformer-obf-adobe\";\nimport { TransformerObfIDPF } from \"./transformer-obf-idpf\";\n\nexport interface ITransformer {\n    supports(publication: Publication, link: Link): boolean;\n\n    transformStream(\n        publication: Publication, link: Link,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number, partialByteEnd: number): Promise<IStreamAndLength>;\n    // getDecryptedSizeStream(\n    //     publication: Publication, link: Link,\n    //     stream: IStreamAndLength): Promise<number>;\n\n    // transformBuffer(publication: Publication, link: Link, data: Buffer): Promise<Buffer>;\n    // getDecryptedSizeBuffer(publication: Publication, link: Link, data: Buffer): Promise<number>;\n}\n\nexport class Transformers {\n\n    public static instance(): Transformers {\n        return Transformers._instance;\n    }\n\n    // public static async tryBuffer(publication: Publication, link: Link, data: Buffer): Promise<Buffer> {\n    //     return Transformers.instance()._tryBuffer(publication, link, data);\n    // }\n\n    public static async tryStream(\n        publication: Publication, link: Link,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number, partialByteEnd: number): Promise<IStreamAndLength> {\n        return Transformers.instance()._tryStream(\n            publication, link,\n            stream,\n            isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\n    }\n\n    private static _instance: Transformers = new Transformers();\n\n    private transformers: ITransformer[];\n\n    constructor() {\n        this.transformers = [];\n    }\n\n    public add(transformer: ITransformer) {\n        if (this.transformers.indexOf(transformer) < 0) {\n            this.transformers.push(transformer);\n        }\n    }\n\n    // private async _tryBuffer(publication: Publication, link: Link, data: Buffer): Promise<Buffer> {\n    //     let transformedData: Promise<Buffer> | undefined;\n    //     const transformer = this.transformers.find((t) => {\n    //         if (!t.supports(publication, link)) {\n    //             return false;\n    //         }\n    //         transformedData = t.transformBuffer(publication, link, data);\n    //         if (transformedData) {\n    //             return true;\n    //         }\n    //         return false;\n    //     });\n    //     if (transformer && transformedData) {\n    //         return transformedData;\n    //     }\n    //     return Promise.reject(\"transformers fail (buffer)\");\n    // }\n\n    private async _tryStream(\n        publication: Publication, link: Link,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number, partialByteEnd: number): Promise<IStreamAndLength> {\n        let transformedData: Promise<IStreamAndLength> | undefined;\n        const transformer = this.transformers.find((t) => {\n            if (!t.supports(publication, link)) {\n                return false;\n            }\n            transformedData = t.transformStream(\n                publication, link,\n                stream,\n                isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\n            if (transformedData) {\n                return true;\n            }\n            return false;\n        });\n        if (transformer && transformedData) {\n            return transformedData;\n        }\n        return Promise.reject(\"transformers fail (stream)\");\n    }\n}\n\nTransformers.instance().add(new TransformerObfAdobe());\nTransformers.instance().add(new TransformerObfIDPF());\nTransformers.instance().add(new TransformerLCP());\n"]}