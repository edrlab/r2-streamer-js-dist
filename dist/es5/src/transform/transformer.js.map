{"version":3,"file":"transformer.js","sourceRoot":"","sources":["../../../../src/transform/transformer.ts"],"names":[],"mappings":";;;AAIA,qDAAmD;AACnD,iEAA8D;AAC9D,+DAA4D;AAkB5D;IAyBI;QACI,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IAzBa,qBAAQ,GAAtB;QACI,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC;IAClC,CAAC;IAMmB,sBAAS,GAA7B,UACI,WAAwB,EAAE,IAAU,EACpC,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EAAE,cAAsB;;;gBAChD,WAAO,YAAY,CAAC,QAAQ,EAAE,CAAC,UAAU,CACrC,WAAW,EAAE,IAAI,EACjB,MAAM,EACN,yBAAyB,EAAE,gBAAgB,EAAE,cAAc,CAAC,EAAC;;;KACpE;IAUM,0BAAG,GAAV,UAAW,WAAyB;QAChC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;IACL,CAAC;IAoBa,iCAAU,GAAxB,UACI,WAAwB,EAAE,IAAU,EACpC,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EAAE,cAAsB;;;;gBAE1C,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAC,CAAC;oBACzC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;wBACjC,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;oBACD,eAAe,GAAG,CAAC,CAAC,eAAe,CAC/B,WAAW,EAAE,IAAI,EACjB,MAAM,EACN,yBAAyB,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;oBACjE,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;wBAClB,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,CAAC,WAAW,IAAI,eAAe,CAAC,CAAC,CAAC;oBACjC,MAAM,KAAC,eAAe,EAAC;gBAC3B,CAAC;gBACD,WAAO,OAAO,CAAC,MAAM,CAAC,4BAA4B,CAAC,EAAC;;;KACvD;IAvDc,sBAAS,GAAiB,IAAI,YAAY,EAAE,CAAC;IAwDhE,mBAAC;CAAA,AA7ED,IA6EC;AA7EY,oCAAY;AA+EzB,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,2CAAmB,EAAE,CAAC,CAAC;AACvD,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,yCAAkB,EAAE,CAAC,CAAC;AACtD,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,gCAAc,EAAE,CAAC,CAAC","sourcesContent":["import { Publication } from \"@models/publication\";\r\nimport { Link } from \"@models/publication-link\";\r\nimport { IStreamAndLength } from \"@utils/zip/zip\";\r\n\r\nimport { TransformerLCP } from \"./transformer-lcp\";\r\nimport { TransformerObfAdobe } from \"./transformer-obf-adobe\";\r\nimport { TransformerObfIDPF } from \"./transformer-obf-idpf\";\r\n\r\nexport interface ITransformer {\r\n    supports(publication: Publication, link: Link): boolean;\r\n\r\n    transformStream(\r\n        publication: Publication, link: Link,\r\n        stream: IStreamAndLength,\r\n        isPartialByteRangeRequest: boolean,\r\n        partialByteBegin: number, partialByteEnd: number): Promise<IStreamAndLength>;\r\n    // getDecryptedSizeStream(\r\n    //     publication: Publication, link: Link,\r\n    //     stream: IStreamAndLength): Promise<number>;\r\n\r\n    // transformBuffer(publication: Publication, link: Link, data: Buffer): Promise<Buffer>;\r\n    // getDecryptedSizeBuffer(publication: Publication, link: Link, data: Buffer): Promise<number>;\r\n}\r\n\r\nexport class Transformers {\r\n\r\n    public static instance(): Transformers {\r\n        return Transformers._instance;\r\n    }\r\n\r\n    // public static async tryBuffer(publication: Publication, link: Link, data: Buffer): Promise<Buffer> {\r\n    //     return Transformers.instance()._tryBuffer(publication, link, data);\r\n    // }\r\n\r\n    public static async tryStream(\r\n        publication: Publication, link: Link,\r\n        stream: IStreamAndLength,\r\n        isPartialByteRangeRequest: boolean,\r\n        partialByteBegin: number, partialByteEnd: number): Promise<IStreamAndLength> {\r\n        return Transformers.instance()._tryStream(\r\n            publication, link,\r\n            stream,\r\n            isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\r\n    }\r\n\r\n    private static _instance: Transformers = new Transformers();\r\n\r\n    private transformers: ITransformer[];\r\n\r\n    constructor() {\r\n        this.transformers = [];\r\n    }\r\n\r\n    public add(transformer: ITransformer) {\r\n        if (this.transformers.indexOf(transformer) < 0) {\r\n            this.transformers.push(transformer);\r\n        }\r\n    }\r\n\r\n    // private async _tryBuffer(publication: Publication, link: Link, data: Buffer): Promise<Buffer> {\r\n    //     let transformedData: Promise<Buffer> | undefined;\r\n    //     const transformer = this.transformers.find((t) => {\r\n    //         if (!t.supports(publication, link)) {\r\n    //             return false;\r\n    //         }\r\n    //         transformedData = t.transformBuffer(publication, link, data);\r\n    //         if (transformedData) {\r\n    //             return true;\r\n    //         }\r\n    //         return false;\r\n    //     });\r\n    //     if (transformer && transformedData) {\r\n    //         return transformedData;\r\n    //     }\r\n    //     return Promise.reject(\"transformers fail (buffer)\");\r\n    // }\r\n\r\n    private async _tryStream(\r\n        publication: Publication, link: Link,\r\n        stream: IStreamAndLength,\r\n        isPartialByteRangeRequest: boolean,\r\n        partialByteBegin: number, partialByteEnd: number): Promise<IStreamAndLength> {\r\n        let transformedData: Promise<IStreamAndLength> | undefined;\r\n        const transformer = this.transformers.find((t) => {\r\n            if (!t.supports(publication, link)) {\r\n                return false;\r\n            }\r\n            transformedData = t.transformStream(\r\n                publication, link,\r\n                stream,\r\n                isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\r\n            if (transformedData) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        if (transformer && transformedData) {\r\n            return transformedData;\r\n        }\r\n        return Promise.reject(\"transformers fail (stream)\");\r\n    }\r\n}\r\n\r\nTransformers.instance().add(new TransformerObfAdobe());\r\nTransformers.instance().add(new TransformerObfIDPF());\r\nTransformers.instance().add(new TransformerLCP());\r\n"]}