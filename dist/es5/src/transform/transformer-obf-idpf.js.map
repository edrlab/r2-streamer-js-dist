{"version":3,"file":"transformer-obf-idpf.js","sourceRoot":"","sources":["../../../../src/transform/transformer-obf-idpf.ts"],"names":[],"mappings":";;;AAAA,+BAAiC;AAIjC,yDAAkF;AAKlF;IAAA;IAiFA,CAAC;IAhFU,qCAAQ,GAAf,UAAgB,YAAyB,EAAE,IAAU;QACjD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,KAAK,oCAAoC,CAAC;IACxF,CAAC;IAEY,4CAAe,GAA5B,UACI,WAAwB,EAAE,IAAU,EACpC,MAAwB,EACxB,0BAAmC,EACnC,iBAAyB,EAAE,eAAuB;;;;;;;;wBAIvC,WAAM,mCAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAA;;wBAAjD,IAAI,GAAG,SAA0C,CAAC;;;;wBAElD,WAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;wBAKpB,WAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,EAAA;;wBAA1D,IAAI,GAAG,SAAmD,CAAC;;;;wBAE3D,WAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;wBAGzB,GAAG,GAAqB;4BAC1B,MAAM,EAAE,IAAI,CAAC,MAAM;4BACnB,KAAK,EAAE;;oCACH,WAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAC;;iCAC/B;4BACD,MAAM,EAAE,4BAAc,CAAC,IAAI,CAAC;yBAC/B,CAAC;wBACF,WAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAC;;;;KAC/B;IAEa,4CAAe,GAA7B,UAA8B,WAAwB,EAAE,KAAW,EAAE,IAAY;;;;gBAEzE,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAC5C,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBAE3B,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBAC3C,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAGjB,GAAG,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;gBAExB,YAAY,GAAG,IAAI,CAAC;gBACpB,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;gBAElD,GAAG,CAAC,CAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC;oBAEpC,aAAa,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChE,CAAC;gBAEK,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBAClD,WAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC,CAAC,EAAC;;;KAC5E;IAyBL,yBAAC;AAAD,CAAC,AAjFD,IAiFC;AAjFY,gDAAkB","sourcesContent":["import * as crypto from \"crypto\";\r\n\r\nimport { Publication } from \"@models/publication\";\r\nimport { Link } from \"@models/publication-link\";\r\nimport { bufferToStream, streamToBufferPromise } from \"@utils/stream/BufferUtils\";\r\nimport { IStreamAndLength } from \"@utils/zip/zip\";\r\n\r\nimport { ITransformer } from \"./transformer\";\r\n\r\nexport class TransformerObfIDPF implements ITransformer {\r\n    public supports(_publication: Publication, link: Link): boolean {\r\n        return link.Properties.Encrypted.Algorithm === \"http://www.idpf.org/2008/embedding\";\r\n    }\r\n\r\n    public async transformStream(\r\n        publication: Publication, link: Link,\r\n        stream: IStreamAndLength,\r\n        _isPartialByteRangeRequest: boolean,\r\n        _partialByteBegin: number, _partialByteEnd: number): Promise<IStreamAndLength> {\r\n\r\n        let data: Buffer;\r\n        try {\r\n            data = await streamToBufferPromise(stream.stream);\r\n        } catch (err) {\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        let buff: Buffer;\r\n        try {\r\n            buff = await this.transformBuffer(publication, link, data);\r\n        } catch (err) {\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const sal: IStreamAndLength = {\r\n            length: buff.length,\r\n            reset: async () => {\r\n                return Promise.resolve(sal);\r\n            },\r\n            stream: bufferToStream(buff),\r\n        };\r\n        return Promise.resolve(sal);\r\n    }\r\n\r\n    private async transformBuffer(publication: Publication, _link: Link, data: Buffer): Promise<Buffer> {\r\n\r\n        let pubID = publication.Metadata.Identifier;\r\n        pubID = pubID.replace(/\\s/g, \"\");\r\n\r\n        const checkSum = crypto.createHash(\"sha1\");\r\n        checkSum.update(pubID);\r\n        // const hash = checkSum.digest(\"hex\");\r\n        // console.log(hash);\r\n        const key = checkSum.digest();\r\n\r\n        const prefixLength = 1040;\r\n        const zipDataPrefix = data.slice(0, prefixLength);\r\n\r\n        for (let i = 0; i < prefixLength; i++) {\r\n            /* tslint:disable:no-bitwise */\r\n            zipDataPrefix[i] = zipDataPrefix[i] ^ (key[i % key.length]);\r\n        }\r\n\r\n        const zipDataRemainder = data.slice(prefixLength);\r\n        return Promise.resolve(Buffer.concat([zipDataPrefix, zipDataRemainder]));\r\n    }\r\n\r\n    // private async getDecryptedSizeStream(\r\n    //     publication: Publication, link: Link,\r\n    //     stream: IStreamAndLength): Promise<number> {\r\n    //     let sal: IStreamAndLength;\r\n    //     try {\r\n    //         sal = await this.transformStream(publication, link, stream, false, 0, 0);\r\n    //     } catch (err) {\r\n    //         console.log(err);\r\n    //         return Promise.reject(\"WTF?\");\r\n    //     }\r\n    //     return Promise.resolve(sal.length);\r\n    // }\r\n\r\n    // public async getDecryptedSizeBuffer(publication: Publication, link: Link, data: Buffer): Promise<number> {\r\n    //     let buff: Buffer;\r\n    //     try {\r\n    //         buff = await this.transformBuffer(publication, link, data);\r\n    //     } catch (err) {\r\n    //         console.log(err);\r\n    //         return Promise.reject(\"WTF?\");\r\n    //     }\r\n    //     return Promise.resolve(buff.length);\r\n    // }\r\n}\r\n"]}