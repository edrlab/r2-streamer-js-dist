{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/parser/epub/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from \"crypto\";\n\nimport * as debug_ from \"debug\";\n// https://github.com/edcarroll/ta-json\nimport {\n    JsonElementType,\n    JsonObject,\n    JsonProperty,\n} from \"ta-json\";\n\nimport { LCPBasicProfileCertificate } from \"./lcp-certificate\";\nimport { Encryption } from \"./lcp-encryption\";\nimport { Link } from \"./lcp-link\";\nimport { Rights } from \"./lcp-rights\";\nimport { Signature } from \"./lcp-signature\";\nimport { User } from \"./lcp-user\";\n\nconst AES_BLOCK_SIZE = 16;\n\nconst debug = debug_(\"r2:publication:lcp\");\n\n@JsonObject()\nexport class LCP {\n    @JsonProperty(\"id\")\n    public ID: string;\n\n    @JsonProperty(\"provider\")\n    public Provider: string;\n\n    @JsonProperty(\"issued\")\n    public Issued: Date;\n\n    @JsonProperty(\"updated\")\n    public Updated: Date;\n\n    @JsonProperty(\"encryption\")\n    public Encryption: Encryption;\n\n    @JsonProperty(\"rights\")\n    public Rights: Rights;\n\n    @JsonProperty(\"user\")\n    public User: User;\n\n    @JsonProperty(\"signature\")\n    public Signature: Signature;\n\n    @JsonProperty(\"links\")\n    @JsonElementType(Link)\n    public Links: Link[];\n\n    public ZipPath: string;\n\n    public ContentKey: Buffer | undefined;\n    private userPassphraseHex: string | undefined;\n    // hexadecimal encoding\n    public setUserPassphrase(pass: string): boolean {\n        this.userPassphraseHex = pass;\n        this.ContentKey = undefined;\n\n        const check = this.Encryption.Profile === \"http://readium.org/lcp/basic-profile\"\n            && this.Encryption.UserKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#sha256\"\n            && this.Encryption.ContentKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"\n            ;\n        if (!check) {\n            debug(\"Incorrect LCP fields.\");\n            debug(this.Encryption.Profile);\n            debug(this.Encryption.ContentKey.Algorithm);\n            debug(this.Encryption.UserKey.Algorithm);\n            return false;\n        }\n\n        // const userKey = forge.util.hexToBytes(passPhrase);\n        const userKey = new Buffer(this.userPassphraseHex, \"hex\");\n\n        const keyCheck = new Buffer(this.Encryption.UserKey.KeyCheck, \"base64\");\n        // .toString(\"binary\");\n\n        // const keyCheck_ = forge.util.decode64(lcp.Encryption.UserKey.KeyCheck);\n        // if (keyCheck !== keyCheck_) {\n        //     console.log(`ERROR LCP.Encryption.UserKey.KeyCheck base64: ${keyCheck} !== ${keyCheck_}`);\n        // }\n        // publication.AddToInternal(\"lcp_user_key_check\", keyCheck);\n        // console.log(\"---LCP Encryption.UserKey.KeyCheck BASE64 decoded (forge BYTES TO HEX): \"\n        //     + forge.util.bytesToHex(keyCheck));\n\n        const encryptedLicenseID = keyCheck;\n\n        // const iv = encryptedLicenseID.substring(0, AES_BLOCK_SIZE);\n        const iv = encryptedLicenseID.slice(0, AES_BLOCK_SIZE);\n\n        // console.log(\"=============== LCP ID\");\n        // console.log(lcp.ID);\n        // const lcpIDbuff = forge.util.createBuffer(lcp.ID, \"utf8\");\n        // console.log(lcpIDbuff.toHex());\n        // console.log(lcpIDbuff.toString());\n        // console.log(lcpIDbuff.bytes());\n\n        // const aesCbcCipher = (forge as any).cipher.createCipher(\"AES-CBC\", userKey);\n        // aesCbcCipher.start({ iv, additionalData_: \"binary-encoded string\" });\n        // aesCbcCipher.update(lcpIDbuff);\n        // aesCbcCipher.finish();\n        // console.log(\"=============== LCP CYPHER\");\n        // // breakLength: 100  maxArrayLength: undefined\n        // console.log(util.inspect(aesCbcCipher.output,\n        //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n        // console.log(aesCbcCipher.output.bytes());\n        // console.log(aesCbcCipher.output.toHex());\n        // // console.log(aesCbcCipher.output.toString());\n\n        const encrypted = encryptedLicenseID.slice(AES_BLOCK_SIZE);\n\n        const decrypteds: Buffer[] = [];\n        const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\n            userKey,\n            iv);\n        decryptStream.setAutoPadding(false);\n        const buff1 = decryptStream.update(encrypted);\n        // debug(buff1.toString(\"hex\"));\n        if (buff1) {\n            decrypteds.push(buff1);\n        }\n        const buff2 = decryptStream.final();\n        // debug(buff2.toString(\"hex\"));\n        if (buff2) {\n            decrypteds.push(buff2);\n        }\n        const decrypted = Buffer.concat(decrypteds);\n\n        const nPaddingBytes = decrypted[decrypted.length - 1];\n        const size = encrypted.length - nPaddingBytes;\n\n        const decryptedOut = decrypted.slice(0, size).toString(\"utf8\");\n\n        // const encrypted = encryptedLicenseID.substring(AES_BLOCK_SIZE);\n        // const toDecrypt = forge.util.createBuffer(encrypted, \"binary\");\n        // // const toDecrypt = aesCbcCipher.output;\n        // const aesCbcDecipher = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n        // aesCbcDecipher.start({ iv, additionalData_: \"binary-encoded string\" });\n        // aesCbcDecipher.update(toDecrypt);\n        // aesCbcDecipher.finish();\n\n        // // console.log(\"=============== LCP DECYPHER\");\n        // // // breakLength: 100  maxArrayLength: undefined\n        // // console.log(util.inspect(aesCbcDecipher.output,\n        // //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\n        // // console.log(aesCbcDecipher.output.bytes());\n        // // console.log(aesCbcDecipher.output.toHex());\n        // // // console.log(aesCbcDecipher.output.toString());\n        // const decryptedOut = aesCbcDecipher.output.toString();\n\n        if (this.ID !== decryptedOut) {\n            debug(\"Failed LCP ID check.\");\n            return false;\n        }\n\n        const encryptedContentKey =\n            new Buffer(this.Encryption.ContentKey.EncryptedValue, \"base64\");\n        // .toString(\"binary\");\n\n        // const iv2 = encryptedContentKey.substring(0, AES_BLOCK_SIZE);\n        const iv2 = encryptedContentKey.slice(0, AES_BLOCK_SIZE);\n\n        const encrypted2 = encryptedContentKey.slice(AES_BLOCK_SIZE);\n\n        const decrypteds2: Buffer[] = [];\n        const decryptStream2 = crypto.createDecipheriv(\"aes-256-cbc\",\n            userKey,\n            iv2);\n        decryptStream2.setAutoPadding(false);\n        const buff1_ = decryptStream2.update(encrypted2);\n        // debug(buff1.toString(\"hex\"));\n        if (buff1_) {\n            decrypteds2.push(buff1_);\n        }\n        const buff2_ = decryptStream2.final();\n        // debug(buff2.toString(\"hex\"));\n        if (buff2_) {\n            decrypteds2.push(buff2_);\n        }\n        const decrypted2 = Buffer.concat(decrypteds2);\n\n        const nPaddingBytes2 = decrypted2[decrypted2.length - 1];\n        const size2 = encrypted2.length - nPaddingBytes2;\n\n        this.ContentKey = decrypted2.slice(0, size2); // .toString(\"binary\");\n\n        // const encrypted2 = encryptedContentKey.substring(AES_BLOCK_SIZE);\n        // const toDecrypt2 =\n        //     forge.util.createBuffer(encrypted2, \"binary\");\n        // // const toDecrypt = aesCbcCipher.output;\n        // const aesCbcDecipher2 = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\n        // aesCbcDecipher2.start({ iv: iv2, additionalData_: \"binary-encoded string\" });\n        // aesCbcDecipher2.update(toDecrypt2);\n        // aesCbcDecipher2.finish();\n        // const contentKey = new Buffer(aesCbcDecipher2.output.bytes());\n\n        // let userKey: string | undefined;\n        // const lcpPass = this.findFromInternal(\"lcp_user_pass_hash\");\n\n        // if (lcpPass) {\n        //     userKey = lcpPass.Value; // basic profile: user passphrase SHA256 hash digest\n        // } else {\n        //     const userPassPhrase = \"dan\"; // testing with my own WasteLand sample (LCP basic profile)\n        //     const sha256 = forge.md.sha256.create();\n        //     sha256.update(userPassPhrase, \"utf8\");\n        //     const digest = sha256.digest();\n        //     userKey = digest.bytes(); // 32 bytes => AES-256 key\n        //     // publication.AddToInternal(\"lcp_user_key\", userKey);\n        //     // console.log(\"---LCP user key == passphrase + SHA256 digest HEX: \"\n        //     //     + digest.toHex() + \" // \" + userKey.length);\n        // }\n\n        return true;\n    }\n\n    public checkCertificate() {\n        debug(LCPBasicProfileCertificate);\n    }\n}\n"]}