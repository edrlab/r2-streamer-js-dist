{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/parser/epub/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as bind from \"bindings\";\r\nimport * as crypto from \"crypto\";\r\nimport * as fs from \"fs\";\r\nimport * as path from \"path\";\r\n\r\nimport * as debug_ from \"debug\";\r\n// https://github.com/edcarroll/ta-json\r\nimport {\r\n    JsonElementType,\r\n    JsonObject,\r\n    JsonProperty,\r\n} from \"ta-json\";\r\n\r\nimport { DUMMY_CRL } from \"./lcp-certificate\";\r\nimport { Encryption } from \"./lcp-encryption\";\r\nimport { Link } from \"./lcp-link\";\r\nimport { Rights } from \"./lcp-rights\";\r\nimport { Signature } from \"./lcp-signature\";\r\nimport { User } from \"./lcp-user\";\r\n\r\nconst AES_BLOCK_SIZE = 16;\r\n\r\nconst debug = debug_(\"r2:publication:lcp\");\r\n\r\nlet LCP_NATIVE_PLUGIN_PATH = path.join(process.cwd(), \"LCP\", \"lcp.node\");\r\nexport function setLcpNativePluginPath(filepath: string): boolean {\r\n    LCP_NATIVE_PLUGIN_PATH = filepath;\r\n    debug(LCP_NATIVE_PLUGIN_PATH);\r\n\r\n    const exists = fs.existsSync(LCP_NATIVE_PLUGIN_PATH);\r\n    debug(\"LCP NATIVE PLUGIN: \" + (exists ? \"OKAY\" : \"MISSING\"));\r\n    return exists;\r\n}\r\n\r\n@JsonObject()\r\nexport class LCP {\r\n    @JsonProperty(\"id\")\r\n    public ID: string;\r\n\r\n    @JsonProperty(\"provider\")\r\n    public Provider: string;\r\n\r\n    @JsonProperty(\"issued\")\r\n    public Issued: Date;\r\n\r\n    @JsonProperty(\"updated\")\r\n    public Updated: Date;\r\n\r\n    @JsonProperty(\"encryption\")\r\n    public Encryption: Encryption;\r\n\r\n    @JsonProperty(\"rights\")\r\n    public Rights: Rights;\r\n\r\n    @JsonProperty(\"user\")\r\n    public User: User;\r\n\r\n    @JsonProperty(\"signature\")\r\n    public Signature: Signature;\r\n\r\n    @JsonProperty(\"links\")\r\n    @JsonElementType(Link)\r\n    public Links: Link[];\r\n\r\n    public ZipPath: string;\r\n    public JsonSource: string;\r\n\r\n    public LSDJson: any;\r\n\r\n    // JS impl\r\n    public ContentKey: Buffer | undefined;\r\n\r\n    // Native impl\r\n    private _usesNativeNodePlugin: boolean | undefined = undefined;\r\n    private _lcpNative: any | undefined;\r\n    private _lcpContext: any | undefined;\r\n\r\n    private userPassphraseHex: string | undefined;\r\n\r\n    public isNativeNodePlugin(): boolean {\r\n        this.init();\r\n        return this._usesNativeNodePlugin as boolean;\r\n    }\r\n\r\n    public isReady(): boolean {\r\n        if (this.isNativeNodePlugin()) {\r\n            return typeof this._lcpContext !== \"undefined\";\r\n        }\r\n        return typeof this.ContentKey !== \"undefined\";\r\n    }\r\n\r\n    public init() {\r\n\r\n        if (typeof this._usesNativeNodePlugin !== \"undefined\") {\r\n            return;\r\n        }\r\n\r\n        this.ContentKey = undefined;\r\n        this._lcpContext = undefined;\r\n\r\n        if (fs.existsSync(LCP_NATIVE_PLUGIN_PATH)) {\r\n            debug(\"LCP _usesNativeNodePlugin\");\r\n            const filePath = path.dirname(LCP_NATIVE_PLUGIN_PATH);\r\n            const fileName = path.basename(LCP_NATIVE_PLUGIN_PATH);\r\n            debug(filePath);\r\n            debug(fileName);\r\n            this._usesNativeNodePlugin = true;\r\n            this._lcpNative = bind({\r\n                bindings: fileName,\r\n                module_root: filePath,\r\n                try: [[\r\n                    \"module_root\",\r\n                    \"bindings\",\r\n                ]],\r\n            });\r\n        } else {\r\n            debug(\"LCP JS impl\");\r\n            this._usesNativeNodePlugin = false;\r\n            this._lcpNative = undefined;\r\n        }\r\n    }\r\n\r\n    public async decrypt(encryptedContent: Buffer): Promise<Buffer> {\r\n        // this.init();\r\n        if (!this.isNativeNodePlugin()) {\r\n            return Promise.reject(\"direct decrypt buffer only for native plugin\");\r\n        }\r\n        if (!this._lcpContext) {\r\n            return Promise.reject(\"LCP context not initialized (needs setUserPassphrase)\");\r\n        }\r\n\r\n        return new Promise<Buffer>((resolve, reject) => {\r\n\r\n            this._lcpNative.decrypt(\r\n                this._lcpContext,\r\n                encryptedContent,\r\n                (er: any, decryptedContent: any) => {\r\n                    if (er) {\r\n                        debug(er);\r\n                        reject(er);\r\n                        return;\r\n                    }\r\n                    const padding = decryptedContent[decryptedContent.length - 1];\r\n                    // debug(padding);\r\n                    // const buff = Buffer.from(\r\n                    //     decryptedContent,\r\n                    //     0,\r\n                    //     decryptedContent.length - padding);\r\n                    const buff = decryptedContent.slice(0, decryptedContent.length - padding);\r\n                    resolve(buff);\r\n                },\r\n            );\r\n        });\r\n    }\r\n\r\n    public async setUserPassphrase(pass: string): Promise<boolean> {\r\n        this.init();\r\n\r\n        this.userPassphraseHex = pass;\r\n        // debug(this.userPassphraseHex);\r\n        if (!this.userPassphraseHex) {\r\n            return false;\r\n        }\r\n\r\n        const check = (this.Encryption.Profile === \"http://readium.org/lcp/basic-profile\"\r\n            || this.Encryption.Profile === \"http://readium.org/lcp/profile-1.0\")\r\n            && this.Encryption.UserKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#sha256\"\r\n            && this.Encryption.ContentKey.Algorithm === \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"\r\n            ;\r\n        if (!check) {\r\n            debug(\"Incorrect LCP fields.\");\r\n            debug(this.Encryption.Profile);\r\n            debug(this.Encryption.ContentKey.Algorithm);\r\n            debug(this.Encryption.UserKey.Algorithm);\r\n\r\n            return false;\r\n            // return Promise.resolve(false);\r\n        }\r\n\r\n        if (this._usesNativeNodePlugin) {\r\n\r\n            return new Promise<boolean>((resolve, _reject) => {\r\n\r\n                this._lcpNative.findOneValidPassphrase(\r\n                    this.JsonSource,\r\n                    [this.userPassphraseHex],\r\n                    (err: any, validHashedPassphrase: any) => {\r\n                        if (err) {\r\n                            debug(err);\r\n                            resolve(false);\r\n                        } else {\r\n                            // debug(validHashedPassphrase);\r\n                            // resolve(true);\r\n\r\n                            this._lcpNative.createContext(\r\n                                this.JsonSource,\r\n                                validHashedPassphrase,\r\n                                DUMMY_CRL,\r\n                                (erro: any, context: any) => {\r\n                                    if (erro) {\r\n                                        debug(erro);\r\n                                        resolve(false);\r\n                                        return;\r\n                                    }\r\n\r\n                                    // debug(context);\r\n                                    this._lcpContext = context;\r\n\r\n                                    // const userKey = new Buffer(this.userPassphraseHex as string, \"hex\");\r\n                                    // const buff = new Buffer(context.encryptedContentKey, \"hex\");\r\n                                    // const iv = buff.slice(0, AES_BLOCK_SIZE);\r\n                                    // const encrypted = buff.slice(AES_BLOCK_SIZE);\r\n                                    // const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\r\n                                    //     userKey,\r\n                                    //     iv);\r\n                                    // decryptStream.setAutoPadding(false);\r\n                                    // const decryptedContent = decryptStream.update(encrypted);\r\n                                    // const nPadding = decryptedContent[decryptedContent.length - 1];\r\n                                    // const size = decryptedContent.length - nPadding;\r\n                                    // this.ContentKey = decryptedContent.slice(0, size); // .toString(\"binary\");\r\n\r\n                                    // this._lcpNative.decrypt(\r\n                                    //     context,\r\n                                    //     buff,\r\n                                    //     (er: any, decryptedContent: any) => {\r\n                                    //         if (er) {\r\n                                    //             debug(er);\r\n                                    //             resolve(false);\r\n                                    //             return;\r\n                                    //         }\r\n                                    //         const padding = decryptedContent[decryptedContent.length - 1];\r\n                                    //         this.ContentKey = Buffer.from(\r\n                                    //             decryptedContent,\r\n                                    //             0,\r\n                                    //             decryptedContent.length - padding);\r\n                                    //         resolve(true);\r\n                                    //     },\r\n                                    // );\r\n\r\n                                    resolve(true);\r\n                                },\r\n                            );\r\n                        }\r\n                    },\r\n                );\r\n            });\r\n        } else {\r\n            // const userKey = forge.util.hexToBytes(passPhrase);\r\n            const userKey = new Buffer(this.userPassphraseHex, \"hex\");\r\n\r\n            const keyCheck = new Buffer(this.Encryption.UserKey.KeyCheck, \"base64\");\r\n            // .toString(\"binary\");\r\n\r\n            // const keyCheck_ = forge.util.decode64(lcp.Encryption.UserKey.KeyCheck);\r\n            // if (keyCheck !== keyCheck_) {\r\n            //     debug(`ERROR LCP.Encryption.UserKey.KeyCheck base64: ${keyCheck} !== ${keyCheck_}`);\r\n            // }\r\n            // publication.AddToInternal(\"lcp_user_key_check\", keyCheck);\r\n            // debug(\"---LCP Encryption.UserKey.KeyCheck BASE64 decoded (forge BYTES TO HEX): \"\r\n            //     + forge.util.bytesToHex(keyCheck));\r\n\r\n            const encryptedLicenseID = keyCheck;\r\n\r\n            // const iv = encryptedLicenseID.substring(0, AES_BLOCK_SIZE);\r\n            const iv = encryptedLicenseID.slice(0, AES_BLOCK_SIZE);\r\n\r\n            // debug(\"=============== LCP ID\");\r\n            // debug(lcp.ID);\r\n            // const lcpIDbuff = forge.util.createBuffer(lcp.ID, \"utf8\");\r\n            // debug(lcpIDbuff.toHex());\r\n            // debug(lcpIDbuff.toString());\r\n            // debug(lcpIDbuff.bytes());\r\n\r\n            // const aesCbcCipher = (forge as any).cipher.createCipher(\"AES-CBC\", userKey);\r\n            // aesCbcCipher.start({ iv, additionalData_: \"binary-encoded string\" });\r\n            // aesCbcCipher.update(lcpIDbuff);\r\n            // aesCbcCipher.finish();\r\n            // debug(\"=============== LCP CYPHER\");\r\n            // // breakLength: 100  maxArrayLength: undefined\r\n            // console.log(util.inspect(aesCbcCipher.output,\r\n            //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\r\n            // debug(aesCbcCipher.output.bytes());\r\n            // debug(aesCbcCipher.output.toHex());\r\n            // // debug(aesCbcCipher.output.toString());\r\n\r\n            const encrypted = encryptedLicenseID.slice(AES_BLOCK_SIZE);\r\n\r\n            const decrypteds: Buffer[] = [];\r\n            const decryptStream = crypto.createDecipheriv(\"aes-256-cbc\",\r\n                userKey,\r\n                iv);\r\n            decryptStream.setAutoPadding(false);\r\n            const buff1 = decryptStream.update(encrypted);\r\n            // debug(buff1.toString(\"hex\"));\r\n            if (buff1) {\r\n                decrypteds.push(buff1);\r\n            }\r\n            const buff2 = decryptStream.final();\r\n            // debug(buff2.toString(\"hex\"));\r\n            if (buff2) {\r\n                decrypteds.push(buff2);\r\n            }\r\n            const decrypted = Buffer.concat(decrypteds);\r\n\r\n            const nPaddingBytes = decrypted[decrypted.length - 1];\r\n            const size = encrypted.length - nPaddingBytes;\r\n\r\n            const decryptedOut = decrypted.slice(0, size).toString(\"utf8\");\r\n\r\n            // const encrypted = encryptedLicenseID.substring(AES_BLOCK_SIZE);\r\n            // const toDecrypt = forge.util.createBuffer(encrypted, \"binary\");\r\n            // // const toDecrypt = aesCbcCipher.output;\r\n            // const aesCbcDecipher = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\r\n            // aesCbcDecipher.start({ iv, additionalData_: \"binary-encoded string\" });\r\n            // aesCbcDecipher.update(toDecrypt);\r\n            // aesCbcDecipher.finish();\r\n\r\n            // // debug(\"=============== LCP DECYPHER\");\r\n            // // // breakLength: 100  maxArrayLength: undefined\r\n            // // console.log(util.inspect(aesCbcDecipher.output,\r\n            // //     { showHidden: false, depth: 1000, colors: true, customInspect: false }));\r\n            // // debug(aesCbcDecipher.output.bytes());\r\n            // // debug(aesCbcDecipher.output.toHex());\r\n            // // // debug(aesCbcDecipher.output.toString());\r\n            // const decryptedOut = aesCbcDecipher.output.toString();\r\n\r\n            if (this.ID !== decryptedOut) {\r\n                debug(\"Failed LCP ID check.\");\r\n\r\n                return false;\r\n                // return Promise.resolve(false);\r\n            }\r\n\r\n            const encryptedContentKey =\r\n                new Buffer(this.Encryption.ContentKey.EncryptedValue, \"base64\");\r\n            // .toString(\"binary\");\r\n\r\n            // const iv2 = encryptedContentKey.substring(0, AES_BLOCK_SIZE);\r\n            const iv2 = encryptedContentKey.slice(0, AES_BLOCK_SIZE);\r\n\r\n            const encrypted2 = encryptedContentKey.slice(AES_BLOCK_SIZE);\r\n\r\n            const decrypteds2: Buffer[] = [];\r\n            const decryptStream2 = crypto.createDecipheriv(\"aes-256-cbc\",\r\n                userKey,\r\n                iv2);\r\n            decryptStream2.setAutoPadding(false);\r\n            const buff1_ = decryptStream2.update(encrypted2);\r\n            // debug(buff1.toString(\"hex\"));\r\n            if (buff1_) {\r\n                decrypteds2.push(buff1_);\r\n            }\r\n            const buff2_ = decryptStream2.final();\r\n            // debug(buff2.toString(\"hex\"));\r\n            if (buff2_) {\r\n                decrypteds2.push(buff2_);\r\n            }\r\n            const decrypted2 = Buffer.concat(decrypteds2);\r\n\r\n            const nPaddingBytes2 = decrypted2[decrypted2.length - 1];\r\n            const size2 = encrypted2.length - nPaddingBytes2;\r\n\r\n            this.ContentKey = decrypted2.slice(0, size2); // .toString(\"binary\");\r\n\r\n            // const encrypted2 = encryptedContentKey.substring(AES_BLOCK_SIZE);\r\n            // const toDecrypt2 =\r\n            //     forge.util.createBuffer(encrypted2, \"binary\");\r\n            // // const toDecrypt = aesCbcCipher.output;\r\n            // const aesCbcDecipher2 = (forge as any).cipher.createDecipher(\"AES-CBC\", userKey);\r\n            // aesCbcDecipher2.start({ iv: iv2, additionalData_: \"binary-encoded string\" });\r\n            // aesCbcDecipher2.update(toDecrypt2);\r\n            // aesCbcDecipher2.finish();\r\n            // const contentKey = new Buffer(aesCbcDecipher2.output.bytes());\r\n\r\n            // let userKey: string | undefined;\r\n            // const lcpPass = this.findFromInternal(\"lcp_user_pass_hash\");\r\n\r\n            // if (lcpPass) {\r\n            //     userKey = lcpPass.Value; // basic profile: user passphrase SHA256 hash digest\r\n            // } else {\r\n            //     const userPassPhrase = \"dan\"; // testing with my own WasteLand sample (LCP basic profile)\r\n            //     const sha256 = forge.md.sha256.create();\r\n            //     sha256.update(userPassPhrase, \"utf8\");\r\n            //     const digest = sha256.digest();\r\n            //     userKey = digest.bytes(); // 32 bytes => AES-256 key\r\n            //     // publication.AddToInternal(\"lcp_user_key\", userKey);\r\n            //     // debug(\"---LCP user key == passphrase + SHA256 digest HEX: \"\r\n            //     //     + digest.toHex() + \" // \" + userKey.length);\r\n            // }\r\n        }\r\n\r\n        return true;\r\n        // return Promise.resolve(true);\r\n    }\r\n}\r\n"]}