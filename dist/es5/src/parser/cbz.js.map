{"version":3,"file":"cbz.js","sourceRoot":"","sources":["../../../../src/parser/cbz.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\n\nimport { Metadata } from \"@models/metadata\";\nimport { Contributor } from \"@models/metadata-contributor\";\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport { XML } from \"@utils/xml-js-mapper\";\nimport { IStreamAndLength, IZip } from \"@utils/zip/zip\";\nimport { zipLoadPromise } from \"@utils/zip/zipFactory\";\nimport * as mime from \"mime-types\";\nimport * as slugify from \"slugify\";\nimport * as xmldom from \"xmldom\";\n\nimport { ComicInfo } from \"./comicrack/comicrack\";\nimport { addCoverDimensions } from \"./epub\";\n\nexport async function CbzParsePromise(filePath: string): Promise<Publication> {\n\n    let zip: any;\n    try {\n        zip = await zipLoadPromise(filePath);\n    } catch (err) {\n        return Promise.reject(err);\n    }\n\n    if (!zip.hasEntries()) {\n        return Promise.reject(\"CBZ zip empty\");\n    }\n\n    const publication = new Publication();\n    publication.Context = [\"http://readium.org/webpub/default.jsonld\"];\n    publication.Metadata = new Metadata();\n    publication.Metadata.RDFType = \"http://schema.org/ComicIssue\";\n    publication.Metadata.Identifier = filePathToTitle(filePath);\n\n    publication.AddToInternal(\"type\", \"cbz\");\n    publication.AddToInternal(\"zip\", zip);\n\n    let comicInfoEntryName: string | undefined;\n    zip.forEachEntry((entryName: string) => {\n        // console.log(\"++ZIP: entry\");\n\n        // console.log(entryName);\n\n        const link = new Link();\n        link.Href = entryName;\n\n        const mediaType = mime.lookup(entryName);\n        if (mediaType) {\n            // console.log(mediaType);\n\n            link.TypeLink = mediaType as string;\n        } else {\n            console.log(\"!!!!!! NO MEDIA TYPE?!\");\n        }\n\n        if (link.TypeLink && link.TypeLink.startsWith(\"image/\")) {\n            if (!publication.Spine) {\n                publication.Spine = [];\n            }\n            publication.Spine.push(link);\n\n        } else if (entryName.endsWith(\"ComicInfo.xml\")) {\n            comicInfoEntryName = entryName;\n        }\n    });\n\n    if (!publication.Metadata.Title) {\n        publication.Metadata.Title = path.basename(filePath);\n    }\n\n    if (comicInfoEntryName) {\n        try {\n            const _b = await comicRackMetadata(zip, comicInfoEntryName, publication);\n            console.log(_b);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    return publication;\n}\n\nconst filePathToTitle = (filePath: string): string => {\n    const fileName = path.basename(filePath);\n    return slugify(fileName, \"_\").replace(/[\\.]/g, \"_\");\n};\n\nconst comicRackMetadata = async (zip: IZip, entryName: string, publication: Publication): Promise<void> => {\n    let comicZipStream_: IStreamAndLength | undefined;\n    try {\n        comicZipStream_ = await zip.entryStreamPromise(entryName);\n    } catch (err) {\n        console.log(err);\n        return;\n    }\n    const comicZipStream = comicZipStream_.stream;\n    let comicZipData: Buffer | undefined;\n    try {\n        comicZipData = await streamToBufferPromise(comicZipStream);\n    } catch (err) {\n        console.log(err);\n        return;\n    }\n\n    const comicXmlStr = comicZipData.toString(\"utf8\");\n    const comicXmlDoc = new xmldom.DOMParser().parseFromString(comicXmlStr);\n\n    const comicMeta = XML.deserialize<ComicInfo>(comicXmlDoc, ComicInfo);\n    comicMeta.ZipPath = entryName;\n\n    if (!publication.Metadata) {\n        publication.Metadata = new Metadata();\n    }\n\n    if (comicMeta.Writer) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Author) {\n            publication.Metadata.Author = [];\n        }\n        publication.Metadata.Author.push(cont);\n    }\n\n    if (comicMeta.Penciller) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Penciler) {\n            publication.Metadata.Penciler = [];\n        }\n        publication.Metadata.Penciler.push(cont);\n    }\n\n    if (comicMeta.Colorist) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Colorist) {\n            publication.Metadata.Colorist = [];\n        }\n        publication.Metadata.Colorist.push(cont);\n    }\n\n    if (comicMeta.Inker) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Inker) {\n            publication.Metadata.Inker = [];\n        }\n        publication.Metadata.Inker.push(cont);\n    }\n\n    if (comicMeta.Title) {\n        publication.Metadata.Title = comicMeta.Title;\n    }\n\n    if (!publication.Metadata.Title) {\n        if (comicMeta.Series) {\n            let title = comicMeta.Series;\n            if (comicMeta.Number) {\n                title = title + \" - \" + comicMeta.Number;\n            }\n            publication.Metadata.Title = title;\n        }\n    }\n\n    if (comicMeta.Pages) {\n        // no forEach(), because of await/async within the iteration body\n        // comicMeta.Pages.forEach(async (p) => {\n        for (const p of comicMeta.Pages) {\n            const l = new Link();\n            if (p.Type === \"FrontCover\") {\n                l.AddRel(\"cover\");\n                await addCoverDimensions(publication, l);\n            }\n            l.Href = publication.Spine[p.Image].Href;\n            if (p.ImageHeight) {\n                l.Height = p.ImageHeight;\n            }\n            if (p.ImageWidth) {\n                l.Width = p.ImageWidth;\n            }\n            if (p.Bookmark) {\n                l.Title = p.Bookmark;\n            }\n            if (!publication.TOC) {\n                publication.TOC = [];\n            }\n            publication.TOC.push(l);\n        }\n    }\n};\n"]}