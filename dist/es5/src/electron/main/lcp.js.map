{"version":3,"file":"lcp.js","sourceRoot":"","sources":["../../../../../src/electron/main/lcp.ts"],"names":[],"mappings":"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","sourcesContent":["import { injectFileInZip } from \"@r2-streamer-js/_utils/zip/zipInjector\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport { LCP } from \"@r2-streamer-js/parser/epub/lcp\";\nimport * as crypto from \"crypto\";\nimport * as debug_ from \"debug\";\nimport { ipcMain } from \"electron\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport { JSON as TAJSON } from \"ta-json\";\nimport { R2_EVENT_TRY_LCP_PASS, R2_EVENT_TRY_LCP_PASS_RES } from \"../common/events\";\nimport { installLsdHandler } from \"./lsd\";\nimport { IDeviceIDManager } from \"./lsd-deviceid-manager\";\n\nconst debug = debug_(\"r2:electron:main:lcp\");\n\nexport function installLcpHandler(publicationsServer: Server, deviceIDManager: IDeviceIDManager) {\n    installLsdHandler(publicationsServer, deviceIDManager);\n\n    ipcMain.on(R2_EVENT_TRY_LCP_PASS, async (\n        event: any,\n        publicationFilePath: string,\n        lcpPass: string,\n        isSha256Hex: boolean) => {\n\n        // debug(publicationFilePath);\n        // debug(lcpPass);\n        let okay = false;\n        try {\n            okay = await tryLcpPass(publicationFilePath, lcpPass, isSha256Hex);\n        } catch (err) {\n            debug(err);\n            okay = false;\n        }\n\n        let passSha256Hex: string | undefined;\n        if (okay) {\n            if (isSha256Hex) {\n                passSha256Hex = lcpPass;\n            } else {\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(lcpPass);\n                passSha256Hex = checkSum.digest(\"hex\");\n                // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n                // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n            }\n        }\n\n        event.sender.send(R2_EVENT_TRY_LCP_PASS_RES,\n            okay,\n            (okay ? \"Correct.\" : \"Please try again.\"),\n            passSha256Hex ? passSha256Hex : \"xxx\",\n        );\n    });\n\n    async function tryLcpPass(publicationFilePath: string, lcpPass: string, isSha256Hex: boolean): Promise<boolean> {\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication) {\n            return false;\n        }\n\n        let lcpPassHex: string | undefined;\n\n        if (isSha256Hex) {\n            lcpPassHex = lcpPass;\n        } else {\n            const checkSum = crypto.createHash(\"sha256\");\n            checkSum.update(lcpPass);\n            lcpPassHex = checkSum.digest(\"hex\");\n            // const lcpPass64 = new Buffer(hash).toString(\"base64\");\n            // const lcpPassHex = new Buffer(lcpPass64, \"base64\").toString(\"utf8\");\n        }\n\n        let okay = false;\n        try {\n            okay = await publication.LCP.setUserPassphrase(lcpPassHex);\n        } catch (err) {\n            debug(err);\n            okay = false;\n        }\n        if (!okay) {\n            debug(\"FAIL publication.LCP.setUserPassphrase()\");\n        }\n        return okay;\n    }\n}\n\nexport async function downloadFromLCPL(filePath: string, dir: string, destFileName: string): Promise<string[]> {\n\n    return new Promise<string[]>(async (resolve, reject) => {\n\n        const lcplStr = fs.readFileSync(filePath, { encoding: \"utf8\" });\n        // debug(lcplStr);\n        const lcplJson = global.JSON.parse(lcplStr);\n        const lcpl = TAJSON.deserialize<LCP>(lcplJson, LCP);\n        if (lcpl.Links) {\n            const pubLink = lcpl.Links.find((link) => {\n                return link.Rel === \"publication\";\n            });\n            if (pubLink) {\n\n                const destPathTMP = path.join(dir, destFileName + \".tmp\");\n                const destPathFINAL = path.join(dir, destFileName);\n\n                const failure = (err: any) => {\n                    debug(err);\n                    reject(pubLink.Href + \" (\" + err + \")\");\n                };\n\n                const success = async (response: request.RequestResponse) => {\n\n                    Object.keys(response.headers).forEach((header: string) => {\n                        debug(header + \" => \" + response.headers[header]);\n                    });\n\n                    if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                        failure(\"HTTP CODE \" + response.statusCode);\n                        return;\n                    }\n\n                    const destStreamTMP = fs.createWriteStream(destPathTMP);\n                    response.pipe(destStreamTMP);\n                    // response.on(\"end\", () => {\n                    // });\n                    destStreamTMP.on(\"finish\", () => {\n\n                        const zipError = (err: any) => {\n                            debug(err);\n                            reject(destPathTMP + \" (\" + err + \")\");\n                        };\n\n                        const doneCallback = () => {\n                            setTimeout(() => {\n                                fs.unlinkSync(destPathTMP);\n                            }, 1000);\n\n                            resolve([destPathFINAL, pubLink.Href]);\n                        };\n                        const zipEntryPath = \"META-INF/license.lcpl\";\n\n                        injectFileInZip(destPathTMP, destPathFINAL, filePath, zipEntryPath, zipError, doneCallback);\n                    });\n                };\n\n                // No response streaming! :(\n                // https://github.com/request/request-promise/issues/90\n                const needsStreamingResponse = true;\n                if (needsStreamingResponse) {\n                    request.get({\n                        headers: {},\n                        method: \"GET\",\n                        uri: pubLink.Href,\n                    })\n                        .on(\"response\", success)\n                        .on(\"error\", failure);\n                } else {\n                    let response: requestPromise.FullResponse;\n                    try {\n                        // tslint:disable-next-line:await-promise no-floating-promises\n                        response = await requestPromise({\n                            headers: {},\n                            method: \"GET\",\n                            resolveWithFullResponse: true,\n                            uri: pubLink.Href,\n                        });\n                    } catch (err) {\n                        failure(err);\n                        return;\n                    }\n\n                    await success(response);\n                }\n            }\n        }\n    });\n}\n"]}