{"version":3,"file":"lsd.js","sourceRoot":"","sources":["../../../../../src/electron/main/lsd.ts"],"names":[],"mappings":"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","sourcesContent":["import { streamToBufferPromise } from \"@r2-streamer-js/_utils/stream/BufferUtils\";\nimport { Server } from \"@r2-streamer-js/http/server\";\nimport { Publication } from \"@r2-streamer-js/models/publication\";\nimport * as debug_ from \"debug\";\nimport { ipcMain } from \"electron\";\nimport * as moment from \"moment\";\nimport * as request from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport {\n    R2_EVENT_LCP_LSD_RENEW,\n    R2_EVENT_LCP_LSD_RENEW_RES,\n    R2_EVENT_LCP_LSD_RETURN,\n    R2_EVENT_LCP_LSD_RETURN_RES,\n} from \"../common/events\";\nimport { IDeviceIDManager } from \"./lsd-deviceid-manager\";\nimport { lsdLcpUpdate, lsdLcpUpdateInject } from \"./lsd-injectlcpl\";\nimport { lsdRegister } from \"./lsd-register\";\nimport { lsdRenew } from \"./lsd-renew\";\nimport { lsdReturn } from \"./lsd-return\";\n\nconst debug = debug_(\"r2:electron:main:lsd\");\n\nexport function installLsdHandler(publicationsServer: Server, deviceIDManager: IDeviceIDManager) {\n\n    ipcMain.on(R2_EVENT_LCP_LSD_RETURN, async (event: any, publicationFilePath: string) => {\n\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication || !publication.LCP || !publication.LCP.LSDJson) {\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, false, \"Internal error!\");\n            return;\n        }\n\n        let renewResponseJson: any;\n        try {\n            renewResponseJson = await lsdReturn(publication.LCP.LSDJson, deviceIDManager);\n            publication.LCP.LSDJson = renewResponseJson;\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, true, \"Returned.\");\n            return;\n        } catch (err) {\n            debug(err);\n            event.sender.send(R2_EVENT_LCP_LSD_RETURN_RES, false, err);\n        }\n    });\n\n    ipcMain.on(R2_EVENT_LCP_LSD_RENEW, async (event: any, publicationFilePath: string, endDateStr: string) => {\n        const publication = publicationsServer.cachedPublication(publicationFilePath);\n        if (!publication || !publication.LCP || !publication.LCP.LSDJson) {\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, false, \"Internal error!\");\n            return;\n        }\n\n        const endDate = endDateStr.length ? moment(endDateStr).toDate() : undefined;\n        let renewResponseJson: any;\n        try {\n            renewResponseJson = await lsdRenew(endDate, publication.LCP.LSDJson, deviceIDManager);\n            publication.LCP.LSDJson = renewResponseJson;\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, true, \"Renewed.\");\n            return;\n        } catch (err) {\n            debug(err);\n            event.sender.send(R2_EVENT_LCP_LSD_RENEW_RES, false, err);\n        }\n    });\n}\n\nexport async function launchStatusDocumentProcessing(\n    publication: Publication,\n    publicationPath: string,\n    deviceIDManager: IDeviceIDManager,\n    onStatusDocumentProcessingComplete: () => void) {\n\n    if (!publication.LCP || !publication.LCP.Links) {\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete();\n        }\n        return;\n    }\n    const linkStatus = publication.LCP.Links.find((link) => {\n        return link.Rel === \"status\";\n    });\n    if (!linkStatus) {\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete();\n        }\n        return;\n    }\n\n    debug(linkStatus);\n\n    const failure = (err: any) => {\n        debug(err);\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete();\n        }\n    };\n\n    const success = async (response: request.RequestResponse) => {\n\n        Object.keys(response.headers).forEach((header: string) => {\n            debug(header + \" => \" + response.headers[header]);\n        });\n\n        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n            failure(\"HTTP CODE \" + response.statusCode);\n            return;\n        }\n\n        let responseData: Buffer;\n        try {\n            responseData = await streamToBufferPromise(response);\n        } catch (err) {\n            debug(err);\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete();\n            }\n            return;\n        }\n        if (!responseData) {\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete();\n            }\n            return;\n        }\n        const responseStr = responseData.toString(\"utf8\");\n        if (response.headers[\"content-type\"] === \"application/vnd.readium.license.status.v1.0+json\" ||\n            response.headers[\"content-type\"] === \"application/json\") {\n            debug(responseStr);\n        }\n        const lsdJson = global.JSON.parse(responseStr);\n        debug(lsdJson);\n\n        publication.LCP.LSDJson = lsdJson;\n\n        // debug(lsdJson.id);\n        // debug(lsdJson.status); // revoked, returned, cancelled, expired\n        // debug(lsdJson.message);\n        // if (lsdJson.updated) {\n        //     debug(lsdJson.updated.license);\n        //     debug(lsdJson.updated.status);\n        // }\n        // if (lsdJson.links) {\n        //     lsdJson.links.forEach((link: any) => {\n        //         debug(link.rel); // license, register, return, renew\n        //         debug(link.href);\n        //         debug(link.type);\n        //         debug(link.templated);\n        //         debug(link.title);\n        //         debug(link.profile);\n        //     });\n        // }\n        // if (lsdJson.potential_rights) {\n        //     debug(lsdJson.potential_rights.end);\n        // }\n        // if (lsdJson.events) {\n        //     lsdJson.events.forEach((event: any) => {\n        //         debug(event.type);\n        //         debug(event.name);\n        //         debug(event.timestamp); // ISO 8601 time and date\n        //         debug(event.id);\n        //     });\n        // }\n\n        let licenseUpdateResponseJson: string | undefined;\n        try {\n            licenseUpdateResponseJson = await lsdLcpUpdate(lsdJson, publication);\n        } catch (err) {\n            debug(err);\n            // if (onStatusDocumentProcessingComplete) {\n            //     onStatusDocumentProcessingComplete();\n            // }\n            // return;\n        }\n        if (licenseUpdateResponseJson) {\n            let res: string;\n            try {\n                res = await lsdLcpUpdateInject(licenseUpdateResponseJson, publication, publicationPath);\n                debug(\"EPUB SAVED: \" + res);\n            } catch (err) {\n                debug(err);\n            }\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete();\n            }\n            return;\n        }\n\n        if (lsdJson.status === \"revoked\"\n            || lsdJson.status === \"returned\"\n            || lsdJson.status === \"cancelled\"\n            || lsdJson.status === \"expired\") {\n\n            debug(\"What?! LSD \" + lsdJson.status);\n            // This should really never happen,\n            // as the LCP license should not even pass validation\n            // due to passed end date / expired timestamp\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete();\n            }\n            return;\n        }\n\n        let registerResponseJson: any;\n        try {\n            registerResponseJson = await lsdRegister(lsdJson, deviceIDManager);\n            publication.LCP.LSDJson = registerResponseJson;\n        } catch (err) {\n            debug(err);\n        }\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete();\n        }\n    };\n\n    const headers = {\n        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n    };\n\n    // No response streaming! :(\n    // https://github.com/request/request-promise/issues/90\n    const needsStreamingResponse = true;\n    if (needsStreamingResponse) {\n        request.get({\n            headers,\n            method: \"GET\",\n            uri: linkStatus.Href,\n        })\n            .on(\"response\", success)\n            .on(\"error\", failure);\n    } else {\n        let response: requestPromise.FullResponse;\n        try {\n            // tslint:disable-next-line:await-promise no-floating-promises\n            response = await requestPromise({\n                headers,\n                method: \"GET\",\n                resolveWithFullResponse: true,\n                uri: linkStatus.Href,\n            });\n        } catch (err) {\n            failure(err);\n            return;\n        }\n\n        await success(response);\n    }\n}\n"]}