{"version":3,"file":"animateProperty.js","sourceRoot":"","sources":["../../../../../src/electron/renderer/animateProperty.ts"],"names":[],"mappings":";;AAAa,QAAA,eAAe,GAAG,UAC3B,GAAyB,EACzB,QAAoD,EACpD,QAAgB,EAChB,QAAgB,EAChB,MAAW,EACX,OAAe,EACf,GAAiC,EACjC,UAAkE;IAElE,IAAM,SAAS,GAAW,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC3C,IAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,CAAC;IAErC,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,IAAI,EAAE,GAAG,CAAC,CAAC;IACX,IAAI,OAAO,GAAG,CAAC,CAAC;IAEhB,IAAM,OAAO,GAAG;QACZ,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC3B,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,GAAG,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QAE1F,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;YAC1B,OAAO,GAAG,MAAM,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YAEJ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;YACD,GAAG,CAAC,EAAE,CAAC,CAAC;YACR,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;YAE3B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,QAAQ,CAAC,KAAK,CAAC,CAAC;YACpB,CAAC;YACD,GAAG,CAAC,EAAE,CAAC,CAAC;YACR,MAAM,CAAC;QACX,CAAC;QAED,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC,CAAC;IAEF,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC,CAAC","sourcesContent":["export const animateProperty = (\n    cAF: (id: number) => void, // typically: window.cancelAnimationFrame\n    callback: ((cancelled: boolean) => void) | undefined,\n    property: string, // numerical, e.g. \"scrollTop\" or \"scrollLeft\"\n    duration: number, // e.g. 200\n    object: any, // typically, window.document.body (Element)\n    destVal: number, // e.g. 0\n    rAF: (func: () => void) => number, // typically: window.requestAnimationFrame\n    transition: (t: number, b: number, c: number, d: number) => number, // e.g. easings.easeInQuad\n) => {\n    const originVal: number = object[property];\n    const deltaVal = destVal - originVal;\n\n    const startTime = Date.now(); // +new Date()\n\n    let id = 0;\n    let lastVal = 0;\n\n    const animate = () => {\n        const nowTime = Date.now(); // +new Date()\n        const newVal = Math.floor(transition(nowTime - startTime, originVal, deltaVal, duration));\n\n        if (!lastVal || object[property] !== destVal) {\n            object[property] = newVal;\n            lastVal = newVal;\n        } else { // lastVal && object[property] === destVal\n\n            if (callback) {\n                callback(true);\n            }\n            cAF(id);\n            return;\n        }\n\n        if (nowTime > (startTime + duration)) {\n            object[property] = destVal;\n\n            if (callback) {\n                callback(false);\n            }\n            cAF(id);\n            return;\n        }\n\n        id = rAF(animate);\n    };\n\n    id = rAF(animate);\n};\n"]}