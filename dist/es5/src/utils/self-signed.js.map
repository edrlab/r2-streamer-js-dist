{"version":3,"file":"self-signed.js","sourceRoot":"","sources":["../../../../src/utils/self-signed.ts"],"names":[],"mappings":";;;AAAA,+BAAiC;AACjC,uCAAyC;AACzC,2BAA6B;AAgB7B;;;YACI,WAAO,IAAI,OAAO,CAAkB,UAAC,OAAO,EAAE,MAAM;oBAChD,IAAM,IAAI,GAAG;wBACT,SAAS,EAAE,QAAQ;wBAGnB,IAAI,EAAE,EAAE;wBACR,UAAU,EAAE,CAAC;gCACT,QAAQ,EAAE,CAAC;wCACP,IAAI,EAAE,CAAC;wCACP,KAAK,EAAE,WAAW;qCACrB,CAAC;gCACF,IAAI,EAAE,gBAAgB;6BACzB,CAAC;qBACL,CAAC;oBACF,IAAM,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;oBACvB,IAAM,UAAU,GAAG,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,qBAAqB,GAAG,IAAI,EAAE,CAAC,CAAC;oBAEjF,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,UAAC,GAAQ,EAAE,IAAS;wBACtD,IAAI,GAAG,EAAE;4BACL,MAAM,CAAC,GAAG,CAAC,CAAC;4BACZ,OAAO;yBACV;wBAED,IAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;wBAI3B,IAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBACpD,IAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBAClF,IAAwB,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;wBAE5D,IAAwB,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;wBAEjD,IAAM,cAAc,GAAG,EAAE,CAAC;wBAC1B,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;wBACrC,IAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;wBAC1C,IAAwB,CAAC,YAAY,GAAG,EAAE,CAAC;wBAE5C,OAAO,CAAC,IAAuB,CAAC,CAAC;oBACrC,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,EAAC;;;CACN;AA1CD,wDA0CC","sourcesContent":["import * as crypto from \"crypto\";\nimport * as selfsigned from \"selfsigned\";\nimport * as uuid from \"uuid\";\n\nexport interface CertificateData {\n    trustKey: Buffer;\n    trustCheck: string;\n    trustCheckIV: Buffer;\n\n    // clientprivate?: string;\n    // clientpublic?: string;\n    // clientcert?: string;\n\n    private?: string; // https.ServerOptions.key\n    public?: string;\n    cert?: string; // https.ServerOptions.cert\n}\n\nexport async function generateSelfSignedData(): Promise<CertificateData> {\n    return new Promise<CertificateData>((resolve, reject) => {\n        const opts = {\n            algorithm: \"sha256\",\n            // clientCertificate: true,\n            // clientCertificateCN: \"R2 insecure client\",\n            days: 30,\n            extensions: [{\n                altNames: [{\n                    type: 2, // DNSName\n                    value: \"localhost\",\n                }],\n                name: \"subjectAltName\",\n            }],\n        };\n        const rand = uuid.v4();\n        const attributes = [{ name: \"commonName\", value: \"R2 insecure server \" + rand }];\n\n        selfsigned.generate(attributes, opts, (err: any, keys: any) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n\n            const password = uuid.v4();\n            // const checkSum = crypto.createHash(\"sha256\");\n            // checkSum.update(password);\n            // const hash = checkSum.digest(\"hex\").toUpperCase();\n            const salt = crypto.randomBytes(16).toString(\"hex\");\n            const hash = crypto.pbkdf2Sync(password, salt, 1000, 32, \"sha256\").toString(\"hex\");\n            (keys as CertificateData).trustKey = new Buffer(hash, \"hex\");\n\n            (keys as CertificateData).trustCheck = uuid.v4();\n\n            const AES_BLOCK_SIZE = 16;\n            const ivBuff = new Buffer(uuid.v4());\n            const iv = ivBuff.slice(0, AES_BLOCK_SIZE);\n            (keys as CertificateData).trustCheckIV = iv;\n\n            resolve(keys as CertificateData);\n        });\n    });\n}\n"]}