{"version":3,"file":"server-manifestjson.js","sourceRoot":"","sources":["../../../../src/http/server-manifestjson.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from \"crypto\";\nimport * as path from \"path\";\n\nimport { mediaOverlayURLParam, mediaOverlayURLPath } from \"@parser/epub\";\nimport { PublicationParsePromise } from \"@parser/publication-parser\";\nimport { encodeURIComponent_RFC3986, isHTTP } from \"@utils/http/UrlUtils\";\nimport { sortObject, traverseJsonObjects } from \"@utils/JsonUtils\";\nimport * as css2json from \"css2json\";\nimport * as debug_ from \"debug\";\nimport * as express from \"express\";\nimport * as jsonMarkup from \"json-markup\";\nimport { JSON as TAJSON } from \"ta-json\";\n\nimport { Server } from \"./server\";\n\nconst debug = debug_(\"r2:server:manifestjson\");\n\nexport function serverManifestJson(server: Server, routerPathBase64: express.Router) {\n\n    // https://github.com/mafintosh/json-markup/blob/master/style.css\n    const jsonStyle = `\n.json-markup {\n    line-height: 17px;\n    font-size: 13px;\n    font-family: monospace;\n    white-space: pre;\n}\n.json-markup-key {\n    font-weight: bold;\n}\n.json-markup-bool {\n    color: firebrick;\n}\n.json-markup-string {\n    color: green;\n}\n.json-markup-null {\n    color: gray;\n}\n.json-markup-number {\n    color: blue;\n}\n`;\n\n    const routerManifestJson = express.Router({ strict: false });\n    // routerManifestJson.use(morgan(\"combined\"));\n\n    routerManifestJson.get([\"/\", \"/show/:jsonPath?\"],\n        async (req: express.Request, res: express.Response) => {\n\n            if (!req.params.pathBase64) {\n                req.params.pathBase64 = (req as any).pathBase64;\n            }\n            if (!req.params.lcpPass64) {\n                req.params.lcpPass64 = (req as any).lcpPass64;\n            }\n\n            const isShow = req.url.indexOf(\"/show\") >= 0 || req.query.show;\n            if (!req.params.jsonPath && req.query.show) {\n                req.params.jsonPath = req.query.show;\n            }\n\n            // debug(req.method);\n            const isHead = req.method.toLowerCase() === \"head\";\n            if (isHead) {\n                console.log(\"HEAD !!!!!!!!!!!!!!!!!!!\");\n            }\n\n            const isCanonical = req.query.canonical && req.query.canonical === \"true\";\n\n            const isSecureHttp = req.secure ||\n                req.protocol === \"https\" ||\n                req.get(\"X-Forwarded-Proto\") === \"https\"\n                // (req.headers.host && req.headers.host.indexOf(\"now.sh\") >= 0) ||\n                // (req.hostname && req.hostname.indexOf(\"now.sh\") >= 0)\n                ;\n\n            const pathBase64Str = new Buffer(req.params.pathBase64, \"base64\").toString(\"utf8\");\n\n            let publication = server.cachedPublication(pathBase64Str);\n            if (!publication) {\n\n                // const fileName = path.basename(pathBase64Str);\n                // const ext = path.extname(fileName).toLowerCase();\n\n                try {\n                    publication = await PublicationParsePromise(pathBase64Str);\n                } catch (err) {\n                    debug(err);\n                    res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                        + err + \"</p></body></html>\");\n                    return;\n                }\n\n                server.cachePublication(pathBase64Str, publication);\n            }\n            // dumpPublication(publication);\n\n            if (req.params.lcpPass64) {\n                const lcpPass = new Buffer(req.params.lcpPass64, \"base64\").toString(\"utf8\");\n                if (publication.LCP) {\n                    const okay = publication.LCP.setUserPassphrase(lcpPass); // hex\n                    if (!okay) {\n                        const errMsg = \"FAIL publication.LCP.setUserPassphrase()\";\n                        debug(errMsg);\n                        res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                            + errMsg + \"</p></body></html>\");\n                        return;\n                    }\n                }\n            }\n\n            // console.log(req.url); // path local to this router\n            // console.log(req.baseUrl); // path local to above this router\n            // console.log(req.originalUrl); // full path (req.baseUrl + req.url)\n            // url.parse(req.originalUrl, false).host\n            // req.headers.host has port, not req.hostname\n\n            const rootUrl = (isSecureHttp ? \"https://\" : \"http://\")\n                + req.headers.host + \"/pub/\"\n                + (req.params.lcpPass64 ?\n                    (server.lcpBeginToken + encodeURIComponent_RFC3986(req.params.lcpPass64) + server.lcpEndToken) :\n                    \"\")\n                + encodeURIComponent_RFC3986(req.params.pathBase64);\n            const manifestURL = rootUrl + \"/\" + \"manifest.json\";\n\n            const selfLink = publication.searchLinkByRel(\"self\");\n            if (!selfLink) {\n                publication.AddLink(\"application/webpub+json\", [\"self\"], manifestURL, false);\n            }\n\n            function absoluteURL(href: string): string {\n                return rootUrl + \"/\" + href;\n            }\n\n            function absolutizeURLs(jsonObj: any) {\n                traverseJsonObjects(jsonObj,\n                    (obj) => {\n                        if (obj.href && typeof obj.href === \"string\"\n                            && !isHTTP(obj.href)) {\n                            // obj.href_ = obj.href;\n                            obj.href = absoluteURL(obj.href);\n                        }\n\n                        if (obj[\"media-overlay\"] && typeof obj[\"media-overlay\"] === \"string\"\n                            && !isHTTP(obj[\"media-overlay\"])) {\n                            // obj[\"media-overlay_\"] = obj[\"media-overlay\"];\n                            obj[\"media-overlay\"] = absoluteURL(obj[\"media-overlay\"]);\n                        }\n                    });\n            }\n\n            let hasMO = false;\n            if (publication.Spine) {\n                const link = publication.Spine.find((l) => {\n                    if (l.Properties && l.Properties.MediaOverlay) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (link) {\n                    hasMO = true;\n                }\n            }\n            if (hasMO) {\n                const moLink = publication.searchLinkByRel(\"media-overlay\");\n                if (!moLink) {\n                    const moURL = // rootUrl + \"/\" +\n                        mediaOverlayURLPath +\n                        \"?\" + mediaOverlayURLParam + \"={path}\";\n                    publication.AddLink(\"application/vnd.readium.mo+json\", [\"media-overlay\"], moURL, true);\n                }\n            }\n\n            let coverImage: string | undefined;\n            const coverLink = publication.GetCover();\n            if (coverLink) {\n                coverImage = coverLink.Href;\n                if (coverImage && !isHTTP(coverImage)) {\n                    coverImage = absoluteURL(coverImage);\n                }\n            }\n\n            if (isShow) {\n                let objToSerialize: any = null;\n\n                if (req.params.jsonPath) {\n                    switch (req.params.jsonPath) {\n\n                        case \"all\": {\n                            objToSerialize = publication;\n                            break;\n                        }\n                        case \"cover\": {\n                            objToSerialize = publication.GetCover();\n                            break;\n                        }\n                        case \"mediaoverlays\": {\n                            objToSerialize = publication.FindAllMediaOverlay();\n                            break;\n                        }\n                        case \"spine\": {\n                            objToSerialize = publication.Spine;\n                            break;\n                        }\n                        case \"pagelist\": {\n                            objToSerialize = publication.PageList;\n                            break;\n                        }\n                        case \"landmarks\": {\n                            objToSerialize = publication.Landmarks;\n                            break;\n                        }\n                        case \"links\": {\n                            objToSerialize = publication.Links;\n                            break;\n                        }\n                        case \"resources\": {\n                            objToSerialize = publication.Resources;\n                            break;\n                        }\n                        case \"toc\": {\n                            objToSerialize = publication.TOC;\n                            break;\n                        }\n                        case \"metadata\": {\n                            objToSerialize = publication.Metadata;\n                            break;\n                        }\n                        default: {\n                            objToSerialize = null;\n                        }\n                    }\n                } else {\n                    objToSerialize = publication;\n                }\n\n                if (!objToSerialize) {\n                    objToSerialize = {};\n                }\n\n                const jsonObj = TAJSON.serialize(objToSerialize);\n\n                absolutizeURLs(jsonObj);\n\n                // const jsonStr = global.JSON.stringify(jsonObj, null, \"    \");\n\n                // // breakLength: 100  maxArrayLength: undefined\n                // const dumpStr = util.inspect(objToSerialize,\n                //     { showHidden: false, depth: 1000, colors: false, customInspect: true });\n\n                const jsonPretty = jsonMarkup(jsonObj, css2json(jsonStyle));\n\n                res.status(200).send(\"<html>\" +\n                    \"<head><script type=\\\"application/ld+json\\\" href=\\\"\" +\n                    manifestURL +\n                    \"\\\"></script></head>\" +\n                    \"<body>\" +\n                    \"<h1>\" + path.basename(pathBase64Str) + \"</h1>\" +\n                    (coverImage ? \"<img src=\\\"\" + coverImage + \"\\\" alt=\\\"\\\"/>\" : \"\") +\n                    \"<hr><p><pre>\" + jsonPretty + \"</pre></p>\" +\n                    // \"<hr><p><pre>\" + jsonStr + \"</pre></p>\" +\n                    // \"<p><pre>\" + dumpStr + \"</pre></p>\" +\n                    \"</body></html>\");\n            } else {\n                server.setResponseCORS(res);\n                res.set(\"Content-Type\", \"application/webpub+json; charset=utf-8\");\n\n                const publicationJsonObj = TAJSON.serialize(publication);\n\n                // absolutizeURLs(publicationJsonObj);\n\n                if (isCanonical) {\n                    if (publicationJsonObj.links) {\n                        delete publicationJsonObj.links;\n                    }\n                }\n\n                const publicationJsonStr = isCanonical ?\n                    global.JSON.stringify(sortObject(publicationJsonObj), null, \"\") :\n                    global.JSON.stringify(publicationJsonObj, null, \"  \");\n\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(publicationJsonStr);\n                const hash = checkSum.digest(\"hex\");\n\n                const match = req.header(\"If-None-Match\");\n                if (match === hash) {\n                    debug(\"manifest.json cache\");\n                    res.status(304); // StatusNotModified\n                    res.end();\n                    return;\n                }\n\n                res.setHeader(\"ETag\", hash);\n\n                const links = publication.GetPreFetchResources();\n                if (links && links.length) {\n                    let prefetch = \"\";\n                    links.forEach((l) => {\n                        const href = absoluteURL(l.Href);\n                        prefetch += \"<\" + href + \">;\" + \"rel=prefetch,\";\n                    });\n\n                    res.setHeader(\"Link\", prefetch);\n                }\n\n                // res.setHeader(\"Cache-Control\", \"public,max-age=86400\");\n\n                res.status(200);\n\n                if (isHead) {\n                    res.end();\n                } else {\n                    res.send(publicationJsonStr);\n                }\n            }\n        });\n\n    routerPathBase64.use(\"/:pathBase64/manifest.json\", routerManifestJson);\n}\n"]}