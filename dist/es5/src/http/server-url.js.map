{"version":3,"file":"server-url.js","sourceRoot":"","sources":["../../../../src/http/server-url.ts"],"names":[],"mappings":";;AAAA,8BAAgC;AAChC,iCAAmC;AACnC,+BAAiC;AAGjC,mFAAyE;AAEzE,IAAM,KAAK,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAEtC,mBAA0B,OAAe,EAAE,SAA8B;IAErE,IAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;IACpD,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;IAElC,SAAS,CAAC,GAAG,CAAC,sDAAqB,CAAC,CAAC;IAErC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,IAAqB,EAAE,GAAqB;QAE5D,IAAI,IAAI,GAAG,cAAc,CAAC;QAC1B,IAAI,IAAI,8EAA4E;YAChF,8DAA8D;YAC9D,oDAAkD;YAClD,oBAAoB;YACpB,+CAA+C;YAC/C,mBAAmB;YAGnB,YAAY;YACZ,sEAAoE;YACpE,gCAAgC,CAAC;QACrC,IAAI,IAAI,SAAS,CAAC;QAElB,IAAI,IAAI,gCAAgC,CAAC;QAEzC,IAAI,IAAI,wCAAsC;YAC1C,2DAAmD;YACnD,8CAA0C,CAAC;QAE/C,IAAI,IAAI,gBAAgB,CAAC;QAEzB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,CAAC,YAAY,EAAE,UAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK;QACvD,GAAW,CAAC,UAAU,GAAG,KAAK,CAAC;QAChC,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,CAAC,iBAAiB,EAAE,UAAC,GAAoB,EAAE,GAAqB;QAEzE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,MAAM,CAAC,UAAU,GAAI,GAAW,CAAC,UAAU,CAAC;QACpD,CAAC;QAED,IAAM,UAAU,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;QAIzC,KAAK,CAAC,UAAU,CAAC,CAAC;QAElB,IAAM,gBAAgB,GAAG,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnE,IAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;cACtE,OAAO,GAAG,gBAAgB,GAAG,GAAG,CAAC;QAKvC,KAAK,CAAC,eAAa,GAAG,CAAC,WAAW,aAAQ,QAAU,CAAC,CAAC;QACtD,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACrC,CAAC;AA/DD,8BA+DC","sourcesContent":["import * as debug_ from \"debug\";\r\nimport * as express from \"express\";\r\nimport * as morgan from \"morgan\";\r\n\r\nimport { Server } from \"./server\";\r\nimport { trailingSlashRedirect } from \"./server-trailing-slash-redirect\";\r\n\r\nconst debug = debug_(\"r2:server:url\");\r\n\r\nexport function serverUrl(_server: Server, topRouter: express.Application) {\r\n\r\n    const routerUrl = express.Router({ strict: false });\r\n    routerUrl.use(morgan(\"combined\"));\r\n\r\n    routerUrl.use(trailingSlashRedirect);\r\n\r\n    routerUrl.get(\"/\", (_req: express.Request, res: express.Response) => {\r\n\r\n        let html = \"<html><head>\";\r\n        html += `<script type=\"text/javascript\">function encodeURIComponent_RFC3986(str) { ` +\r\n            `return encodeURIComponent(str).replace(/[!'()*]/g, (c) => { ` +\r\n            `return \"%\" + c.charCodeAt(0).toString(16); }); }` +\r\n            `function go(evt) {` +\r\n            `if (evt) { evt.preventDefault(); } var url = ` +\r\n            `location.origin +` +\r\n            // `location.protocol + '//' + location.hostname + ` +\r\n            // `(location.port ? (':' + location.port) : '') + ` +\r\n            ` '/url/' +` +\r\n            ` encodeURIComponent_RFC3986(document.getElementById(\"url\").value);` +\r\n            `location.href = url;}</script>`;\r\n        html += \"</head>\";\r\n\r\n        html += \"<body><h1>Publication URL</h1>\";\r\n\r\n        html += `<form onsubmit=\"go();return false;\">` +\r\n            `<input type=\"text\" name=\"url\" id=\"url\" size=\"80\">` +\r\n            `<input type=\"submit\" value=\"Go!\"></form>`;\r\n\r\n        html += \"</body></html>\";\r\n\r\n        res.status(200).send(html);\r\n    });\r\n\r\n    routerUrl.param(\"urlEncoded\", (req, _res, next, value, _name) => {\r\n        (req as any).urlEncoded = value;\r\n        next();\r\n    });\r\n\r\n    routerUrl.get(\"/:urlEncoded(*)\", (req: express.Request, res: express.Response) => {\r\n\r\n        if (!req.params.urlEncoded) {\r\n            req.params.urlEncoded = (req as any).urlEncoded;\r\n        }\r\n\r\n        const urlDecoded = req.params.urlEncoded;\r\n        // if (urlDecoded.substr(-1) === \"/\") {\r\n        //     urlDecoded = urlDecoded.substr(0, urlDecoded.length - 1);\r\n        // }\r\n        debug(urlDecoded);\r\n\r\n        const urlDecodedBase64 = new Buffer(urlDecoded).toString(\"base64\");\r\n        const redirect = req.originalUrl.substr(0, req.originalUrl.indexOf(\"/url/\"))\r\n            + \"/pub/\" + urlDecodedBase64 + \"/\";\r\n\r\n        // No need for CORS with this URL redirect (HTML page lists available services)\r\n        // server.setResponseCORS(res);\r\n\r\n        debug(`REDIRECT: ${req.originalUrl} ==> ${redirect}`);\r\n        res.redirect(301, redirect);\r\n    });\r\n\r\n    topRouter.use(\"/url\", routerUrl);\r\n}\r\n"]}