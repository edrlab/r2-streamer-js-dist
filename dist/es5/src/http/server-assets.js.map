{"version":3,"file":"server-assets.js","sourceRoot":"","sources":["../../../../src/http/server-assets.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\n\nimport { Link } from \"@models/publication-link\";\nimport { Transformers } from \"@transform/transformer\";\nimport { parseRangeHeader } from \"@utils/http/RangeUtils\";\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\n// import { CounterPassThroughStream } from \"@utils/stream/CounterPassThroughStream\";\nimport { IStreamAndLength, IZip } from \"@utils/zip/zip\";\nimport * as debug_ from \"debug\";\nimport * as express from \"express\";\nimport * as mime from \"mime-types\";\n\nimport { Publication } from \"@models/publication\";\nimport { Server } from \"./server\";\n\nconst debug = debug_(\"r2:server:assets\");\n\nexport function serverAssets(server: Server, routerPathBase64: express.Router) {\n\n    // let streamCounter = 0;\n\n    const routerAssets = express.Router({ strict: false });\n    // routerAssets.use(morgan(\"combined\"));\n\n    routerAssets.get(\"/\",\n        async (req: express.Request, res: express.Response) => {\n\n            if (!req.params.pathBase64) {\n                req.params.pathBase64 = (req as any).pathBase64;\n            }\n            if (!req.params.asset) {\n                req.params.asset = (req as any).asset;\n            }\n            if (!req.params.lcpPass64) {\n                req.params.lcpPass64 = (req as any).lcpPass64;\n            }\n\n            const isShow = req.query.show;\n\n            // debug(req.method);\n            const isHead = req.method.toLowerCase() === \"head\";\n            if (isHead) {\n                debug(\"HEAD !!!!!!!!!!!!!!!!!!!\");\n            }\n\n            const pathBase64Str = new Buffer(req.params.pathBase64, \"base64\").toString(\"utf8\");\n\n            // const fileName = path.basename(pathBase64Str);\n            // const ext = path.extname(fileName).toLowerCase();\n\n            let publication: Publication;\n            try {\n                publication = await server.loadOrGetCachedPublication(pathBase64Str);\n            } catch (err) {\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n\n            // dumpPublication(publication);\n\n            const zipInternal = publication.findFromInternal(\"zip\");\n            if (!zipInternal) {\n                const err = \"No publication zip!\";\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n            const zip = zipInternal.Value as IZip;\n\n            const pathInZip = req.params.asset;\n\n            if (!zip.hasEntry(pathInZip)) {\n                const err = \"Asset not in zip! \" + pathInZip;\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n\n            let link: Link | undefined;\n\n            if (publication.Resources\n                && pathInZip.indexOf(\"META-INF/\") !== 0\n                && !pathInZip.endsWith(\".opf\")) {\n\n                const relativePath = pathInZip;\n\n                link = publication.Resources.find((l) => {\n                    if (l.Href === relativePath) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (!link) {\n                    link = publication.Spine.find((l) => {\n                        if (l.Href === relativePath) {\n                            return true;\n                        }\n                        return false;\n                    });\n                }\n                if (!link) {\n                    const err = \"Asset not declared in publication spine/resources!\";\n                    debug(err);\n                    res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                        + err + \"</p></body></html>\");\n                    return;\n                }\n            }\n\n            let mediaType = mime.lookup(pathInZip);\n            if (link && link.TypeLink) {\n                mediaType = link.TypeLink;\n            }\n\n            const isText = mediaType && (\n                mediaType.indexOf(\"text/\") === 0 ||\n                mediaType.indexOf(\"application/xhtml\") === 0 ||\n                mediaType.indexOf(\"application/xml\") === 0 ||\n                mediaType.indexOf(\"application/json\") === 0 ||\n                mediaType.indexOf(\"application/svg\") === 0 ||\n                mediaType.indexOf(\"application/smil\") === 0 ||\n                mediaType.indexOf(\"+json\") > 0 ||\n                mediaType.indexOf(\"+smil\") > 0 ||\n                mediaType.indexOf(\"+svg\") > 0 ||\n                mediaType.indexOf(\"+xhtml\") > 0 ||\n                mediaType.indexOf(\"+xml\") > 0);\n\n            // const isVideoAudio = mediaType && (\n            //     mediaType.indexOf(\"audio/\") === 0 ||\n            //     mediaType.indexOf(\"video/\") === 0);\n            // if (isVideoAudio) {\n            //     debug(req.headers);\n            // }\n\n            const isEncrypted = link && link.Properties && link.Properties.Encrypted;\n            const isObfuscatedFont = isEncrypted && link &&\n                (link.Properties.Encrypted.Algorithm === \"http://ns.adobe.com/pdf/enc#RC\"\n                    || link.Properties.Encrypted.Algorithm === \"http://www.idpf.org/2008/embedding\");\n\n            const isPartialByteRangeRequest = ((req.headers && req.headers.range) ? true : false);\n\n            // if (isEncrypted && isPartialByteRangeRequest) {\n            //     const err = \"Encrypted video/audio not supported (HTTP 206 partial request byte range)\";\n            //     debug(err);\n            //     res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n            //         + err + \"</p></body></html>\");\n            //     return;\n            // }\n\n            let partialByteBegin = 0; // inclusive boundaries\n            let partialByteEnd = -1;\n            let partialByteLength = 0;\n            if (isPartialByteRangeRequest) {\n                debug(req.headers.range);\n                const ranges = parseRangeHeader(req.headers.range);\n                // debug(ranges);\n\n                if (ranges && ranges.length) {\n                    if (ranges.length > 1) {\n                        const err = \"Too many HTTP ranges: \" + req.headers.range;\n                        debug(err);\n                        res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                            + err + \"</p></body></html>\");\n                        return;\n                    }\n                    partialByteBegin = ranges[0].begin;\n                    partialByteEnd = ranges[0].end;\n\n                    if (partialByteBegin < 0) {\n                        partialByteBegin = 0;\n                    }\n                }\n            }\n\n            // debug(`${pathInZip} >> ${partialByteBegin}-${partialByteEnd}`);\n            let zipStream_: IStreamAndLength;\n            try {\n                zipStream_ = isPartialByteRangeRequest && !isEncrypted ?\n                    await zip.entryStreamRangePromise(pathInZip, partialByteBegin, partialByteEnd) :\n                    await zip.entryStreamPromise(pathInZip);\n            } catch (err) {\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n\n            // TODO: isHead for encrypted Content-Length\n            if ((isEncrypted && (isObfuscatedFont || !server.disableDecryption)) &&\n                link) {\n\n                let decryptFail = false;\n                let transformedStream: IStreamAndLength;\n                try {\n                    transformedStream = await Transformers.tryStream(\n                        publication, link,\n                        zipStream_,\n                        isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\n                } catch (err) {\n                    debug(err);\n                    res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                        + err + \"</p></body></html>\");\n                    return;\n                }\n                if (transformedStream) {\n                    zipStream_ = transformedStream;\n                } else {\n                    decryptFail = true;\n                }\n\n                if (decryptFail) {\n                    const err = \"Encryption scheme not supported.\";\n                    debug(err);\n                    res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                        + err + \"</p></body></html>\");\n                    return;\n                }\n            }\n\n            if (partialByteEnd < 0) {\n                partialByteEnd = zipStream_.length - 1;\n            }\n\n            partialByteLength = isPartialByteRangeRequest ?\n                partialByteEnd - partialByteBegin + 1 :\n                zipStream_.length;\n\n            if (isShow) {\n                let zipData: Buffer;\n                try {\n                    zipData = await streamToBufferPromise(zipStream_.stream);\n                } catch (err) {\n                    debug(err);\n                    res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                        + err + \"</p></body></html>\");\n                    return;\n                }\n                if (zipData) {\n                    debug(\"CHECK: \" + zipStream_.length + \" ==> \" + zipData.length);\n                }\n                res.status(200).send(\"<html><body>\" +\n                    \"<h1>\" + path.basename(pathBase64Str) + \"</h1>\" +\n                    \"<h2>\" + mediaType + \"</h2>\" +\n                    ((isText && zipData) ?\n                        (\"<p><pre>\" +\n                            zipData.toString(\"utf8\").replace(/&/g, \"&amp;\")\n                                .replace(/</g, \"&lt;\")\n                                .replace(/>/g, \"&gt;\")\n                                .replace(/\"/g, \"&quot;\")\n                                .replace(/'/g, \"&apos;\") +\n                            \"</pre></p>\")\n                        : \"<p>BINARY</p>\"\n                    ) + \"</body></html>\");\n\n                return;\n            }\n\n            server.setResponseCORS(res);\n            res.setHeader(\"Cache-Control\", \"public,max-age=86400\");\n\n            if (mediaType) {\n                res.set(\"Content-Type\", mediaType);\n                // res.type(mediaType);\n            }\n\n            res.setHeader(\"Accept-Ranges\", \"bytes\");\n\n            if (isPartialByteRangeRequest) {\n                // res.setHeader(\"Connection\", \"close\");\n                // res.setHeader(\"Transfer-Encoding\", \"chunked\");\n                res.setHeader(\"Content-Length\", `${partialByteLength}`);\n                const rangeHeader = `bytes ${partialByteBegin}-${partialByteEnd}/${zipStream_.length}`;\n                // debug(\"+++> \" + rangeHeader + \" (( \" + partialByteLength);\n                res.setHeader(\"Content-Range\", rangeHeader);\n                res.status(206);\n            } else {\n                res.setHeader(\"Content-Length\", `${zipStream_.length}`);\n                // debug(\"---> \" + zipStream_.length);\n                res.status(200);\n            }\n\n            if (isHead) {\n                res.end();\n                // } else if (zipStream_.length === 2) {\n                //     debug(\"===> BUFFER SEND (short stream)\");\n                //     let zipData: Buffer;\n                //     try {\n                //         zipData = await streamToBufferPromise(zipStream_.stream);\n                //     } catch (err) {\n                //         debug(err);\n                //         res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                //             + err + \"</p></body></html>\");\n                //         return;\n                //     }\n                //     if (zipData) {\n                //         debug(\"CHECK: \" + zipStream_.length + \" ==> \" + zipData.length);\n                //     }\n                //     res.send(zipStream_.stream);\n            } else {\n                // debug(\"===> STREAM PIPE\");\n\n                // const counterStream = new CounterPassThroughStream(++streamCounter);\n\n                zipStream_.stream\n                    // .on(\"finish\", () => {\n                    //     debug(\"ZIP FINISH \" + counterStream.id);\n                    // })\n                    // .on(\"end\", () => {\n                    //     debug(\"ZIP END \" + counterStream.id);\n                    // })\n                    // .on(\"close\", () => {\n                    //     debug(\"ZIP CLOSE \" + counterStream.id);\n                    // })\n                    // .on(\"error\", () => {\n                    //     debug(\"ZIP ERROR \" + counterStream.id);\n                    // })\n                    // .on(\"pipe\", () => {\n                    //     debug(\"ZIP PIPE \" + counterStream.id);\n                    // })\n                    // .on(\"unpipe\", () => {\n                    //     debug(\"ZIP UNPIPE \" + counterStream.id);\n                    // })\n                    // .on(\"drain\", () => {\n                    //     debug(\"ZIP DRAIN \" + counterStream.id);\n                    // })\n                    // .pipe(counterStream)\n                    // .on(\"progress\", function f() {\n                    //     debug(\"CounterPassThroughStream PROGRESS: \" +\n                    //         (this as CounterPassThroughStream).id +\n                    //         \" -- \" + (this as CounterPassThroughStream).bytesReceived);\n                    // })\n                    // .on(\"end\", function f() {\n                    //     debug(\"CounterPassThroughStream END: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // .on(\"close\", function f() {\n                    //     debug(\"CounterPassThroughStream CLOSE: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // .once(\"finish\", function f() {\n                    //     debug(\"CounterPassThroughStream FINISH: \" +\n                    //         (this as CounterPassThroughStream).id +\n                    //         \" -- \" + (this as CounterPassThroughStream).bytesReceived);\n                    // })\n                    // .on(\"error\", function f() {\n                    //     debug(\"CounterPassThroughStream ERROR: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // .on(\"pipe\", function f() {\n                    //     debug(\"CounterPassThroughStream PIPE: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // .on(\"unpipe\", function f() {\n                    //     debug(\"CounterPassThroughStream UNPIPE: \" +\n                    //         (this as CounterPassThroughStream).id);\n                    // })\n                    // // .on(\"drain\", function f() {\n                    // //     debug(\"CounterPassThroughStream DRAIN: \" +\n                    // //         (this as CounterPassThroughStream).id);\n                    // // })\n                    .pipe(res)\n                    // .on(\"finish\", () => {\n                    //     debug(\"RES FINISH \" + counterStream.id);\n                    // })\n                    // .on(\"end\", () => {\n                    //     debug(\"RES END \" + counterStream.id);\n                    // })\n                    .on(\"close\", () => {\n                        // debug(\"RES CLOSE \" + counterStream.id);\n\n                        res.end();\n\n                        // counterStream.unpipe(res);\n                        // counterStream.end();\n                        // if (zipStream_) {\n                        //     zipStream_.stream.unpipe(counterStream);\n                        // }\n\n                        // zipStream.close();\n                    })\n                    // .on(\"error\", () => {\n                    //     debug(\"RES ERROR \" + counterStream.id);\n                    // })\n                    // .on(\"pipe\", () => {\n                    //     debug(\"RES PIPE \" + counterStream.id);\n                    // })\n                    // .on(\"unpipe\", () => {\n                    //     debug(\"RES UNPIPE \" + counterStream.id);\n                    // })\n                    // .on(\"drain\", () => {\n                    //     debug(\"RES DRAIN \" + counterStream.id);\n                    // })\n                    ;\n            }\n        });\n\n    routerPathBase64.param(\"asset\", (req, _res, next, value, _name) => {\n        (req as any).asset = value;\n        next();\n    });\n\n    routerPathBase64.use(\"/:pathBase64/:asset(*)\", routerAssets);\n}\n"]}