{"version":3,"file":"opds2-create-cli.js","sourceRoot":"","sources":["../../../../src/http/opds2-create-cli.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\n\r\nimport { Publication } from \"@models/publication\";\r\nimport { OPDSFeed } from \"@opds/opds2/opds2\";\r\nimport { OPDSContributor } from \"@opds/opds2/opds2-contributor\";\r\nimport { OPDSLink } from \"@opds/opds2/opds2-link\";\r\nimport { OPDSMetadata } from \"@opds/opds2/opds2-metadata\";\r\nimport { OPDSPublication } from \"@opds/opds2/opds2-publication\";\r\nimport { OPDSPublicationMetadata } from \"@opds/opds2/opds2-publicationMetadata\";\r\nimport { PublicationParsePromise } from \"@parser/publication-parser\";\r\nimport { encodeURIComponent_RFC3986, isHTTP } from \"@utils/http/UrlUtils\";\r\nimport * as debug_ from \"debug\";\r\nimport * as moment from \"moment\";\r\nimport { JSON as TAJSON } from \"ta-json\";\r\n\r\nconst debug = debug_(\"r2:opds2create\");\r\n\r\ndebug(`process.cwd(): ${process.cwd()}`);\r\ndebug(`__dirname: ${__dirname}`);\r\n\r\nlet args = process.argv.slice(2);\r\n// debug(\"process.argv.slice(2): %o\", args);\r\n\r\nif (!args.length) {\r\n    debug(\"FILEPATH ARGUMENTS ARE MISSING.\");\r\n    process.exit(1);\r\n}\r\nconst opdsJsonFilePath = args[0];\r\nargs = args.slice(1);\r\nif (fs.existsSync(opdsJsonFilePath)) {\r\n    debug(\"OPDS2 JSON file already exists.\");\r\n    process.exit(1);\r\n}\r\n\r\n// tslint:disable-next-line:no-floating-promises\r\n(async () => {\r\n    const feed = new OPDSFeed();\r\n    feed.Context = [\"http://opds-spec.org/opds.jsonld\"];\r\n    feed.Metadata = new OPDSMetadata();\r\n    feed.Metadata.RDFType = \"http://schema.org/DataFeed\";\r\n    feed.Metadata.Title = \"Readium 2 OPDS 2.0 Feed\";\r\n    feed.Metadata.Modified = moment(Date.now()).toDate();\r\n\r\n    feed.Publications = [];\r\n\r\n    let nPubs = 0;\r\n    for (const pathBase64 of args) {\r\n        const pathBase64Str = new Buffer(pathBase64, \"base64\").toString(\"utf8\");\r\n\r\n        if (isHTTP(pathBase64Str)) {\r\n            continue;\r\n        }\r\n\r\n        // const fileName = path.basename(pathBase64Str);\r\n        // const ext = path.extname(fileName).toLowerCase();\r\n\r\n        debug(`OPDS parsing: ${pathBase64Str}`);\r\n        let publication: Publication;\r\n        try {\r\n            publication = await PublicationParsePromise(pathBase64Str);\r\n        } catch (err) {\r\n            debug(err);\r\n            continue;\r\n        }\r\n\r\n        nPubs++;\r\n        const filePathBase64Encoded = encodeURIComponent_RFC3986(pathBase64);\r\n\r\n        const publi = new OPDSPublication();\r\n        publi.Links = [];\r\n        const linkSelf = new OPDSLink();\r\n        linkSelf.Href = filePathBase64Encoded + \"/manifest.json\";\r\n        linkSelf.TypeLink = \"application/webpub+json\";\r\n        linkSelf.AddRel(\"self\");\r\n        publi.Links.push(linkSelf);\r\n\r\n        publi.Images = [];\r\n        const coverLink = publication.GetCover();\r\n        if (coverLink) {\r\n            const linkCover = new OPDSLink();\r\n            linkCover.Href = filePathBase64Encoded + \"/\" + coverLink.Href;\r\n            linkCover.TypeLink = coverLink.TypeLink;\r\n            // linkCover.Rel = [];\r\n            // linkCover.Rel.push(\"cover\");\r\n\r\n            if (coverLink.Width && coverLink.Height) {\r\n                linkCover.Width = coverLink.Width;\r\n                linkCover.Height = coverLink.Height;\r\n\r\n            }\r\n            publi.Images.push(linkCover);\r\n        }\r\n\r\n        if (feed.Metadata) {\r\n            publi.Metadata = new OPDSPublicationMetadata();\r\n            // TODO copy metadata (many more!!!)\r\n            // There must be a more effective and elegant way to do this!!\r\n            // ==> implement shared data model, clone the common parts\r\n            if (publication.Metadata.Artist) {\r\n                publi.Metadata.Artist = [];\r\n                publication.Metadata.Artist.forEach((contributor) => {\r\n                    const c = new OPDSContributor();\r\n                    if (contributor.Identifier) {\r\n                        c.Identifier = contributor.Identifier;\r\n                    }\r\n                    if (contributor.Name) {\r\n                        c.Name = contributor.Name;\r\n                    }\r\n                    if (contributor.Role) {\r\n                        c.Role = contributor.Role;\r\n                    }\r\n                    if (contributor.SortAs) {\r\n                        c.SortAs = contributor.SortAs;\r\n                    }\r\n                    publi.Metadata.Artist.push(c);\r\n                });\r\n            }\r\n        }\r\n\r\n        feed.Publications.push(publi);\r\n    }\r\n\r\n    feed.Metadata.NumberOfItems = nPubs;\r\n\r\n    const jsonObj = TAJSON.serialize(feed);\r\n    const jsonStr = global.JSON.stringify(jsonObj, null, \"\");\r\n    fs.writeFileSync(opdsJsonFilePath, jsonStr, { encoding: \"utf8\" });\r\n\r\n    debug(\"DONE! :)\");\r\n    debug(opdsJsonFilePath);\r\n})();\r\n"]}