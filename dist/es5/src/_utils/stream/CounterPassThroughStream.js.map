{"version":3,"file":"CounterPassThroughStream.js","sourceRoot":"","sources":["../../../../../src/_utils/stream/CounterPassThroughStream.ts"],"names":[],"mappings":";;;AAAA,iCAAmC;AAInC;IAA8C,oDAAS;IAInD,kCAAY,EAAU;QAAtB,YACI,iBAAO,SAGV;QAFG,KAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,KAAI,CAAC,aAAa,GAAG,CAAC,CAAC;;IAC3B,CAAC;IAEM,6CAAU,GAAjB,UAAkB,KAAa,EAAE,SAAiB,EAAE,QAAoB;QACpE,IAAI,CAAC,aAAa,IAAI,KAAK,CAAC,MAAM,CAAC;QAEnC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEjB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEtB,QAAQ,EAAE,CAAC;IACf,CAAC;IACL,+BAAC;AAAD,CAAC,AAnBD,CAA8C,kBAAS,GAmBtD;AAnBY,4DAAwB","sourcesContent":["import { Transform } from \"stream\";\r\n\r\n// const debug = debug_(\"r2:rangeStream\");\r\n\r\nexport class CounterPassThroughStream extends Transform {\r\n    public bytesReceived: number;\r\n    public readonly id: number;\r\n\r\n    constructor(id: number) {\r\n        super();\r\n        this.id = id;\r\n        this.bytesReceived = 0;\r\n    }\r\n\r\n    public _transform(chunk: Buffer, _encoding: string, callback: () => void): void {\r\n        this.bytesReceived += chunk.length;\r\n\r\n        this.push(chunk);\r\n\r\n        this.emit(\"progress\");\r\n\r\n        callback();\r\n    }\r\n}\r\n"]}