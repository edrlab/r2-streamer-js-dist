{"version":3,"file":"zipInjector.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zipInjector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\r\n\r\nimport * as debug_ from \"debug\";\r\nimport * as yauzl from \"yauzl\";\r\nimport * as yazl from \"yazl\";\r\n\r\nconst debug = debug_(\"r2:zipInjector\");\r\n\r\nenum InjectType {\r\n    FILE,\r\n    BUFFER,\r\n    STREAM,\r\n}\r\n\r\nexport function injectStreamInZip(\r\n    destPathTMP: string,\r\n    destPathFINAL: string,\r\n    stream: NodeJS.ReadableStream,\r\n    zipEntryPath: string,\r\n    zipError: (e: any) => void,\r\n    doneCallback: () => void) {\r\n\r\n    injectObjectInZip(destPathTMP, destPathFINAL,\r\n        stream, InjectType.STREAM,\r\n        zipEntryPath, zipError, doneCallback);\r\n}\r\n\r\nexport function injectBufferInZip(\r\n    destPathTMP: string,\r\n    destPathFINAL: string,\r\n    buffer: Buffer,\r\n    zipEntryPath: string,\r\n    zipError: (e: any) => void,\r\n    doneCallback: () => void) {\r\n\r\n    injectObjectInZip(destPathTMP, destPathFINAL,\r\n        buffer, InjectType.BUFFER,\r\n        zipEntryPath, zipError, doneCallback);\r\n}\r\n\r\nexport function injectFileInZip(\r\n    destPathTMP: string,\r\n    destPathFINAL: string,\r\n    filePath: string,\r\n    zipEntryPath: string,\r\n    zipError: (e: any) => void,\r\n    doneCallback: () => void) {\r\n\r\n    injectObjectInZip(destPathTMP, destPathFINAL,\r\n        filePath, InjectType.FILE,\r\n        zipEntryPath, zipError, doneCallback);\r\n}\r\n\r\nfunction injectObjectInZip(\r\n    destPathTMP: string,\r\n    destPathFINAL: string,\r\n    contentsToInject: any,\r\n    typeOfContentsToInject: InjectType,\r\n    zipEntryPath: string,\r\n    zipError: (e: any) => void,\r\n    doneCallback: () => void) {\r\n\r\n    yauzl.open(destPathTMP, { lazyEntries: true, autoClose: false }, (err: any, zip: any) => {\r\n        if (err) {\r\n            debug(\"yauzl init ERROR\");\r\n            zipError(err);\r\n            return;\r\n        }\r\n\r\n        const zipfile = new yazl.ZipFile();\r\n\r\n        zip.on(\"error\", (erro: any) => {\r\n            debug(\"yauzl ERROR\");\r\n            zipError(erro);\r\n        });\r\n\r\n        zip.readEntry(); // next (lazyEntries)\r\n        zip.on(\"entry\", (entry: any) => {\r\n            // if (/\\/$/.test(entry.fileName)) {\r\n            if (entry.fileName[entry.fileName.length - 1] === \"/\") {\r\n                // skip directories / folders\r\n            } else if (entry.fileName === zipEntryPath) {\r\n                // skip injected entry\r\n            } else {\r\n                // debug(entry.fileName);\r\n                // debug(entry);\r\n                zip.openReadStream(entry, (errz: any, stream: NodeJS.ReadableStream) => {\r\n                    if (err) {\r\n                        debug(\"yauzl openReadStream ERROR\");\r\n                        debug(errz);\r\n                        zipError(errz);\r\n                        return;\r\n                    }\r\n                    // entry.uncompressedSize\r\n                    const compress = entry.fileName !== \"mimetype\";\r\n                    zipfile.addReadStream(stream, entry.fileName, { compress });\r\n                });\r\n            }\r\n            zip.readEntry(); // next (lazyEntries)\r\n        });\r\n\r\n        zip.on(\"end\", () => {\r\n            debug(\"yauzl END\");\r\n\r\n            if (typeOfContentsToInject === InjectType.FILE) {\r\n                zipfile.addFile(contentsToInject as string, zipEntryPath);\r\n\r\n            } else if (typeOfContentsToInject === InjectType.BUFFER) {\r\n                zipfile.addBuffer(contentsToInject as Buffer, zipEntryPath);\r\n\r\n            } else if (typeOfContentsToInject === InjectType.STREAM) {\r\n                zipfile.addReadStream(contentsToInject as NodeJS.ReadableStream, zipEntryPath);\r\n\r\n            } else {\r\n                debug(\"yazl FAIL to inject! (unknown type)\");\r\n            }\r\n\r\n            zipfile.end();\r\n\r\n            const destStream2 = fs.createWriteStream(destPathFINAL);\r\n            zipfile.outputStream.pipe(destStream2);\r\n            // response.on(\"end\", () => {\r\n            // });\r\n            destStream2.on(\"finish\", () => {\r\n                doneCallback();\r\n            });\r\n            destStream2.on(\"error\", (ere: any) => {\r\n                zipError(ere);\r\n            });\r\n        });\r\n\r\n        zip.on(\"close\", () => {\r\n            debug(\"yauzl CLOSE\");\r\n        });\r\n    });\r\n}\r\n"]}