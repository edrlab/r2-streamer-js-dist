{"version":3,"file":"xml-xpathselector.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/decorators/xml-xpathselector.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAE1B,kEAA6D;AAG7D,0BAAiC,QAAgB,EAAE,UAA2B;IAC1E,MAAM,CAAC,UAAC,MAAW,EAAE,GAAW;QAC5B,IAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAGnE,IAAM,MAAM,GAAG,iCAAa,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAEjD,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACzC,QAAQ,CAAC,aAAa,GAAG,QAAQ,CAAC;QAElC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC,CAAC;QA4BD,QAAQ,CAAC,KAAK,GAAG,UAAU,KAAK,KAAK,CAAC;QACtC,QAAQ,CAAC,GAAG,GAAG,UAAU,KAAK,GAAG,CAAC;QAClC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YAC3D,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC,CAAC;QAGD,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;eACpC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;eACvC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;eACvC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;eACxC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;eACvC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAE7C,QAAQ,CAAC,mBAAmB,GAAG,EAAE,CAAC;YAClC,IAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChD,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;gBACf,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACf,MAAM,CAAC;gBACX,CAAC;gBAED,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAKjC,IAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;gBACpC,IAAM,MAAM,GAAG,IAAI,KAAK,QAAQ,CAAC;gBACjC,IAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACnC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBACb,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxD,IAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACzC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrD,SAAS,CAAC;gBAGd,IAAM,YAAY,GAAG,eAAe,CAAC,CAAC;oBAClC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACxD,SAAS,CAAC;gBAEd,IAAM,KAAK,GAAuB;oBAC9B,WAAW,aAAA;oBACX,MAAM,QAAA;oBACN,SAAS,WAAA;oBACT,eAAe,iBAAA;oBACf,YAAY,cAAA;iBACf,CAAC;gBAEF,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC,CAAC;AACN,CAAC;AA5FD,4CA4FC","sourcesContent":["import \"reflect-metadata\";\r\n\r\nimport { getDefinition } from \"../classes/object-definition\";\r\nimport { IXPathSelectorItem, IXmlNamespaces } from \"../types\";\r\n\r\nexport function XmlXPathSelector(selector: string, namespaces?: IXmlNamespaces) {\r\n    return (target: any, key: string): void => {\r\n        const objectType = Reflect.getMetadata(\"design:type\", target, key);\r\n\r\n        // console.log(target.constructor);\r\n        const objDef = getDefinition(target.constructor);\r\n        // console.log(objDef);\r\n        const property = objDef.getProperty(key);\r\n        property.xpathSelector = selector;\r\n\r\n        if (namespaces) {\r\n            property.namespaces = namespaces;\r\n        }\r\n        // TOO EARLY! :( (ObjectDefinition not ready yet)\r\n        // let atLeastOne = false;\r\n        // const namespacesAll: IXmlNamespaces = {};\r\n        // if (objDef.namespaces) {\r\n        //     console.log(\"***************************************** XmlObject NS\");\r\n        //     console.log(objDef.namespaces);\r\n        //     for (const prop in objDef.namespaces) {\r\n        //         if (objDef.namespaces.hasOwnProperty(prop)) {\r\n        //             namespacesAll[prop] = objDef.namespaces[prop];\r\n        //             atLeastOne = true;\r\n        //         }\r\n        //     }\r\n        // }\r\n        // if (namespaces) {\r\n        //     console.log(\"***************************************** PROP NS\");\r\n        //     console.log(namespaces);\r\n        //     for (const prop in namespaces) {\r\n        //         if (namespaces.hasOwnProperty(prop)) {\r\n        //             namespacesAll[prop] = namespaces[prop];\r\n        //             atLeastOne = true;\r\n        //         }\r\n        //     }\r\n        // }\r\n        // if (atLeastOne) { // Object.keys(namespacesAll).length)\r\n        //     property.namespaces = namespacesAll;\r\n        // }\r\n\r\n        property.array = objectType === Array;\r\n        property.set = objectType === Set;\r\n        if (!property.array && !property.set && !property.objectType) {\r\n            property.objectType = objectType;\r\n        }\r\n\r\n        // console.log(\"£££££££££ \" + property.xpathSelector);\r\n        if (property.xpathSelector.indexOf(\"|\") < 0\r\n            && property.xpathSelector.indexOf(\">\") < 0\r\n            && property.xpathSelector.indexOf(\"*\") < 0\r\n            && property.xpathSelector.indexOf(\"||\") < 0\r\n            && property.xpathSelector.indexOf(\"[\") < 0\r\n            && property.xpathSelector.indexOf(\"]\") < 0) {\r\n\r\n            property.xpathSelectorParsed = [];\r\n            const items = property.xpathSelector.split(\"/\");\r\n            items.forEach((item) => {\r\n                if (!item.length) {\r\n                    return;\r\n                }\r\n                // console.log(item);\r\n                const subitems = item.split(\":\");\r\n                // console.log(subitems[0]);\r\n                // if (subitems.length > 1) {\r\n                //     console.log(subitems[1]);\r\n                // }\r\n                const isAttribute = item[0] === \"@\";\r\n                const isText = item === \"text()\";\r\n                const localName = subitems.length > 1 ?\r\n                    subitems[1] :\r\n                    (isAttribute ? subitems[0].substr(1) : subitems[0]);\r\n                const namespacePrefix = subitems.length > 1 ?\r\n                    (isAttribute ? subitems[0].substr(1) : subitems[0]) :\r\n                    undefined;\r\n\r\n                // likely nil at this stage, populated in XmlObject() using top-level NS URI map\r\n                const namespaceUri = namespacePrefix ?\r\n                    (namespaces ? namespaces[namespacePrefix] : undefined) :\r\n                    undefined;\r\n\r\n                const xItem: IXPathSelectorItem = {\r\n                    isAttribute,\r\n                    isText,\r\n                    localName,\r\n                    namespacePrefix,\r\n                    namespaceUri,\r\n                };\r\n                // console.log(xItem);\r\n                property.xpathSelectorParsed.push(xItem);\r\n            });\r\n        }\r\n    };\r\n}\r\n"]}